<?xml version="1.0" encoding="utf-8"?>
<search>
  <entry>
    <title>How to write an Academic Research Paper</title>
    <url>/2021/03/12/How-to-write-an-Academic-Research-Paper/</url>
    <content><![CDATA[<h1 id="how-to-write-an-academic-research-paper">How to write an Academic Research Paper?</h1>
<h2 id="background">BackGround</h2>
<p>听该讲座大概已经有接近四个月了，由于本人比较懒，加上今天头脑发热想把罗教授分享的学术经验，写成博客的形式方便自己查阅，也方便其他人浏览。 罗教授求学于剑桥大学，详细介绍请点击 <a href="http://ggglxy.scu.edu.cn/index.php?c=article&amp;id=1269">罗嘉陵</a>。</p>
<p>讲座时间： 2020年11月27日</p>
<p>地点：四川大学公共管理学院306</p>
<p>主题：How to write an Academic Research Paper</p>
<hr>
<h2 id="main-notes">Main Notes</h2>
<h3 id="how-to-write-an-academic-research-papar">How to write an Academic Research Papar?</h3>
<ol type="1">
<li><p>Raise a good question</p>
<p>argument, central question</p>
<p>these works provide us with the most basic questions that continue to guide our field. --Steven Smith</p></li>
<li><p>Critical thinking</p>
<p>writing is a way to think...</p>
<p>powerful thought allow one to write readably... (Charles Baudelaire)</p></li>
<li><p>Reading intensively and extensively</p>
<p>Most of the good writers are good readers</p>
<p>families yourself with your research area</p></li>
<li><p>Being interdisciplinary</p>
<p>high rate of HIV-AIDS in Sichuan</p></li>
<li><p>Languages</p>
<p>multilingual</p></li>
<li><p>Writing skills</p>
<p>《The Element of Style》Book</p></li>
<li><p>Practice, patient,stay motivated</p>
<p>Phd</p></li>
<li><p>Some tips</p>
<p>A. Procrastination and time management</p>
<pre><code> action

 emotional and psychological

 stop being a perfectionist(*)</code></pre>
<p>B. Creating a productive daily routine</p>
<pre><code> how many words a day ; reading in the morning &amp; writing in the afternoon;

 writing/reading no more than 6 hours per day

 take regular breaks</code></pre>
<p>C. peer support</p>
<p>D. change of scene</p>
<pre><code> writing process can be painful ... resistance, struggle..but rewarding</code></pre></li>
<li><p>Journal</p>
<p>Jstor; Wily</p></li>
</ol>
<hr>
<h2 id="final">Final</h2>
<p>听社会学教授的讲座还是挺不错的！！！</p>
]]></content>
      <categories>
        <category>Paper</category>
      </categories>
      <tags>
        <tag>Paper</tag>
      </tags>
  </entry>
  <entry>
    <title>JSP自定义标签</title>
    <url>/2018/02/17/Jsp_customize_tags/</url>
    <content><![CDATA[<h1 id="jsp自定义标签">JSP自定义标签</h1>
<p>自定义标签的实现，叫做标签处理器，而简单的标签处理器是指继承<strong>SimpleTag</strong> 实现的标签管理器。 简单标签管理器不在被jsp容器缓存。但这并不意味着简单标签处理器会比之前的慢。 &gt; 初始化性能指标显示，缓存标签处理器并不能提供较好的性能优化，但缓存这些标签让实现标签变得更加困难，而且让这些标签带来更多的潜在错误。</p>
<p><strong>JSP规范的作者在JSP规范的7.15一节写到</strong></p>
<p><strong>SimpleTag</strong>接口中用于标签触发的方法只有一个<strong>doTag</strong>，并且该方法只会执行一次。业务逻辑，遍历以及页面内容的操作都在这里实现。</p>
<p><code>javax.servlet.jsp.targext</code>包中包含了一个SimpleTag的基础类 <strong>SimpleTagSupport</strong>提供了SimpleTag的所有方法的实现，并便于扩展简单标签处理器。 <strong>SimpleTagSupport</strong>类中用getJspContext方法返回JspContext实例，这个实例在JSP容器中用SimpleTag的setJspContext方法传入。 ***</p>
<h2 id="simpletag示例">SimpleTag示例</h2>
<h3 id="编写标签处理器">编写标签处理器</h3>
<h4 id="myfirsttag类">MyFirstTag类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.JspFragment;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.JspTag;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTag;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFirstTag</span> <span class="keyword">implements</span> <span class="title">SimpleTag</span></span>&#123;</span><br><span class="line">	JspContext jspContext;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> JspException, IOException </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;doTag&quot;</span>);</span><br><span class="line">		jspContext.getOut().print(<span class="string">&quot;This is my first tag.&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> JspTag <span class="title">getParent</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;getParent&quot;</span>);</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">null</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJspBody</span><span class="params">(JspFragment body)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		System.out.println(<span class="string">&quot;setJspBody&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setJspContext</span><span class="params">(JspContext jspContext)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;setJspContext&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.jspContext=jspContext;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setParent</span><span class="params">(JspTag parent)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;setParent&quot;</span>);</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="注册标签">注册标签</h3>
<h4 id="mytags.tld">mytags.tld</h4>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">version</span>=<span class="string">&quot;2.1&quot;</span>&gt;</span></span><br><span class="line"></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span></span><br><span class="line">		Simple tag examples</span><br><span class="line">	<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">short-name</span>&gt;</span>My First Taglib Example<span class="tag">&lt;/<span class="name">short-name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>firstTag<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.sean.MyFirstTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">tag</span>&gt;</span>	</span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>name节点用于说明这个标签名称；tag-class则用于指出标签处理器的<strong>完整类名</strong>。 当然一个标签库中可以定义多个标签。</p>
<h3 id="使用标签">使用标签</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;/WEB-INF/mytags.tld&quot;</span> prefix=<span class="string">&quot;easy&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;firstTagTest&lt;/title&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">   Hello!</span><br><span class="line">   &lt;br&gt;</span><br><span class="line">   &lt;easy:firstTag&gt;&lt;/easy:firstTag&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<p>我的项目名 <code>customtag</code> 启动服务器，输入即可。 <code>http://localhost:8080/customtag/firstTagTest.jsp</code></p>
<hr>
<h2 id="处理属性">处理属性</h2>
<p>实现SimpleTag接口或者扩展SimpleTagSupport的标签管理器都可以有属性。</p>
<h3 id="datafrmattertag">DataFrmatterTag</h3>
<p>继承SimpleTagSupport <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.StringTokenizer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DataFrmatterTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String header;</span><br><span class="line">	<span class="keyword">private</span> String items;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getHeader</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> header;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setHeader</span><span class="params">(String header)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.header = header;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getItems</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span> items;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setItems</span><span class="params">(String items)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.items = items;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> IOException,JspException</span>&#123;</span><br><span class="line">		JspContext jspContext=getJspContext();</span><br><span class="line">		JspWriter out=jspContext.getOut();</span><br><span class="line">		</span><br><span class="line">		out.print(<span class="string">&quot;&lt;table style=&#x27;border:1px solid green&#x27;&gt;\n&quot;</span></span><br><span class="line">					+<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&lt;span style=&#x27;font-weight:bold&#x27;&gt;&quot;</span></span><br><span class="line">					+header+<span class="string">&quot;&lt;/span&gt;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span>);</span><br><span class="line">		StringTokenizer tokenizer=<span class="keyword">new</span> StringTokenizer(items,<span class="string">&quot;,&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(tokenizer.hasMoreTokens())&#123;</span><br><span class="line">			String token=tokenizer.nextToken();</span><br><span class="line">			out.print(<span class="string">&quot;&lt;tr&gt;&lt;td&gt;&quot;</span>+token+<span class="string">&quot;&lt;/td&gt;&lt;/tr&gt;\n&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		out.print(<span class="string">&quot;&lt;/table&gt;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure> <code>doTag()</code> 首先通过<code>getJspContext()</code>获取通过JSP容器传入的 <code>JspContext</code>对象 <code>JspContext jspContext=getJspContext();</code> 接着，通过<code>JspContext</code>实例的<code>getOut()</code>获取<code>JspWriter</code>对象 <code>JspWriter out=jspContext.getOut();</code> 然后，<code>doTag()</code>方法使用<code>StringTokenizer</code>解析<code>items</code>属性值。</p>
<p>###注册DataFrmatter标签</p>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">name</span>&gt;</span>dataFormatter<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.sean.DataFrmatterTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">body-content</span>&gt;</span>empty<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>header<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"></span><br><span class="line"><span class="tag">&lt;<span class="name">attribute</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>items<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">required</span>&gt;</span>true<span class="tag">&lt;/<span class="name">required</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">attribute</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="dataformattertagtest.jsp">dataFormatterTagTest.jsp</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;/WEB-INF/mytags.tld&quot;</span> prefix=<span class="string">&quot;easy&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">    </span><br><span class="line">    &lt;title&gt;My JSP <span class="string">&#x27;dataFormatterTagTest.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">	&lt;title&gt;Testing DataFormatterTag&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;easy:dataFormatter items=<span class="string">&quot;Alabama,Alaska,Georgia,Florida&quot;</span> header=<span class="string">&quot;states&quot;</span>/&gt;</span><br><span class="line">    &lt;br&gt;</span><br><span class="line">    &lt;easy:dataFormatter header=<span class="string">&quot;Countries&quot;</span>&gt;</span><br><span class="line">    	&lt;jsp:attribute name=<span class="string">&quot;items&quot;</span>&gt;</span><br><span class="line">    	US,UK,Canada,Korea</span><br><span class="line">    	&lt;/jsp:attribute&gt;</span><br><span class="line">    &lt;/easy:dataFormatter&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="访问标签内容">访问标签内容</h2>
<h3 id="selectelementtag类">SelectElementTag类</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspContext;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspException;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.JspWriter;</span><br><span class="line"><span class="keyword">import</span> javax.servlet.jsp.tagext.SimpleTagSupport;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SelectElementTag</span> <span class="keyword">extends</span> <span class="title">SimpleTagSupport</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String[] countries =&#123;<span class="string">&quot;China&quot;</span>,<span class="string">&quot;Brazil&quot;</span>,<span class="string">&quot;American&quot;</span>,<span class="string">&quot;Japan&quot;</span>&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doTag</span><span class="params">()</span> <span class="keyword">throws</span> IOException,JspException</span>&#123;</span><br><span class="line">		JspContext jspContext=getJspContext();</span><br><span class="line">		JspWriter out=jspContext.getOut();</span><br><span class="line">		out.print(<span class="string">&quot;&lt;select&gt;\n&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;countries.length;i++)&#123;</span><br><span class="line">			getJspContext().setAttribute(<span class="string">&quot;value&quot;</span>, countries[i]);</span><br><span class="line">			getJspContext().setAttribute(<span class="string">&quot;text&quot;</span>, countries[i]);</span><br><span class="line">			getJspBody().invoke(<span class="keyword">null</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		out.print(<span class="string">&quot;&lt;/select&gt;\n&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="注册selectelementtag">注册selectElementTag</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line">       <span class="tag">&lt;<span class="name">tag</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">name</span>&gt;</span>select<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">tag-class</span>&gt;</span>com.sean.SelectElementTag<span class="tag">&lt;/<span class="name">tag-class</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">body-content</span>&gt;</span>scriptless<span class="tag">&lt;/<span class="name">body-content</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">tag</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="selectelementtagtest.jsp">selectElementTagTest.jsp</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;/WEB-INF/mytags.tld&quot;</span> prefix=<span class="string">&quot;easy&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;</span><br><span class="line">    &lt;title&gt;My JSP <span class="string">&#x27;selectElementTagTest.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  </span><br><span class="line">  &lt;body&gt;</span><br><span class="line">    &lt;easy:select&gt;</span><br><span class="line">    	&lt;option value=<span class="string">&quot;$&#123;value&#125;&quot;</span>&gt;$&#123;text&#125;&lt;/option&gt;</span><br><span class="line">    &lt;/easy:select&gt;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<p>我的项目名 <code>customtag</code> 启动服务器，输入即可。 <code>http://localhost:8080/customtag/selectElementTagTest.jsp</code></p>
<h2 id="编写el函数">编写EL函数</h2>
<p>编写EL函数步骤 1.创建一个包含<strong>静态方法</strong>的public类。每个类的静态方法表示一个EL函数。<strong>这个类可以不需要实现任何借口或者继承特定的类。可以像发布其他任何类一样发布这个类</strong> 2.用function节点在标签库描述器注册函数</p>
<table>
<thead>
<tr class="header">
<th>节点</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>description</td>
<td>可选，标签说明</td>
</tr>
<tr class="even">
<td>display-name</td>
<td>在xml工具中显示缩写名字</td>
</tr>
<tr class="odd">
<td>icon</td>
<td>可选，在xml工具中使用icon节点</td>
</tr>
<tr class="even">
<td>name</td>
<td>函数的唯一名字</td>
</tr>
<tr class="odd">
<td>function-class</td>
<td>该函数对应实现的java类的全名</td>
</tr>
<tr class="even">
<td>function-signature</td>
<td>该函数对应实现的java静态方法</td>
</tr>
<tr class="odd">
<td>example</td>
<td>可选，使用该函数的实例说明</td>
</tr>
<tr class="even">
<td>function-extension</td>
<td>可以是一个或者多个节点 ，在xml工具中使用，用于提供该函数更多细节</td>
</tr>
</tbody>
</table>
<p>使用该函数，须将<code>taglib</code>指令中的<code>uri</code>属性指向标签库描述，并指明使用的前缀。然后在JSP页面使用如下语法： <code>$&#123;prefix:functionName(parameterList)&#125;</code></p>
<h3 id="myfunction">MyFunction</h3>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.function;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MyFunction</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> String <span class="title">reverseString</span><span class="params">(String s)</span></span>&#123;</span><br><span class="line">		<span class="comment">//字符串的反转</span></span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> StringBuffer(s).reverse().toString();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="functiontags.tld">functiontags.tld</h3>
<figure class="highlight xml"><table><tr><td class="code"><pre><span class="line"><span class="meta">&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">taglib</span> <span class="attr">xmlns</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xmlns:xsi</span>=<span class="string">&quot;http://www.w3.org/2001/XMLSchema-instance&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">xsi:schemaLocation</span>=<span class="string">&quot;http://java.sun.com/xml/ns/j2ee web-jsptaglibrary_2_1.xsd&quot;</span></span></span><br><span class="line"><span class="tag">		<span class="attr">version</span>=<span class="string">&quot;2.1&quot;</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">description</span>&gt;</span>Function tag example<span class="tag">&lt;/<span class="name">description</span>&gt;</span>		</span><br><span class="line">	<span class="tag">&lt;<span class="name">tlib-version</span>&gt;</span>1.0<span class="tag">&lt;/<span class="name">tlib-version</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">uri</span>&gt;</span>http://example.com/taglib/function<span class="tag">&lt;/<span class="name">uri</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;<span class="name">function</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">description</span>&gt;</span>Reverse a String<span class="tag">&lt;/<span class="name">description</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">name</span>&gt;</span>reverseString<span class="tag">&lt;/<span class="name">name</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">function-class</span>&gt;</span>com.sean.function.MyFunction<span class="tag">&lt;/<span class="name">function-class</span>&gt;</span></span><br><span class="line">		<span class="tag">&lt;<span class="name">function-signature</span>&gt;</span>java.lang.String reverseString(java.lang.String)<span class="tag">&lt;/<span class="name">function-signature</span>&gt;</span></span><br><span class="line">	<span class="tag">&lt;/<span class="name">function</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">taglib</span>&gt;</span></span><br></pre></td></tr></table></figure>
<h3 id="使用el">使用El</h3>
<figure class="highlight jsp"><table><tr><td class="code"><pre><span class="line">&lt;%@ page language=<span class="string">&quot;java&quot;</span> <span class="keyword">import</span>=<span class="string">&quot;java.util.*&quot;</span> pageEncoding=<span class="string">&quot;UTF-8&quot;</span>%&gt;</span><br><span class="line">&lt;%@ taglib uri=<span class="string">&quot;http://example.com/taglib/function&quot;</span> prefix=<span class="string">&quot;f&quot;</span> %&gt;</span><br><span class="line">&lt;%</span><br><span class="line">String path = request.getContextPath();</span><br><span class="line">String basePath = request.getScheme()+<span class="string">&quot;://&quot;</span>+request.getServerName()+<span class="string">&quot;:&quot;</span>+request.getServerPort()+path+<span class="string">&quot;/&quot;</span>;</span><br><span class="line">%&gt;</span><br><span class="line"></span><br><span class="line">&lt;!DOCTYPE HTML PUBLIC <span class="string">&quot;-//W3C//DTD HTML 4.01 Transitional//EN&quot;</span>&gt;</span><br><span class="line">&lt;html&gt;</span><br><span class="line">  &lt;head&gt;</span><br><span class="line">    &lt;base href=<span class="string">&quot;&lt;%=basePath%&gt;&quot;</span>&gt;    </span><br><span class="line">    &lt;title&gt;My JSP <span class="string">&#x27;functionTagTest.jsp&#x27;</span> starting page&lt;/title&gt;</span><br><span class="line">  &lt;/head&gt;</span><br><span class="line">  &lt;body&gt;</span><br><span class="line">   $&#123;f:reverseString(<span class="string">&quot;Hello, World&quot;</span>) &#125;</span><br><span class="line">   &lt;br&gt;</span><br><span class="line">   $&#123;f:reverseString(<span class="string">&quot;Welcome&quot;</span>)&#125;</span><br><span class="line">  &lt;/body&gt;</span><br><span class="line">&lt;/html&gt;</span><br></pre></td></tr></table></figure>
<h2 id="发布自定义标签">发布自定义标签</h2>
<p>在functiontags.tld增加<code>uri</code>节点 <code>&lt;uri&gt;http://example.com/taglib/function&lt;/uri&gt;</code></p>
<p>在jsp页面添加 <code>&lt;%@ taglib uri="http://example.com/taglib/function" prefix="f" %&gt;</code></p>
<h2 id="总结">总结</h2>
<p>自定义标签解决JavaBean中前端展现与后端逻辑分离的好办法。</p>
]]></content>
      <categories>
        <category>Java</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>JSP</tag>
      </tags>
  </entry>
  <entry>
    <title>Sublime Latex configure and preview math equation</title>
    <url>/2021/03/30/Latex-Sublime-configure/</url>
    <content><![CDATA[<h1 id="sublime-editor-configure">sublime editor configure</h1>
<h2 id="安装-sublime-editor">安装 sublime editor</h2>
<p>在讲述 sublime editor 配置之前，说一点无关紧要的话，缓解缓缓烦闷的气氛！想必大家都爱用巨硬的<a href="https://code.visualstudio.com/">VS Code</a>吧！不过，目前我还没有去尝试！主要是没有时间和当前使用的代码编辑器足够我使用就没有尝试 VS code。据我了解，VS Code 的插件 <strong>异常丰富</strong>（插件更新快），开发者<strong>特别活跃</strong>。如果有时间和精力，以后可能会去尝试吧！</p>
<p>说了这么多题外话，开始步入正题，sublime editor 安装。安装 sublime，对于 windows 使用的朋友来说，相当简单，首先去官网 <a href="http://www.sublimetext.com/">Sublime Offical</a> 下载，然后只管点点点！哇晒！安装成功了！你开心就好！对于linux用户，官网上也有安装<a href="http://www.sublimetext.com/docs/3/linux_repositories.html">教程</a>，对于mac用户，去官网找找，<a href="https://baidu.com">百度百度</a>，<a href="https:bing.com/">bing!bing!</a>或者 <a href="https://google.com">Goole!Google!</a>，当然可以<a href="https://duckduckgo.com/">DuckDuckGo</a>!</p>
<p>对于注册码部分，自己可以去百度！不过好像 sublime 添加了联网检测机制。对于重复多人使用的注册码会无效！魔高一尺道高一丈，当然是有方法的，可以通过修改 <code>host</code> 文件解决问题。不注册也能用，只是偶尔会提醒你注册，提醒频率极低！如果你有闲钱，欢迎你支持正版。支持一下，软件开发者！哈哈！好像有打广告嫌疑！</p>
<h2 id="安装-package-control">安装 Package Control</h2>
<p>使用 Sublime editor，不安装 Package Control，你将会失去 Sublime 的乐趣和方便性。方便指的是使用 <strong>Package Control</strong> 安装 Sublime 的插件十分方便！至于安装教程可参考 <a href="https://packagecontrol.io/installation">Package Control Install</a> 官方教程。怎么老是给我推荐官方教程？主要是自己懒，其次官方教程比较可靠！推荐使用官方教程的第二种方法 <strong>Menu</strong>，直接 <strong>点点点</strong>就OK啦！第一种方法也简单，使用命令行。调出 Sublime 命令行的快捷键方法 <code>ctrl+shit+p</code>，以后你会经常使用它。提前学习了！</p>
<h2 id="使用-package-control-安装插件">使用 Package Control 安装插件</h2>
<ol type="1">
<li><p>调出 Sublime 的命令行面板，按下 <strong>快捷键</strong> <code>ctrl+shit+p</code> or <code>cmd+shit+p</code>。如下图所是，按下快捷键<code>ctrl+shit+p</code></p></li>
<li><p>输入需要安装插件的名字，比如我门需要安装<strong>Latextools</strong>，来配置latex写作环境。然后等待安装即可！</p></li>
</ol>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/PackageControlInstallWidget.gif" alt><figcaption>Package Control 安装插件演示</figcaption>
</figure>
<ol start="3" type="1">
<li>我常用的插件，请看下图！实际是你需要什么，就安装什么，按需使用！</li>
</ol>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/ownWidgetsList.gif" alt><figcaption>常用 Sublime 插件</figcaption>
</figure>
<hr>
<h1 id="latextools-配置">Latextools 配置</h1>
<p>Latextools 的配置，需要安装其他软件，比如 Tex，ImageMagick，Ghostscript....怎么需要安装这么多软件？你有捆绑销售的嫌疑哈！如果不需要公式预览功能，ImageMagick 是不需要安装的，Ghostscprit 在安装 TexLive 时，就顺带安装了！最后只剩下孤单的 Tex 一人。如果你需要公式预览功能，它就有其他伙伴！不然 Tex 太孤单了！Tex 的其他朋友，请继续往下阅读！</p>
<h2 id="latextools-软件依赖">Latextools 软件依赖</h2>
<h3 id="tex-安装">Tex 安装</h3>
<ol type="1">
<li><p>下载 Tex 安装包！国内用户，建议使用<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华 mirror 源</a>下载 TexLive。下载提示：<code>获取下载链接</code> -&gt; <code>应用软件</code> -&gt; <code>Tex 排版系统</code> -&gt; <code>Tex Live</code>。建议安装 TexLive 安装最新版本。其中的 TexLive支持 Windows 和 Linux；MikTex 适合 Windows，MacOS，Linux，而 MacTex 是只适合 MacOS的。</p></li>
<li><p>安装 TexLive。因为是 ISO 文件，可能需要<strong>挂载</strong>，然后去找其中含有 <strong>install</strong> 的安装程序。点击安装即可。同样的操作，点点点，注意记住自己的安装路径！</p></li>
</ol>
<h3 id="imagemagick-安装">ImageMagick 安装</h3>
<ol type="1">
<li><p>下载 ImageMagick 安装包，去官网下载吧！ <a href="https://imagemagick.org/script/download.php">ImageMagick Download</a></p></li>
<li><p>直接点击安装即可！ <strong>点点点！</strong></p></li>
<li><p>如果你想在 <strong>Powershell</strong> 命令行使用，需要自己配置环境变量！</p></li>
</ol>
<h3 id="ghostscript">GhostScript</h3>
<p>如果安装的 TexLive，是自带有 Ghostscript，无需额外安装！</p>
<h3 id="sumatra-安装">sumatra 安装</h3>
<p>安装这个是用于， sublime 编译后，可以自动弹出阅览pdf效果。反向搜索目的在于可以从编译后生成的pdf文件，双击击你需要查看的内容，会自动跳转到 sublime 对应的编辑位置。</p>
<ol type="1">
<li><p>sumatra <a href="https://www.sumatrapdfreader.org/download-free-pdf-viewer.html">下载地址</a></p></li>
<li><p>配置反向搜索</p></li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line">SumatraPDF.exe -inverse-search &quot;\&quot;D:\SoftInstallPlace\Sublime Text <span class="number">3</span>\sublime_text.exe\&quot; \&quot;<span class="variable">%f:%</span>l\&quot;&quot;</span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><p>如果上述命令执行不成功，显示无法找到该命令。第一种方法是配置 sumatra 环境变量; 第二种方法是用 <strong>Powershell</strong>，切换到 sumatra 安装目录，然后执行上述命令。注意对应的 exe 文件名要和你安装的 SumatraPDF 程序相对应！</p></li>
<li><p>结果如下</p></li>
</ol>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/SumatraInverseSearch.jpg" alt><figcaption>Sumatra 反向搜索配置</figcaption>
</figure>
<h2 id="latextools-配置开始">Latextools 配置开始</h2>
<h3 id="打开latextools-配置文件">打开LatexTools 配置文件</h3>
<ol type="1">
<li><p>点击菜单栏的 <code>Preferences</code></p></li>
<li><p>点击 <code>Package Settings</code></p></li>
<li><p>点击 <code>Latextools</code></p></li>
<li><p>点击 <code>Settings-user</code></p></li>
</ol>
<p>实际看图片更简单明了！如下为操作的具体过程！如果打开文件为空白(null)，可以把默认的配置文件复制过来！</p>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/openLatextoolsConfig.gif" alt><figcaption>打开Latextools配置文件</figcaption>
</figure>
<h3 id="windows-配置项">windows 配置项</h3>
<p>大概在209行左右，也可以用 <code>Ctrl+F</code>搜索关键词 <strong>windows</strong>，我们以 windows 平台介绍！</p>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/latexToolsWindowsItem.png" alt><figcaption>windows 配置项预览</figcaption>
</figure>
<ol type="1">
<li><strong>texpath</strong> 配置。需要添加安装<strong>texlive安装环境</strong>，例如我的是</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">SoftInstallPlace</span>\\<span class="title">texlive</span>\\2019\\<span class="title">bin</span>\\<span class="title">win32</span>;</span></span><br></pre></td></tr></table></figure>
<p>根据你自己安装路径，修改一下，各环境变量用分号隔开！添加 <strong>ImageMagick 安装环境</strong>，例如我的 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">SoftInstallPlace</span>\\<span class="title">ImageMagick</span>-7\\;</span></span><br></pre></td></tr></table></figure> 添加 <strong>Ghostscript 安装环境</strong>，texlive 自带，因此为 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">SoftInstallPlace</span>\\<span class="title">texlive</span>\\2019\\<span class="title">tlpkg</span>\\<span class="title">tlgs</span>\\<span class="title">bin</span></span></span><br></pre></td></tr></table></figure></p>
<ol start="2" type="1">
<li><strong>distro</strong> 配置。因为前面我们安装的是 texlive，因此要修改为 <code>texlive</code>。</li>
</ol>
<figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">distro: &quot;<span class="title">texlive</span>&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="3" type="1">
<li><strong>sumatra</strong>配置。例如我配置项为 <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\\<span class="title">SoftInstallPlace</span>\\<span class="title">SumatraPDF</span>\\<span class="title">SumatraPDF.exe</span></span></span><br></pre></td></tr></table></figure></li>
</ol>
<h3 id="preview-math-latex-compile-program-配置">preview math latex compile program 配置</h3>
<p>公式预览编译器的设置，<code>xelatex</code>挺不错的，就改成这个 Tex 编译引擎。</p>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/PreviewMathLatexCompileProgram.png" alt><figcaption>preview math latex compile program配置</figcaption>
</figure>
<h1 id="其他问题说明">其他问题说明</h1>
<h2 id="math-equation-预览功能无法使用">Math Equation 预览功能无法使用</h2>
<ol type="1">
<li>使用 <code>LatexTools:check system</code> 查看 tex 宏包是否安装完全，以及环境是否配置正确！像 <strong>biber</strong> 和 <strong>convert</strong> 或 <strong>magick</strong> 显示不可用是可以忽略！使用 check system 有一定的参考价值，实际它是有 bug 的，因为自己确实安装并配置了环境变量，而他显示未检测到其他需要软件！具有一定的误导作用！记得以前为了解决未检测其他软件，自己反复重新安装软件，并配置环境变量，它给我的反馈都一样！最后发现是插件作者写的该检测环境脚本鲁棒性不够，至少对于我使用是有问题的！</li>
</ol>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/LatexToolsCheckSystem.gif" alt><figcaption>LatexTools: Check system</figcaption>
</figure>
<ol start="2" type="1">
<li>Windows 用户的朋友需要添加 环境变量 <code>GS_LIB</code>，环境变量的值为: <figure class="highlight cmd"><table><tr><td class="code"><pre><span class="line"><span class="function">D:\<span class="title">SoftInstallPlace</span>\<span class="title">texlive</span>\2019\<span class="title">tlpkg</span>\<span class="title">tlgs</span>\<span class="title">Resource</span>\<span class="title">Init</span>;<span class="title">D</span>:\<span class="title">SoftInstallPlace</span>\<span class="title">texlive</span>\2019\<span class="title">tlpkg</span>\<span class="title">tlgs</span>\<span class="title">kanji</span></span></span><br></pre></td></tr></table></figure> 当时安装配置完环境，公式预览无法实现，也自己查了以下 sublime 在实现公式预览生成的临时文件，发现并未有生成 pdf 文件，和生成pdf有关的软件为 Ghostscript，定位到出问题的大致位置。你可能会问Imagemagick软件是干嘛的呢？请看软件名中的Image-&gt;处理图片的。<strong>实际预览的公式为图片文件</strong>。对应修改自己的安装目录！ <a href="https://www.jianshu.com/p/fee3fa234626">参考网址</a></li>
</ol>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/GS_LIB.jpg" alt><figcaption>GS LIB</figcaption>
</figure>
<h2 id="首次使用-tex-编译文件">首次使用 tex 编译文件</h2>
<ol type="1">
<li>使用 命令板方式</li>
</ol>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/FirstBuidPdf.gif" alt><figcaption>第一次编译pdf</figcaption>
</figure>
<ol start="3" type="1">
<li><p>快捷键编译 <code>Ctrl+B</code></p></li>
<li><p>使用<code>Ctrl+B</code>可能出现问题，如下</p></li>
</ol>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/errofirstbuidpdf.jpg" alt><figcaption>You must set command in your latextools.sublime-settings file before lauching the script builder</figcaption>
</figure>
<p>解决方案，从提示的错误来解释，便是你使用的是 <strong>script builder</strong>脚本编译文件，因此你需要添加在脚本编译设置处添加如下内容。</p>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/SolutionErroFirstBuidPdf.jpg" alt><figcaption>解决方法</figcaption>
</figure>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line"><span class="string">&quot;script_commands&quot;</span>:[</span><br><span class="line">    <span class="string">&quot;pdflatex -synctex=1 -interaction=nonstopmode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;bibtex&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pdflatex -synctex=1 -interaction=nonstopmode&quot;</span>,</span><br><span class="line">    <span class="string">&quot;pdflatex -synctex=1 -interaction=nonstopmode&quot;</span></span><br><span class="line">   ]</span><br></pre></td></tr></table></figure>
<p>上面的 <code>pdflatex</code> 你可以替换成 <code>xelatex</code> 等 Tex 编译引擎。</p>
<h1 id="配置后的效果演示">配置后的效果演示</h1>
<h2 id="latex-简单文件模板">latex 简单文件模板</h2>
<figure class="highlight tex"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">\documentclass</span>[UTF-8]&#123;ctexart&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\usepackage</span>&#123;metalogo,mflogo,amsmath,bm&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;array&#125;</span><br><span class="line"><span class="keyword">\usepackage</span>&#123;graphicx&#125; </span><br><span class="line"><span class="keyword">\usepackage</span>&#123;fancybox&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\begin</span>&#123;document&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">\title</span>&#123;模板文件&#125;</span><br><span class="line"><span class="keyword">\author</span>&#123;author&#125;</span><br><span class="line"><span class="keyword">\date</span>&#123;<span class="keyword">\today</span>&#125;</span><br><span class="line"><span class="keyword">\maketitle</span></span><br><span class="line"></span><br><span class="line">Template Tex file</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">\end</span>&#123;document&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="操作演示">操作演示</h2>
<figure>
<img data-src="/2021/03/30/Latex-Sublime-configure/Demo.gif" alt><figcaption>Demo</figcaption>
</figure>
<h1 id="更多技巧">更多技巧</h1>
<p>更多技巧和定制化的设置，请参考 sublime 官方网站。</p>
<h1 id="备注">备注</h1>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please email to me!😝</p>
<h1 id="主要参考网址">主要参考网址</h1>
<p><a href="https://latextools.readthedocs.io/en/latest/install/">LatexTools</a></p>
<p><a href="http://www.sublimetext.com/">Sublime</a></p>
<p><a href="http://www.sublimetext.com/">Imagemagick</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Paper</tag>
        <tag>Latex</tag>
        <tag>Tools</tag>
        <tag>Sublime</tag>
      </tags>
  </entry>
  <entry>
    <title>linux简单介绍</title>
    <url>/2018/03/19/Linux_Introduction/</url>
    <content><![CDATA[<h1 id="linux">linux</h1>
<p>Linux是一套免费使用和自由传播的<a href="https://baike.baidu.com/item/%E7%B1%BBUnix">类Unix</a><a href="https://baike.baidu.com/item/%E6%93%8D%E4%BD%9C%E7%B3%BB%E7%BB%9F/192">操作系统</a>，是一个基于<a href="https://baike.baidu.com/item/POSIX">POSIX</a>和<a href="https://baike.baidu.com/item/UNIX">UNIX</a>的多用户、<a href="https://baike.baidu.com/item/%E5%A4%9A%E4%BB%BB%E5%8A%A1">多任务</a>、支持<a href="https://baike.baidu.com/item/%E5%A4%9A%E7%BA%BF%E7%A8%8B">多线程</a>和多<a href="https://baike.baidu.com/item/CPU">CPU</a>的操作系统。它能运行主要的UNIX工具软件、应用程序和网络协议。它支持<a href="https://baike.baidu.com/item/32%E4%BD%8D/5812218">32位</a>和<a href="https://baike.baidu.com/item/64%E4%BD%8D">64位</a>硬件。Linux继承了<a href="https://baike.baidu.com/item/Unix">Unix</a>以网络为核心的设计思想，是一个性能稳定的多用户网络操作系统。</p>
<p>Linux操作系统诞生于1991 年10 月5 日（这是第一次正式向外公布时间）。Linux存在着许多不同的Linux版本，但它们都使用了<a href="https://baike.baidu.com/item/Linux%E5%86%85%E6%A0%B8">Linux内核</a>。Linux可安装在各种计算机硬件设备中，比如手机、平板电脑、路由器、视频游戏控制台、台式计算机、大型机和超级计算机。</p>
<hr>
<h2 id="linux简介">linux简介</h2>
<p>linux的核心是由 <strong>Linus Torvads</strong> 在1991年的时候开发出来的。</p>
<p>讲linux的必须先讲它的大哥<strong>Unix</strong></p>
<p><strong>Unix</strong>是以高阶的C语言在贝尔实验室(AT&amp;T)写成的。总之Unix是一个很6的系统,可以查阅Unix的源代码。刚开发时，大家都可以免费使用。后来由于AT&amp;T由于商业的考虑，于是将Unix的版权回收。特别提到 <strong>不可对学生提供源代码</strong>。版权的收回，影响到学校教Unix源代码的教授！Andrew Tanenbaum(谭宁邦)教授自己动手写了Minix这个Unix Like的核心代码！在编写源代码过程中，为了避免版权纷争，教授完全不看Unix核心源代码！并且强调Minix要完全和Unix兼容才行！1984开始写代码，到1986年结束。</p>
<p>1984年的GNU计划。（Richard Mathew Stallman 史托曼） 软件分享 GCC(GNU C Complier )</p>
<p>后来就是Linus Torvads 在Minix的基础上编写了linux。于1991年发布。</p>
<p>大概就讲这么多吧！</p>
<hr>
<h2 id="linux-发行版本">linux 发行版本</h2>
<p>自己看图吧！</p>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/Linux_Distribution.jpg" alt><figcaption>linux 发行版本</figcaption>
</figure>
<p>如果看的不清楚可以去这个网站 <a href="http://futurist.se/gldt/">linux发行图</a></p>
<p><a href="http://futurist.se/gldt/wp-content/uploads/12.10/gldt1210.svg">linux发行图</a></p>
<p>是不是太多了！看的都眼花了！自己选择一款喜欢的发行版本。</p>
<p>友情链接</p>
<p><a href="https://www.redhat.com">Redhat</a> <a href="https://www.centos.org/">Centos</a> <a href="https://www.debian.org/">Debian</a> <a href="https://www.ubuntu.com">ubuntu</a> <a href="https://download.suse.com">SUSE</a> <a href="https://www.opensuse.org/">openSUE</a></p>
<p>自己可以玩玩！当然还有很多其他版本！也有一些酷炫的版本！</p>
<hr>
<h2 id="linux安装">linux安装</h2>
<p>我们安装Ubuntu版的linux系统。安装桌面版的。易于个人使用。</p>
<h3 id="首先去官网下载ubuntu镜像">首先去官网下载ubuntu镜像</h3>
<p><a href="https://www.ubuntu.com/download/desktop">Ubuntu下载地址</a></p>
<p><a href="https://tutorials.ubuntu.com/tutorial/tutorial-install-ubuntu-desktop?_ga=2.9209781.1862713034.1521263401-1655017864.1521263401#0">Ubuntu安装教程</a></p>
<h3 id="提醒要点">提醒要点</h3>
<p>1.要使用刻录盘刻录镜像。刻录完镜像，就可以像安装win10系统一样安装，当然需要修改bios.记得自己分一个干净的盘来安装linux系统。 2.安装要注意分区表格式。 3.系统只能安装在主分区不能安装在逻辑分区。</p>
<hr>
<h2 id="linux简单的使用">linux简单的使用</h2>
<p>linux不同版本的linux命令有一些不同的地方，但是大部分是相同的。</p>
<p>下面是Ubuntu系统使用的命令。</p>
<p>希望你们在学习linux时<strong>多敲命令</strong>！如同windows上的<strong>cmd</strong></p>
<h3 id="常见命令使用">常见命令使用</h3>
<p>打开终端</p>
<p>鼠标右击 -&gt; 选择 <code>Open Terminal</code></p>
<p>如下图</p>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/terminal.png" alt><figcaption>Terminal</figcaption>
</figure>
<p>首先讲一个特别有用的命令 <strong>man</strong>这个命令是挺厉害的！比如想知道 <code>ls</code>命令怎么用？可以使用</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">man ls</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/man_ls.gif" alt><figcaption>man ls</figcaption>
</figure>
<p>最后回车键 <code>Enter</code>键 执行命令</p>
<p>按回车或移动鼠标，可以看<code>ls</code>的帮助文档。</p>
<p>不需要阅读帮助文档，看上面截屏的提示。按 <code>q</code> 建退出帮助文档</p>
<p>当然还有一种查看帮助文档的命令: <code>command --help</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ls --<span class="built_in">help</span></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/ls_help.gif" alt><figcaption>ls help</figcaption>
</figure>
<p><strong>记住命令之间一定要有空格！大小写也很重要！</strong></p>
<p>关机命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">poweroff</span><br></pre></td></tr></table></figure>
<p>重启命令</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">reboot</span><br></pre></td></tr></table></figure>
<p>切换目录的命令 <code>cd</code> 显示当前目录下文件命令 <code>ls</code></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">cd</span> /home/sean/</span><br><span class="line">ls</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/cd_ls.gif" alt><figcaption>cd ls</figcaption>
</figure>
<p>如果输入 <code>ls -al</code> 就会显示更多信息</p>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/ls_al.gif" alt><figcaption>ls -la</figcaption>
</figure>
<p><code>top</code>命令就如同windows上的资源管理器</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">top</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/top.gif" alt><figcaption>top</figcaption>
</figure>
<p><code>ctr + z</code>停止这个命令</p>
<h3 id="安装软件">安装软件</h3>
<p>各个linux发行版本的安装软件的方法不一样。ubuntu有一个应用商店.</p>
<p>看图 <img data-src="/2018/03/19/Linux_Introduction/softwareStore.png" alt="software Store"></p>
<p>还有其他安装软件的方法，就是使用命令行。</p>
<p><code>sudo apt install softname</code></p>
<p>例如安装 <code>vim</code> 文本编辑软件。挺好用的。</p>
<p>Ubuntu不自带<code>vim</code>,需要额外安装。Centos自带vim</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install vim</span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/apt_install_vim.gif" alt><figcaption>sudo apt install</figcaption>
</figure>
<p>会叫你输入密码：</p>
<p>你输入时不会显示 <code>*******</code>,输入完成回车，OK！</p>
<p>我的是已经安装了。你们安装时一路回车就安装了。</p>
<p><strong>vim简单使用</strong></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">vim vim.txt</span><br></pre></td></tr></table></figure>
<p>按 <code>a</code>,就可以写文本了。 输入 <code>:w</code> 保存 输入 <code>:q</code> 退出</p>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vim_txt.gif" alt><figcaption>vim</figcaption>
</figure>
<p>vim 官方教程，可以在终端输入<code>vimtutor</code> 或者 在终端输入<code>vim</code>,然后输入<code>:h vimtutor</code>。</p>
<p>vim 其他学习网站 <a href="http://www.viemu.com/a_vi_vim_graphical_cheat_sheet_tutorial.html">viemu</a></p>
<p>再贴一点vim的使用表，没事可以看看。多用就会了。</p>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vimtutor.gif" alt><figcaption>vimtutor</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-tutorial/vi-vim-tutorial-1.svg" alt><figcaption>basic vim</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-tutorial/vi-vim-tutorial-2.svg" alt><figcaption>operator and repetition</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-tutorial/vi-vim-tutorial-3.svg" alt><figcaption>yank and past</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-tutorial/vi-vim-tutorial-4.svg" alt><figcaption>searching</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-tutorial/vi-vim-tutorial-5.svg" alt><figcaption>marks and macros</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-tutorial/vi-vim-tutorial-6.svg" alt><figcaption>various motions</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-tutorial/vi-vim-tutorial-7.svg" alt><figcaption>various commands</figcaption>
</figure>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/vi-vim-cheat-sheet.gif" alt><figcaption>vim grahical cheat sheet</figcaption>
</figure>
<p>Ubuntu 是用<code>apt</code> 或 <code>apt-get</code> 命令安装软件，而Centos使用<code>yum</code>安装软件。</p>
<p><strong>源代码安装</strong> 还有一种安装软件的方法就是源代码编译安装。使用 <code>make</code>命令。这里我就不多说了。因为这涉及库的问题。该方法能安装新版的软件，但是也是最难使用的，不是因为命令复杂，而是因为不容易安装所需要的库！可能各个软件版本所需要的库有所不同，同时库之间可能有冲突，一个库依赖另一个库，可能你需要的就不是单纯安装所提示的库，而是一系列库，简单的说就是 <strong>库之间存在依赖</strong>。哈哈！如果爱折腾，倒是可以折腾一下。当然也有一些软件源码安装比较容易，前提是你已具备所需要的库环境。对于需要使用最新版本的软件，尝试新鲜功能，还是需要使用源码安装。</p>
<h3 id="一些trick命令">一些trick命令</h3>
<h4 id="终端获取天气">终端获取天气</h4>
<p>天气的获取当然可以用网页，或天气软件获得天气，在终端依旧可以获得天气。 首先你需要<code>curl</code>命令。通过前面讲的命令<code>sudo apt install curl</code>安装。 然后使用 <code>curl wttr.in/beijing</code>, 你也可以试试 <code>curl wttr.in/chengdu?format=2</code>。</p>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/weather.gif" alt><figcaption>命令行获取天气</figcaption>
</figure>
<h4 id="获取系统信息">获取系统信息</h4>
<p>当前我使用的已经不是ubuntu了，所以截取的gif图片显示信息不是ubuntu。 但是ubuntu依旧适用。 安装软件命令 <code>sudo apt install screenfetch</code>, 然后直接运行 <code>screenfetch</code>就可以得到如下信息。</p>
<figure>
<img data-src="/2018/03/19/Linux_Introduction/screenfetch.gif" alt><figcaption>screenfetch</figcaption>
</figure>
<h1 id="备注">备注</h1>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please email to me! 😝</p>
]]></content>
      <categories>
        <category>Linux</category>
      </categories>
      <tags>
        <tag>Linux</tag>
      </tags>
  </entry>
  <entry>
    <title>Matlab Live Editor 编辑器简单使用</title>
    <url>/2021/02/02/Matlab-Live-Editor-Introduction/</url>
    <content><![CDATA[<h1 id="matlab-live-editor-基本介绍">Matlab Live Editor 基本介绍</h1>
<p>Matlab <a href="https://www.mathworks.com/products/matlab/live-editor.html">Live Editor</a> 是 matlab R2016a 引入的新matlab实时编辑器，也就是说 <strong>Matlab R2016a</strong>的版本都可以使用live editor。官方给出你可以用 R2014b,R2015a和R2015b打开live script. 使用live editor最好使用高版本的Matlab。我用的R2017b是基本没有问题的。实际在Linux下的MatlabR2017b在使用live editor还是有点问题的，具体在运行大量符号计算的时候，会出现卡机或一直运行，可能Linux(Debian)下的符号运算所使用的库有Bug吧！最近，Matlab更换到MATLAB2021b,运算速度就大幅度提高，对符号运算可以完全运行。上述符号运算问题在Windows不存在。 因此建议使用高版本的MATLAB，最好近一两年的。顺便提一句，MATLAB R2021b 完全安装大概需要30G磁盘空间。</p>
<p>下面是matlab官方给的 live script 解释。翻译一下：live script可以把代码和代码运行的结果保存在一个文件，更强大的功能可以处理文本格式，可以插入公式、插入图片添加超链接等。简单的说更像一个笔记本，功能更强大，使用更方便，比以前的m文件方便多了。个人使用也感受到m文件在各个平台存在中文乱码问题，但是live script不存在中文乱码问题。更多live editor技巧和功能请继续阅读下文。</p>
<blockquote>
<p>you can create live scripts that show output together with the code that produced it. Add formatted text, equations, images, and hyperlinks to enhance your narrative, and share the live script with others as an interactive document.</p>
</blockquote>
<hr>
<p><span class="math inline">\(E=mc^2\)</span></p>
<h1 id="matlab-live-editor-基本使用">Matlab Live Editor 基本使用</h1>
<h2 id="创建-live-script">创建 live script</h2>
<p>创建live script文件有两种方法，一种是鼠标点点点，另一种当然是键盘敲敲敲。</p>
<ol type="1">
<li><p>鼠标点点点方法</p>
<ul>
<li>首先点击菜单栏 <strong>HOME</strong>,然后在matlab左上角点击 <strong>New Live Script</strong></li>
<li>首先点击菜单栏 <strong>HOME</strong>,也可以点击 <strong>New</strong>, 下拉菜单选择 <strong>Live Script</strong>。</li>
</ul>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/creat_live_editor_click.gif" alt><figcaption>点点点创建live script</figcaption>
</figure></li>
<li><p>键盘敲敲敲方法 在matlab的Command窗口输入命令<code>edit filename.mlx</code></p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/creat_live_editor_cmd.gif" alt><figcaption>键盘敲敲敲方法</figcaption>
</figure></li>
</ol>
<h2 id="live-editor-简单使用">Live Editor 简单使用</h2>
<ol type="1">
<li><p>live Editor使用演示, 请看gif图，编程使用和m文件基本相同，主要有自动补全功能，可以防止自己输入代码出错。</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/simple_use_live_editor.gif" alt><figcaption>Live Editor 演示</figcaption>
</figure></li>
<li><p>两种显示代码运行结果的方式</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/show_result_live_editor.gif" alt><figcaption>显示运行结果</figcaption>
</figure></li>
<li><p>运行代码 可以点击 <strong>Run All</strong> 该mlx 文件的代码全部运行。也可以仅仅运行当前节的代码，点击 <strong>Run Section</strong>,运行当前节的代码，可以点击单击live editor左侧边栏。</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/run_code_live_editor.gif" alt><figcaption>运行代码</figcaption>
</figure></li>
<li><p>代码分节 上面讲了代码的分节运行，那么怎么分节呢？ 可以点击Live editor <strong>Section Break</strong>, 或者快捷键<code>Ctrl+Alt+Enter</code>,解放你的鼠标！</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/break_section_live_editor.gif" alt><figcaption>分节操作</figcaption>
</figure></li>
<li><p>运行图片放大</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/zoom_fig_live_editor.gif" alt><figcaption>放大作图</figcaption>
</figure></li>
<li><p>插入文本 live editor可以插入文本，并有一定的格式化功能，可以把matlab代码写成文档的形式。首先你要切换到文本模式，当然可以鼠标点点点，也可以快捷键<code>Alt+Enter</code>,可以再按一次快捷键切换到code模式。</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/insert_text_live_editor.gif" alt><figcaption>切换到文本模式</figcaption>
</figure>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/change_code_live_editor.gif" alt><figcaption>切换到code模式</figcaption>
</figure></li>
<li><p>文本格式化 live editor文本格式化的功能是有限的，不像 MS word 功能强大，但是基本满足需求。还是值得使用的。可以用鼠标点点点实现格式化，我更偏爱用快捷键方式，速度更快。只要你把鼠标悬浮在每个功能上面，就会自动显示对应功能快捷键。下图演示基本的文本操作。</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/text_format_live_editor.gif" alt><figcaption>文本格式化操作演示</figcaption>
</figure></li>
<li><p>插入图片和超链接 Matlab live editor 插入图片和超链接十分方便，简单。 首先在matlab菜单栏选择 <strong>INSERT</strong>, 然后点击 <strong>Image</strong> <strong>Hyperlink</strong></p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/insert_pic_hyperlink_live_editor.gif" alt><figcaption>插入图片和超链接</figcaption>
</figure></li>
<li><p>插入公式 插入公式是一个特别方便的功能，尤其是支持Latex公式，且可以实时预览公式。快捷键插入公式可以提高你的编辑效率，比如<code>Ctrl+ALt+G</code>,Latex模式的公式输入。</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/insert_equation_live_editor.gif" alt><figcaption>插入公式</figcaption>
</figure></li>
<li><p>清除显示结果 有时可能结果出错，想清除live script运行结果。操作如下。 <img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/clear_output_live_editor.gif" alt="清楚结果"></p></li>
<li><p>保存为其他文件 你可以把mlx文件另存为m文件，也可以保存为pdf文件等等。最舒适的pdf文件，可以分享给其他人。pdf文件基本不存在格式问题，具有较好的格式兼容性。 <img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/save_as_live_editor.gif" alt="保存为其他文件"></p></li>
</ol>
<h1 id="更多技巧">更多技巧</h1>
<p>更多使用技巧可以使用 <code>doc live editor</code>来查找！ 相当有用，以上内容全部通过这个帮助文档学习！</p>
<figure>
<img data-src="/2021/02/02/Matlab-Live-Editor-Introduction/more_tech_live_editor.gif" alt><figcaption>获取更多内容</figcaption>
</figure>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>qutebrowser tutorial</title>
    <url>/2022/02/20/Qutebrowser/</url>
    <content><![CDATA[<hr>
<h1 id="怎么接触到-qutebrowser">怎么接触到 qutebrowser</h1>
<p>写 qutebrowser 正文前先来聊聊题外话题。我为什么会发现 qutebrowser 这款小众化的浏览器。最初的动机是自己电脑太古老了，跑一些现在的应用程序太卡顿了，为了提升PC的使用体验，需要采用最小化的应用程序来武装自己的电脑，对于不必要的系统组件尽量不要。毕竟我这台电脑已经不足以带动这么多现代化的大型应用程序。自己的电脑桌面环境从 <a href="https://www.gnome.org/">Gnome</a> 换成一个激进的 Dynamic Windows Manager <a href="https://suckless.org/">dwm</a>。用了一周左右，感觉使用比 Gnome 的操作逻辑舒服，体验效果也不错。毕竟 dwm 程序用纯C写的，代码行数不到2000行（实际我查看最新的 dwm 6.3 源代码加上注释应该有3000行左右，即使这样也体现 dwm 的精简特点）。十分精简，所有配置都是直接修改源代码，刚开始使用比较难受，随后感觉越来越顺手。suckless 的四件套: <a href="https://dwm.suckless.org/"><strong>dwm</strong></a>，<a href="https://st.suckless.org/"><strong>st</strong></a>，<a href="https://tools.suckless.org/dmenu/"><strong>dmenu</strong></a>，<a href="https://tools.suckless.org/slstatus/"><strong>slstatus</strong></a>，<a href="https://tools.suckless.org/slock/"><strong>slock</strong></a>。以前一直使用 Firefox，最近大量查阅IEEE论文，同时开多个IEEE论文网页，系统硬件资源就比较吃紧。开其他网页没这么大影响，推测可能是IEEE这个网站对硬件消耗比较大，需要加载的资源比较多。然后第一反应是使用 suckless 的 <a href="https://surf.suckless.org/">surf</a> 浏览器。毕竟 dwm 在我电脑上运行的还不错。然后花了时间编译运行 surf 浏览器。实际体验效果不是特别好，硬件消耗还是特别严重。查阅网上资料解释说不是 surf 的问题，而是 surf 使用的 <strong>WebKit2/GTK+</strong> 导致硬件消耗比较严重。简单的说就是 surf 不背这锅。 但是由于使用了几天的 surf，被它的快捷键操作逻辑吸引了，可以大部分时间放下鼠标，直接用键盘驱动浏览器，可以带来快速沉浸式浏览网页的体验。然后查询了和 surf 类似的浏览器一个是 <strong>qutebrowser</strong>，另一个是 <a href="https://fanglingsu.github.io/vimb/"><strong>vimb</strong></a>，而自己使用的 Debian 的最新稳定版本的软件仓库里没有vimb，所以就选择 qutebrowser 了。</p>
<p>然后就踏上了qutebrowser折腾之路。</p>
<hr>
<h1 id="qutebrowser-introduction">qutebrowser introduction</h1>
<p>先去 <a href="https://qutebrowser.org/index.html">qutebrowser</a> 官方网站浏览浏览，下面是这样介绍 qutebrowser。翻译过来就是 qutebrowser 是一个键盘驱动的浏览器。</p>
<blockquote>
<p>qutebrowser is a <em>keyboard-focused</em> browser with a minimal GUI. It’s based on <em>Python</em> and <em>PyQt5</em> and free software, licensed under the GPL. It was inspired by other browsers/addons like <em>dwb</em> and <em>VTridactylimperator/Pentadactyl</em>.</p>
</blockquote>
<p>而且 qutebrowser 的键盘配置符合 vim 快捷键，加上自己已习惯 vim 快捷键操作逻辑。因此 qutebrowser 正符合我的口味。值得一提的是 qutebrowser 的作者 Github 名: <a href="https://github.com/The-Compiler"><strong>The-Compiler</strong></a>，个人网站 <a href="https://bruhin.software/">Florian Bruhin Blog</a>。 单独一个人就开发一个浏览器GUI，真厉害！不过由于是单个人开发的浏览器程序，所以没有 Firefox 和 Chrome 功能强大。但是还是值得推荐使用的。值得遗憾的一点就是 qutebrowser 没有 Firefox 和 Chrome 的插件功能。算一个缺点吧！但是 qutebrowser 支持 greasemonkey 油猴脚本和 <a href="https://www.qutebrowser.org/doc/userscripts.html">userscripts</a> (用户自定义脚本)，算弥补了这一缺陷吧。qutebrowser 支持 Windows，macOS 和 Linux平台。PC三巨头都支持哈！</p>
<p><span class="math display">\[
e^{i\theta}=\cos(\theta)+i \sin(\theta)
\]</span></p>
<p>qutebrowser version <code>:version</code></p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">Version info</span><br><span class="line">         ______     ,,</span><br><span class="line">    ,.-&quot;`      | ,-` |</span><br><span class="line">  .^           ||    |</span><br><span class="line"> /    ,-*^|    ||    |</span><br><span class="line">;    /    |    ||    ;-*```^*.</span><br><span class="line">;   ;     |    |;,-*`         \</span><br><span class="line">|   |     |  ,-*`    ,-&quot;&quot;&quot;\    \</span><br><span class="line">|    \   ,-&quot;`    ,-^`|     \    |</span><br><span class="line"> \    `^^    ,-;|    |     ;    |</span><br><span class="line">  *;     ,-*`  ||    |     /   ;;</span><br><span class="line">    `^^`` |    ||    |   ,^    /</span><br><span class="line">          |    ||    `^^`    ,^</span><br><span class="line">          |  _,&quot;|        _,-&quot;</span><br><span class="line">          -*`   ****&quot;&quot;&quot;``</span><br><span class="line"></span><br><span class="line">qutebrowser v2.0.2</span><br><span class="line">Git commit: </span><br><span class="line">Backend: QtWebEngine (Chromium 83.0.4103.122)</span><br><span class="line">Qt: 5.15.2</span><br><span class="line"></span><br><span class="line">CPython: 3.9.2</span><br><span class="line">PyQt: 5.15.2</span><br><span class="line"></span><br><span class="line">sip: 5.4.0</span><br><span class="line">colorama: no</span><br><span class="line">jinja2: 2.11.3</span><br><span class="line">pygments: 2.7.1</span><br><span class="line">yaml: 5.3.1</span><br><span class="line">adblock: 0.5.1</span><br><span class="line">PyQt5.QtWebEngineWidgets: yes</span><br><span class="line">PyQt5.QtWebEngine: 5.15.2</span><br><span class="line">PyQt5.QtWebKitWidgets: no</span><br><span class="line">pdf.js: 2.6.0 (/usr/share/javascript/pdf/build/pdf.js)</span><br><span class="line">sqlite: 3.34.1</span><br><span class="line">QtNetwork SSL: OpenSSL 1.1.1k  25 Mar 2021</span><br><span class="line"></span><br><span class="line">Style: QFusionStyle</span><br><span class="line">Platform plugin: xcb</span><br><span class="line">OpenGL: Intel Open Source Technology Center, 3.0 Mesa 20.3.5</span><br><span class="line">Platform: Linux-5.10.0-11-amd64-x86_64-with-glibc2.31, 64bit</span><br><span class="line">Linux distribution: Debian GNU/Linux 11 (bullseye) (debian)</span><br><span class="line">Frozen: False</span><br><span class="line">Imported from /usr/lib/python3/dist-packages/qutebrowser</span><br><span class="line">Using Python from /usr/bin/python3</span><br><span class="line">Qt library executable path: /usr/lib/x86_64-linux-gnu/qt5/libexec, data path: /usr/share/qt5</span><br><span class="line"></span><br><span class="line">Paths:</span><br><span class="line">cache: /home/sean/.cache/qutebrowser</span><br><span class="line">config: /home/sean/.config/qutebrowser</span><br><span class="line">data: /home/sean/.local/share/qutebrowser</span><br><span class="line">runtime: /run/user/1000/qutebrowser</span><br><span class="line">system data: /usr/share/qutebrowser</span><br><span class="line"></span><br><span class="line">Autoconfig loaded: yes</span><br><span class="line">Config.py: no config.py was loaded</span><br><span class="line">Uptime: 0:47:58</span><br></pre></td></tr></table></figure>
<p>在 dwm 中使用 qutebrowser，体验效果不错。在 Gnome 中使用 qutebrowser 有空白的区域，感觉没最大化利用屏幕空间，个人感觉有点别扭，有点罪过，所以觉得体验效果没有 dwm 舒服。实际在 dwm 和 Gnome 中，不存在使用差别，只是在 dwm 中 qutebrowser 更简洁。</p>
<p>Debian系列安装</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install qutebrowser</span><br></pre></td></tr></table></figure>
<p>至于其他平台安装教程请参考官方 <a href="https://qutebrowser.org/doc/install.html">qutebrowser Install</a></p>
<hr>
<h1 id="qutebrowser-操作模式">qutebrowser 操作模式</h1>
<p>学过 vim 的同学都知道，vim 的操作有模式区分。一般常用 vim 操作模式：<em>普通模式（Normal Mode）， 插入模式（Insert Mode），可视模式（Visual Mode）</em>。qutebrowser 也有操作模式，大致和 vim 操作模式类似。qutebrowser 中的模式直接用英文替代，就不翻译成中文了，避免出错。</p>
<p>qutebrowser modes:</p>
<ul>
<li><p>Normal Mode：你大部分时间浏览网页都处在 Normal Mode，和 vim 的 Normal Mode 相同。</p></li>
<li><p>Insert Mode：现在你有个需要向网页中的搜索框输入。例如使用百度翻译或搜素引擎的搜索框。你需要先进入 Insert Mode 才能输入内容。Insert Mode 快捷键 <code>i</code>。退出模式到 Normal Mode 快捷键 <code>Esc</code>。对于有些网页搜索框，进入 Insert Mode 还是无法输入搜素内容，可以试试 <code>gi</code>，或者像平常使用浏览器一样，鼠标点击搜索框，出现闪烁光标，代表可以输入文字。</p></li>
</ul>
<figure>
<img data-src="/2022/02/20/Qutebrowser/InsertMode.gif" alt><figcaption>Insert mode Demo</figcaption>
</figure>
<ul>
<li>Caret Mode：会在当前网页产生一个光标，然后你会觉得就像该网页像文本编辑器的操作一样。其中一个使用就是选择网页文本并复制选择文本。稍后会有演示。Caret Mode 快捷键 <code>v</code>。退出模式到 Normal Mode 快捷键 <code>Esc</code>。</li>
</ul>
<figure>
<img data-src="/2022/02/20/Qutebrowser/CaretMode.gif" alt><figcaption>Caret mode Demo</figcaption>
</figure>
<ul>
<li>PassThrough Mode：qutebrowser 官方解释是 PassThrough Mode 和 Insert Mode 类似。那为什么需要该模式呢？个人理解是 PassThrough Mode 下基本没有快捷键绑定，一个快捷键可能在 Normal Mode 中被占用，但你又想使用该快捷键，你可以绑定快捷键到 PassThrough Mode。这样就实现同一快捷键不同功能的目的。PassThrough Mode 快捷键 <code>Ctrl+v</code>。这不是 windows 常用的复制粘贴键吗？在 Insert Mode 下使用是复制粘贴的意思，在 Normal Mode 下是进入 PassThrough Mode 的意思。退出模式到 Normal Mode 快捷键 <code>Shift+Esc</code>。</li>
</ul>
<hr>
<h1 id="qutebrowser-basic-use">qutebrowser basic use</h1>
<h2 id="qutebrowser-整体界面简单介绍">qutebrowser 整体界面简单介绍</h2>
<figure>
<img data-src="/2022/02/20/Qutebrowser/Overview.png" alt><figcaption>Overview</figcaption>
</figure>
<p>qutebrowser 界面具体解释：</p>
<ol type="1">
<li><p>黑色背景为当前所打开的网页标签，以及打开网页的名字</p></li>
<li><p>和vim类似，为输入命令的区域，我们把它成为 qutebrowser 命令行。除了快捷键操作，大部分都在这里输入命令</p></li>
<li><p>当前打开网页的URL</p></li>
<li><p>qutebrowser 打开的标签总数目以及当前所处的标签位置</p></li>
</ol>
<p>注意：接下来对 qutebrowser 的命令操作的输入法都是<em>英文半角模式</em>。简单的说就是要把输入法调节到英文输入。</p>
<blockquote>
<p>qutebrowser 的操作主要分为两类：一类是使用快捷键，另一类是在命令行输入命令 <code>:command</code>。</p>
</blockquote>
<h2 id="打开帮助文档">打开帮助文档</h2>
<p>因为 qutebrowser 的操作逻辑和 vim 编辑器类似。因此在 qutebrowser 中打开本地帮助文档，直接使用输入 <code>:help</code>。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/HelpCommand.gif" alt><figcaption>Help document Demo</figcaption>
</figure>
<p>除了打开本地的帮助文档，当然可以使用 <a href="https://qutebrowser.org/doc/help/">qutebrowser 官方帮助文档</a>。</p>
<p>打开帮助文档后，点击 <strong>quick start guide</strong>链接，并阅读就可以快速上手 qutebrowser。</p>
<p>当然你可以通过在终端输入 <code>man qutebrowser</code> 了解一些 qutebrowser 的基本信息，文档有用且不长，但没有 <code>:help</code> 文档全面。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/ManQutebrowser.gif" alt><figcaption>man qutebrowser</figcaption>
</figure>
<h2 id="查看-qutebrowser-版本">查看 qutebrowser 版本</h2>
<p>命令：<code>:version</code></p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/VersionCommand.gif" alt><figcaption>Version info</figcaption>
</figure>
<h2 id="打开一个网页">打开一个网页</h2>
<p>按快捷键 <code>o</code> 然后输入网络需要打开网页的url即可。然后敲击回车键 <code>Enter</code>。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/OpenUrl.png" alt><figcaption>Open url in current tab</figcaption>
</figure>
<p>使用快捷键 <code>O</code> 然后输入URL，会在新标签 <code>tab</code> 打开一个网页。动画演示如下：</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/OpenUrl.gif" alt><figcaption>Open url in new tab Demo</figcaption>
</figure>
<p>使用快捷键 <code>go</code> 编辑当前网页url。</p>
<p><code>ga</code> 快速在新标签打开默认首页，就是你首次打开 qutebrowser 显示的浏览器界面。</p>
<p>例如我的首页设置如下 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> url.start_pages https://start.duckduckgo.com</span><br></pre></td></tr></table></figure> <img data-src="/2022/02/20/Qutebrowser/OpenStartPage.gif" alt="Open start page"></p>
<h2 id="快速点击当前网页链接">快速点击当前网页链接</h2>
<p>先按快捷建 <code>f</code>，然后网页中的每个链接旁都出现一个字母，输入你想访问链接的字母即可。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/hintLink.gif" alt><figcaption>Hint link</figcaption>
</figure>
<p>按键 <code>f</code> 是在当前网页打开点击的链接，而 <code>F</code> 是在新的标签打开链接。在回忆一下 <code>o</code> 和 <code>O</code>，似乎你可以发现一些规律。<em>小写的按键是在当前标签操作内容，大写字母的按键是在新标签操作内容</em>。</p>
<h2 id="命令撤销">命令撤销</h2>
<p>当输入一个命令，发现好像输出错误或者不想运行该命令，请按 <code>Esc</code> 键退出命令。这个 <code>Esc</code> 和 vim 的 <code>Esc</code> 类似。当你是 vim 玩家，你会很快上手 qutebrowser 。</p>
<h2 id="当前网页浏览">当前网页浏览</h2>
<p><code>jkhl</code> 分别对应vim的上下左右移动。</p>
<p><code>gg</code> 快速移动到第一行。</p>
<p><code>GG</code> 快速移动到最后一行。</p>
<h2 id="缩放网页">缩放网页</h2>
<p>有时网页的字体太小或太大，你可能有缩放网页的需求。当然可以用传统浏览器Firefox的方式，使用键盘和鼠标 <code>Ctrl+MouseWheel</code>。即按住 <code>Ctrl</code>键盘不放，然后滚动鼠标滑轮。另一种方式是使用快捷键 <code>+</code> 放大网页，<code>-</code> 缩小网页，<code>=</code> 恢复默认大小。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/ZoomPage.gif" alt><figcaption>Zoom page</figcaption>
</figure>
<h2 id="复制网页超链接">复制网页超链接</h2>
<p>可能你需要复制当前网页的超链接到剪贴板，请使用 <code>yy</code> 即可。如果需要复制当前网页中的其中一个超链接，可以使用 <code>;y</code>，然后选择你想复制的超链接。如果你再使用 <code>pp</code> ，可以在当前标签快速打开当前剪贴板的链接。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/YankLink.gif" alt><figcaption>Yank link</figcaption>
</figure>
<h2 id="标签切换">标签切换</h2>
<p><code>shift+j</code> <code>shift+k</code> 分别是向前向后切换标签</p>
<p>和 <code>shift+j</code> 的功能相同的快捷键是 <code>shift+t</code>。两者在使用上我目前还没发现差别。不过 <code>shift+t</code> 可以理解成 <code>shift tab</code>, 翻译成中文就是<em>切换标签</em>，似乎更容易记住这个快捷键。</p>
<h2 id="前进或后退">前进或后退</h2>
<p><code>shift+h</code> 当前标签后退一步网页</p>
<p><code>shift+k</code> 当前标签前进一步网页</p>
<h2 id="删除当前标签">删除当前标签</h2>
<p><code>d</code> (delete)删除(关闭)当前标签</p>
<h2 id="撤销刚删除标签">撤销刚删除标签</h2>
<p><code>u</code> (undo) 撤销刚删除标签，可以连续使用，多恢复几个标签。</p>
<h2 id="网页搜索">网页搜索</h2>
<p><code>/</code> 和 vim 操作相同，用于在当前页面搜索内容。</p>
<p>qutebrowser 命令行输入 <code>/keyword</code>。网页就会高亮和你输入匹配的 <code>keyword</code>，然后按 <code>n</code>，跳转到下一个高亮结果。如果你会 vim 你就会联想到按 <code>shift+n</code> 是跳转下一个高亮结果方向和 <code>n</code> 相反。 进一步思考，vim 不是有 <code>？keyword</code> 搜索命令吗？你可以在自己 qutebrowser 上试试，看看会出现什么效果。</p>
<h2 id="查看历史记录">查看历史记录</h2>
<p><code>:history</code> 或者 <code>Sh</code>(<strong>S</strong>how <strong>h</strong>istory)</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/ShowHistory.gif" alt><figcaption>Show History</figcaption>
</figure>
<h2 id="退出-qutebrowser">退出 qutebrowser</h2>
<p><code>:wq</code> <code>:q</code> 都是关闭 qutebrowser，但是他们又有区别。</p>
<p><code>:wq</code> 和 <code>:q</code> 区别：</p>
<ul>
<li><p><code>:q</code> 只是关闭当前 qutebrowser, 不保存当前浏览网页界面。</p></li>
<li><p><code>:wq</code> 保存当前网页浏览界面并退出。下次 qutebrowser 自动打开上次浏览界面。</p></li>
</ul>
<hr>
<h1 id="config-qutebrowser">config qutebrowser</h1>
<p>用户配置文件目录<code>~/.config/qutebrowser</code>下面的文件有:</p>
<p>没有的文件或目录可以自己创建。</p>
<h2 id="autoconfig.yml">autoconfig.yml</h2>
<p><code>autoconfig.yml</code> 文件是在 qutebrowser 命令行用 <code>:set xxxx</code> 设置然后自动生成到 <code>autoconfig.yml</code>。</p>
<p>个人配置文件如下：</p>
<figure class="highlight python"><figcaption><span>autoconfig.yml</span></figcaption><table><tr><td class="code"><pre><span class="line"><span class="comment"># If a config.py file exists, this file is ignored unless it&#x27;s explicitly loaded</span></span><br><span class="line"><span class="comment"># via config.load_autoconfig(). For more information, see:</span></span><br><span class="line"><span class="comment"># https://github.com/qutebrowser/qutebrowser/blob/master/doc/help/configuring.asciidoc#loading-autoconfigyml</span></span><br><span class="line"><span class="comment"># DO NOT edit this file by hand, qutebrowser will overwrite it.</span></span><br><span class="line"><span class="comment"># Instead, create a config.py - see :help for details.</span></span><br><span class="line"></span><br><span class="line">config_version: <span class="number">2</span></span><br><span class="line">settings:</span><br><span class="line">  aliases:</span><br><span class="line">    <span class="keyword">global</span>:</span><br><span class="line">      q: close</span><br><span class="line">      qa: quit</span><br><span class="line">      w: session-save</span><br><span class="line">      wq: quit --save</span><br><span class="line">      wqa: quit --save</span><br><span class="line">      zotero: spawn --userscript zotero</span><br><span class="line">  bindings.commands:</span><br><span class="line">    <span class="keyword">global</span>:</span><br><span class="line">      normal:</span><br><span class="line">        &lt;Alt+<span class="number">1</span>&gt;: null</span><br><span class="line">        g0: null</span><br><span class="line">        g1: tab-focus <span class="number">1</span></span><br><span class="line">        g2: tab-focus <span class="number">2</span></span><br><span class="line">        g3: tab-focus <span class="number">3</span></span><br><span class="line">        g4: tab-focus <span class="number">4</span></span><br><span class="line">        g5: tab-focus <span class="number">5</span></span><br><span class="line">        g6: tab-focus <span class="number">6</span></span><br><span class="line">        g7: tab-focus <span class="number">7</span></span><br><span class="line">        g8: tab-focus <span class="number">8</span></span><br><span class="line">        g9: tab-focus <span class="number">9</span></span><br><span class="line">        xb: config-cycle statusbar.show always never</span><br><span class="line">        xt: config-cycle tabs.show always never</span><br><span class="line">        xx: config-cycle statusbar.show always never;;config-cycle tabs.show always</span><br><span class="line">          never</span><br><span class="line">  colors.tabs.bar.bg:</span><br><span class="line">    <span class="keyword">global</span>: <span class="string">&#x27;#555555&#x27;</span></span><br><span class="line">  colors.tabs.even.bg:</span><br><span class="line">    <span class="keyword">global</span>: darkgrey</span><br><span class="line">  colors.tabs.selected.even.bg:</span><br><span class="line">    <span class="keyword">global</span>: black</span><br><span class="line">  colors.tabs.selected.even.fg:</span><br><span class="line">    <span class="keyword">global</span>: white</span><br><span class="line">  content.blocking.adblock.lists:</span><br><span class="line">    <span class="keyword">global</span>:</span><br><span class="line">    - https://easylist.to/easylist/easylist.txt</span><br><span class="line">    - https://easylist.to/easylist/easyprivacy.txt</span><br><span class="line">    - https://easylist-downloads.adblockplus.org/easylistdutch.txt</span><br><span class="line">    - https://easylist-downloads.adblockplus.org/abp-filters-anti-cv.txt</span><br><span class="line">    - https://secure.fanboy.co.nz/fanboy-cookiemonster.txt</span><br><span class="line">  content.blocking.method:</span><br><span class="line">    <span class="keyword">global</span>: both</span><br><span class="line">  content.headers.user_agent:</span><br><span class="line">    https://accounts.google.com/*: Mozilla/<span class="number">5.0</span> (&#123;os_info&#125;; rv:<span class="number">90.0</span>) Gecko/<span class="number">20100101</span></span><br><span class="line">      Firefox/<span class="number">90.0</span></span><br><span class="line">  content.pdfjs:</span><br><span class="line">    <span class="keyword">global</span>: true</span><br><span class="line">  content.webgl:</span><br><span class="line">    <span class="keyword">global</span>: true</span><br><span class="line">  downloads.location.directory:</span><br><span class="line">    <span class="keyword">global</span>: null</span><br><span class="line">  statusbar.show:</span><br><span class="line">    <span class="keyword">global</span>: always</span><br><span class="line">  tabs.show:</span><br><span class="line">    <span class="keyword">global</span>: always</span><br><span class="line">  url.searchengines:</span><br><span class="line">    <span class="keyword">global</span>:</span><br><span class="line">      DEFAULT: https://cn.bing.com/search?q=&#123;&#125;</span><br><span class="line">      aw: https://wiki.archlinux.org/?search=&#123;&#125;</span><br><span class="line">      b: https://bing.com/search?q=&#123;&#125;</span><br><span class="line">      d: https://duckduckgo.com/?q=&#123;&#125;</span><br><span class="line">      du: https://www.baidu.com/s?ie=utf-<span class="number">8</span>&amp;f=<span class="number">8</span>&amp;rsv_bp=<span class="number">1</span>&amp;rsv_idx=<span class="number">1</span>&amp;tn=baidu&amp;wd=&#123;&#125;</span><br><span class="line">      g: https://www.google.com/search?hl=en&amp;q=&#123;&#125;</span><br><span class="line">      re: https://www.reddit.com/r/&#123;&#125;</span><br><span class="line">      w: http://en.wikipedia.org/w/index.php?search=&#123;&#125;</span><br><span class="line">      yt: https://www.youtube.com/results?search_query=&#123;&#125;</span><br><span class="line">  url.start_pages:</span><br><span class="line">    <span class="keyword">global</span>: https://start.duckduckgo.com</span><br></pre></td></tr></table></figure>
<p><code>Alt+num</code> 在 qutebrowser 的含义是快速跳转到 num 标签，但是与我使用 dwm 的快捷建冲突，故自己定义了快速跳转标签的快捷键为 <code>g+num</code>，上面配置文件有。</p>
<p>尽管 <code>autoconfig.yml</code> 是自动生成的，但是你也可以直接复制上面配置内容到你的 <code>autoconfig.yml</code> 文件，这样就不需要自己单独设置了。</p>
<p>个人配置文件可以使用 <code>config.py</code>。如果配置文件夹存在 <code>config.py</code>， 那么 <code>autoconfig.yml</code> 会被覆盖。个人习惯使用 <code>autoconfig.yml</code>，感觉更方便。但是官方建议是使用 <code>config.py</code> 自定义自己的配置文件，因为 <code>autoconfig.yml</code> 会被 qutebrowser 中运行 <code>:set xxx</code> 命令覆盖。</p>
<p>如果你想使用 <code>config.py</code>，可以运行 <code>:config-write-py</code> 命令，根据 <code>autoconfig.yml</code> 生成对应的 <code>config.py</code>。</p>
<h2 id="网络代理配置">网络代理配置</h2>
<p>qutebrowser 设置网络代理命令 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> content.proxy socks://127.0.0.1:1080</span><br></pre></td></tr></table></figure></p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/SetProxy.gif" alt><figcaption>Network proxy setting</figcaption>
</figure>
<p>运行网络代理配置命令后，在 <code>autoconfig.yml</code> 文件中会发现自动添加如下内容。</p>
<figure class="highlight python"><figcaption><span>autoconfig.yml</span></figcaption><table><tr><td class="code"><pre><span class="line">content.proxy:</span><br><span class="line">  <span class="keyword">global</span>: socks://<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>:<span class="number">1080</span></span><br></pre></td></tr></table></figure>
<h2 id="搜索引擎">搜索引擎</h2>
<p>根据前面的 <code>autoconfig.yml</code> 文件配置，可快速使用指定引擎搜索。使用命令 <code>:open b keyword</code>，其中<code>b</code>是我设置的Bing搜索引擎的缩写单词。详细设置参考上述 <code>autoconfig.yml</code> 的 <strong>url.searchengines</strong> 部分内容。<code>DEFAULT</code> 是在不加指定搜索引擎时，默认使用的搜索引擎。例如：<code>:open keyword</code> 就直接使用 <code>DEFAULT</code> 设置的默认搜索引擎搜索内容。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/QuickSearch.gif" alt><figcaption>Quick search demo</figcaption>
</figure>
<p>在来一个应用场景，演示一下如何快速搜索内容。由于经常使用 IEEE 搜索论文，一般操作流程是先打开 IEEE 官网，然后输入关键字，在点击搜索图标，等待网页显示搜索结果。那么用快速搜索引擎的方案，你会发现好像要快一点点。</p>
<p>首先在 qutebrowser 搜索引擎设置添加如下内容：</p>
<figure class="highlight python"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> url.searchengines <span class="string">&#x27;&#123;&quot;ee&quot;: &quot;https://ieeexplore.ieee.org/search/searchresult.jsp?newsearch=true&amp;queryText=&#123;&#125;&quot;&#125;&#x27;</span></span><br></pre></td></tr></table></figure>
<figure>
<img data-src="/2022/02/20/Qutebrowser/IEEEQuickSearch.gif" alt><figcaption>quick search ieee document</figcaption>
</figure>
<p>其他常用网站搜索也可以自己添加，提高你浏览网页速度。</p>
<h2 id="pdf.js">pdf.js</h2>
<p>pdf.js 是 Mozilla 开发的一款网络标准的 pdf 阅读器。Firefox 内置的 pdf 阅读器就是使用的 pdf.js。qutebrowser 也是使用 pdf.js 来渲染 pdf 文件。</p>
<p>qutebrowser 使用 pdf.js 需要进行如下设置：</p>
<ol type="1">
<li>安装 pdf.js</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo apt install pdfjs</span><br></pre></td></tr></table></figure>
<ol start="2" type="1">
<li>qutebrowser 打开 pdf.js</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> content.pdfjs <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<p>qutebrowser 阅读 pdf 没有显示操作按钮问题，请参考 <a href="https://github.com/qutebrowser/qutebrowser/issues/4289">pdf.js not show button</a>。</p>
<p>解决方法：去 <a href="https://github.com/mozilla/pdf.js/tree/master/web/images">Github pdf.js</a> 找到对应的操作图标复制到 <code>/usr/share/pdf.js/web/images</code> 中。</p>
<p>qutebrowser 阅读 pdf 中文乱码问题</p>
<p>解决方案：把 <a href="https://github.com/mozilla/pdf.js/tree/master/external/bcmaps">bcmaps</a> 中内容复制到 <code>/usr/share/pdf.js/web/cmaps</code> 中。</p>
<h2 id="quickmarks">quickmarks</h2>
<p>quickmarks 和 bookmarks 没啥区别，但是在 qutebrowser 中建议使用 quickmarks，毕竟 quickmarks 中含有 <em>quick</em>（代表快速的含义）。你可以把 quickmarks 理解成 Firefox 等浏览器中的书签。</p>
<p>添加当前网页地址到 quickmarks 按键：<code>m</code>。</p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/AddCurrentPageToQuickmarks.gif" alt><figcaption>Add current page to quickmarks Demo</figcaption>
</figure>
<p>对于导入其他浏览器书签到 qutebrowser 请参考 arch wiki qutebrowser 中的 <a href="https://wiki.archlinux.org/title/Qutebrowser#Importing_quickmarks/bookmarks">Importing quickmarks bookmarks</a> 小节内容。</p>
<p>下面以 Firefox 为例，首先从 Firefox 导出书签 bookmarks.html，然后运行如下命令：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">python /usr/share/qutebrowser/scripts/importer.py bookmarks.html &gt;&gt; ~/.config/qutebrowser/quickmarks</span><br></pre></td></tr></table></figure>
<h2 id="greasemonkey">greasemonkey</h2>
<p>直接在文件夹 greasemonkey 中添加 <code>xxx.js</code> 脚本文件即可。脚本寻找网站：<a href="https://greasyfork.org/zh-CN/scripts">Greasemonkey</a>。</p>
<p>移除Youtube广告脚本，直接添加到 greasemonkey 配置文件夹中。</p>
<figure class="highlight javascript"><table><tr><td class="code"><pre><span class="line"><span class="comment">// ==UserScript==</span></span><br><span class="line"><span class="comment">// @name         Auto Skip YouTube Ads</span></span><br><span class="line"><span class="comment">// @version      1.0.0</span></span><br><span class="line"><span class="comment">// @description  Speed up and skip YouTube ads automatically</span></span><br><span class="line"><span class="comment">// @author       jso8910</span></span><br><span class="line"><span class="comment">// @match        *://*.youtube.com/*</span></span><br><span class="line"><span class="comment">// @exclude      *://*.youtube.com/subscribe_embed?*</span></span><br><span class="line"><span class="comment">// ==/UserScript==</span></span><br><span class="line"><span class="built_in">setInterval</span>(<span class="function">() =&gt;</span> &#123;</span><br><span class="line">    <span class="keyword">const</span> btn = <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;.videoAdUiSkipButton,.ytp-ad-skip-button&#x27;</span>)</span><br><span class="line">    <span class="keyword">if</span> (btn) &#123;</span><br><span class="line">        btn.<span class="title function_">click</span>()</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">const</span> ad = [...<span class="variable language_">document</span>.<span class="title function_">querySelectorAll</span>(<span class="string">&#x27;.ad-showing&#x27;</span>)][<span class="number">0</span>];</span><br><span class="line">    <span class="keyword">if</span> (ad) &#123;</span><br><span class="line">        <span class="variable language_">document</span>.<span class="title function_">querySelector</span>(<span class="string">&#x27;video&#x27;</span>).<span class="property">playbackRate</span> = <span class="number">10</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;, <span class="number">50</span>)</span><br></pre></td></tr></table></figure>
<h2 id="广告-block">广告 block</h2>
<p>先安装 Python adblock library，因为里面含有 <a href="https://github.com/brave/adblock-rust">Brave's Rust adblock library</a> 可以改善广告 block.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">pip install adblock</span><br></pre></td></tr></table></figure>
<p>qutebrowser 设置 host block list</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> content.blocking.adblock.lists <span class="string">&#x27;[&quot;https://easylist.to/easylist/easylist.txt&quot;, &quot;https://easylist.to/easylist/easyprivacy.txt&quot;, &quot;https://easylist-downloads.adblockplus.org/easylistdutch.txt&quot;, &quot;https://easylist-downloads.adblockplus.org/abp-filters-anti-cv.txt&quot;, &quot;https://halflife.coding.net/p/list/d/list/git/raw/master/ad-pc.txt&quot;]&#x27;</span></span><br></pre></td></tr></table></figure>
<p>推荐一些的广告 filter list。下面的 halflife 是支持国内网站 adblock 的。</p>
<figure class="highlight json"><table><tr><td class="code"><pre><span class="line">https<span class="punctuation">:</span><span class="comment">//easylist.to/easylist/easylist.txt</span></span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//easylist.to/easylist/easyprivacy.txt</span></span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//easylist.to/easylist/fanboy-social.txt</span></span><br><span class="line">https<span class="punctuation">:</span><span class="comment">//halflife.coding.net/p/list/d/list/git/raw/master/ad-pc.txt</span></span><br></pre></td></tr></table></figure>
<p>Easylist list 获得 可以参考 <a href="https://easylist.to/">easylist web site</a>。</p>
<p>阻止国内网站广告也可以参考这篇 blog <a href="https://wsgzao.github.io/post/adguard/">Adguad 过滤规则分享</a>。</p>
<p>前面讲述的都是使用大佬们定义好的广告过滤规则，能解决大部分问题，但是不能解决所有问题。有可能你有自定义广告过滤规则的需求，可以参看 <a href="https://help.eyeo.com/en/adblockplus/how-to-write-filters">How to write filters</a>。等我那天闲的无聊，再学学如何写广告过滤规则。</p>
<p>注意：qutebrowser adblock 功能没有 <a href="https://seanchristspc.github.io/2021/04/20/uBlock-Orgin-Tutor/">uBlock Origin</a>功能强大。 qutebrowser adblock 实现核心仅仅是阻止网络请求，不会更细致的 block 网页界面的某一个元素。 至于为什么不实现这个功能，请看 <a href="https://github.com/qutebrowser/qutebrowser/issues/29">more sophisticated adblocking</a> 中 The-Compiler 的解释。</p>
<p>设置 qutebrowser 使用 Brave's adblock 和自己设置的 host block list.</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> content.blocking.method both</span><br></pre></td></tr></table></figure>
<p>更新 adblock <code>:adblock-update</code></p>
<figure>
<img data-src="/2022/02/20/Qutebrowser/Adblock.gif" alt><figcaption>Adbock Demo</figcaption>
</figure>
<h2 id="zotero">zotero</h2>
<p>主要自己长期使用 zotero 管理自己的文献，但是 qutebrowser 没有 zotero 插件，但是又想使用 qutebrowser 浏览器和 zotero 交互，在 github 上找到解决方案使用 qutebrowser 的 <strong>userscripts</strong> 功能，可以解决 zotero 交互问题。具体参考 <a href="https://github.com/parchd-1/qutebrowser-zotero">zotero userscript</a> 把上面脚本添加到 <code>~/.config/qutebrowser/userscripts</code> 中，并命名为zotero，同时添加执行权限。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="built_in">chmod</span> +x zotero</span><br></pre></td></tr></table></figure>
<p>就在IEEE上下载一篇论文到 zotero 演示吧！ <img data-src="/2022/02/20/Qutebrowser/Zotero.gif" alt="Zotero Demo"></p>
<hr>
<h1 id="do-not-copy-to-clipboard">do not copy to clipboard</h1>
<p>qutebrowser 对于有些网站的 copy 按钮无法使用，这个功能严重影响我工作。今天2022-03-29觉得该解决这个问题，所以去搜索引擎搜索了一下这个问题，直接就找到答案了 参考 <a href="https://github.com/qutebrowser/qutebrowser/issues/6719">qutebrowser github issue 6719</a>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">:<span class="built_in">set</span> content.javascript.can_access_clipboard <span class="literal">true</span></span><br></pre></td></tr></table></figure>
<hr>
<h1 id="快捷键图表">快捷键图表</h1>
<figure>
<img data-src="/2022/02/20/Qutebrowser/cheatsheet.png" alt><figcaption>shotcuts</figcaption>
</figure>
<p>没事多看看这个快捷键图表，提高你使用 qutebrowser 效率。</p>
<hr>
<h1 id="firefox-addon-tridactyl-实现-vim-keyboard-driven">Firefox Addon: Tridactyl 实现 vim keyboard-driven</h1>
<p>浏览器插件 Vimperator　和 Pentadactyl　已经退出历史舞台。但是对于对于有强力需求使用　Firefox 浏览器的用户，可以使用 Firefox addon <strong>Tridactyl</strong> 来实现 vim 键盘驱动。在 Firefox <a href="https://addons.mozilla.org/en-US/">ADD-ONS</a> 搜索 <strong>Tridactyl</strong> ，并安装插件即可。就可直接键盘驱动 Firefox 啦！使用方式和 qutebrowser 差不多。推荐运行命令 <code>:tutor</code> 来查看使用教程。虽然没有 qutebrowser 支持 vim 快捷键全面，但是还是可以尝试一下的，至少比鼠标快多了。值得一提的是，使用 <code>o</code> 命令快捷打开历史记录和浏览器书签，不是使用方向键选择需要打开的历史记录或浏览器书签，而是使用 <code>tab</code> 或 <code>shift+tab</code> 移动选择需要打开的历史记录或书签。</p>
<h1 id="备注">备注</h1>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please contact me by email 😏! Have fun!</p>
<hr>
<h1 id="参考">参考</h1>
<p><a href="https://www.qutebrowser.org/doc/quickstart.html">qutebrowser quick start guide</a></p>
<p><a href="https://www.qutebrowser.org/doc/userscripts.html">qutebrowser userscripts</a></p>
<p><a href="https://www.qutebrowser.org/doc/help/">qutebrowser help</a></p>
<p><a href="https://www.qutebrowser.org/doc/faq.html">qutebrowser faq</a></p>
<p><a href="https://wiki.archlinux.org/title/Qutebrowser">arch linux qutebrowser wiki</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
        <tag>Qutebrowser</tag>
        <tag>Browser</tag>
      </tags>
  </entry>
  <entry>
    <title>搭建hexo和github遇到问题</title>
    <url>/2018/02/06/build_hexo_problem/</url>
    <content><![CDATA[<h1 id="搭建hexo和github遇到问题">搭建hexo和github遇到问题</h1>
<p>学习一样新事物，总是要经历磕磕碰碰，才能有所成长！脚踏实地，一步一个脚印，走好每一步，不要给自己留遗憾！</p>
<hr>
<h2 id="安装hexo问题">安装hexo问题</h2>
<p>安装hexo我是在网上找教程安装的： 1. 安装node.js(去官网下载windows版的安装包) <a href="https://nodejs.org">node.js官网</a> 2. 安装git <a href="https://git-scm.com/downloads/">git下载地址</a> 3. 申请github账号 <a href="https://github.com/">github</a> 这里自己注册</p>
<p>设置user.name user.email:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">git config --global user.name <span class="string">&quot;你的GitHub用户名&quot;</span></span><br><span class="line">git config --global user.email <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<ol start="4" type="1">
<li>生成ssh密匙</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">ssh-keygen -t rsa -C <span class="string">&quot;你的GitHub注册邮箱&quot;</span></span><br></pre></td></tr></table></figure>
<p>一路回车就OK了！此时，在用户文件夹下就会有一个新的文件夹 <code>.ssh</code>，里面有刚刚创建的ssh密钥文件 <code>id_rsa</code> 和 <code>id_rsa.pub</code>。上传公匙添加到github上。<strong><em>记住是id_rsa.pub内容复制到github上</em></strong>。</p>
<ol start="5" type="1">
<li>安装 hexo</li>
</ol>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-cli g</span><br></pre></td></tr></table></figure>
<p>创建一个文件夹 <code>hexo</code>。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">mkdir hexo </span><br></pre></td></tr></table></figure>
<p>初始化 <code>hexo</code> 文件夹。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo init hexo</span><br></pre></td></tr></table></figure>
<p>安装hexo插件，都安装了吧!</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">npm install hexo-server --save</span><br><span class="line">npm install hexo-admin --save</span><br><span class="line">npm install hexo-generator-archive --save</span><br><span class="line">npm install hexo-generator-feed --save</span><br><span class="line">npm install hexo-generator-search --save</span><br><span class="line">npm install hexo-generator-tag --save</span><br><span class="line">npm install hexo-deployer-git --save</span><br><span class="line">npm install hexo-generator-sitemap --save</span><br><span class="line">npm install hexo-generator-category --save</span><br></pre></td></tr></table></figure>
<ol start="6" type="1">
<li>本地使用hexo</li>
</ol>
<p>生成静态页面 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo generate</span><br></pre></td></tr></table></figure></p>
<p>开启本地服务器(可以使用全名 hexo server) <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">hexo s </span><br></pre></td></tr></table></figure></p>
<p>在浏览器输入 <strong><a href="http://localhost:4000/">http://localhost:4000/</a></strong> 就可以在本地访问 blog。</p>
<ol start="7" type="1">
<li>hexo 部署到 github 上</li>
</ol>
<p>先在github上创建一个仓库名字：<em>github用户名.github.io</em>。这个创库的命名规则不能弄错了！！！！！！</p>
<p>修改博客配置文件(<code>hexo/_config.yml</code>)，在文件里找到下面内容并修改。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Deployment 注释</span><br><span class="line">## Docs: https://hexo.io/docs/deployment.html</span><br><span class="line">deploy:</span><br><span class="line">  # 类型</span><br><span class="line">  type: git</span><br><span class="line">  # 仓库</span><br><span class="line">  repo: git@github.com:用户名/用户名.github.io.git</span><br><span class="line">  # 分支</span><br><span class="line">  branch: master</span><br></pre></td></tr></table></figure>
<p>记得一定要修改成自己的用户名！！！！ 这种方式使用ssh链接（前提是你添加了公钥到 github）。</p>
<p>还有一种方式是把repo 修改为下面 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">repo: https://github.com/用户名/用户名.github.io</span><br></pre></td></tr></table></figure> 由于我用了两个 github 账号，建立 hexo 博客是换了一个新的账号，使用这种方式总是报 403 错误，我是改用 ssh 连接 github。</p>
<p>输入下面的命令将 hexo 博客部署到 github 中： <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># 清空静态页面</span></span><br><span class="line">hexo clean</span><br><span class="line"><span class="comment"># 生成静态页面</span></span><br><span class="line">hexo generate</span><br><span class="line"><span class="comment"># 部署 </span></span><br><span class="line">hexo deploy</span><br></pre></td></tr></table></figure> 这里有一点建议：发布时最好连续执行这三个命令，以免部署到 github 的 hexo 为以前的，就相当于刷新一下缓存。</p>
<hr>
<h2 id="hexo替换主题">hexo替换主题</h2>
<p>我使用的next主题</p>
<ol type="1">
<li>打开 git bash 并切换到你的博客目录下 比如我的博客目录是 <code>/hexo</code> <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment">#自己切换自己的博客目录</span></span><br><span class="line">$ <span class="built_in">cd</span> hexo</span><br><span class="line"><span class="comment"># 执行下面命令</span></span><br><span class="line">$ git <span class="built_in">clone</span> https://github.com/iissnan/hexo-theme-next themes/next</span><br></pre></td></tr></table></figure></li>
<li>修改博客配置文件 <code>/hexo/_config.yml</code> 如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Extensions</span><br><span class="line">## Plugins: http://hexo.io/plugins/</span><br><span class="line">## Themes: http://hexo.io/themes/</span><br><span class="line">#以前的选项为     theme: landscape</span><br><span class="line">theme: next</span><br></pre></td></tr></table></figure></li>
<li>修改主题配置文件 <code>/hexo/themes/next/_config.yml</code></li>
</ol>
<hr>
<h2 id="menu-修改">menu 修改</h2>
<p>找到下面内容</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># ---------------------------------------------------------------</span><br><span class="line"># Menu Settings</span><br><span class="line"># ---------------------------------------------------------------</span><br><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  #categories: /categories/ || th</span><br><span class="line">  #archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>
<p>去掉 # 就可以多一个菜单栏 比如去掉</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">menu:</span><br><span class="line">  home: / || home</span><br><span class="line">  #about: /about/ || user</span><br><span class="line">  tags: /tags/ || tags</span><br><span class="line">  categories: /categories/ || th</span><br><span class="line">  #archives: /archives/ || archive</span><br><span class="line">  #schedule: /schedule/ || calendar</span><br><span class="line">  #sitemap: /sitemap.xml || sitemap</span><br><span class="line">  #commonweal: /404/ || heartbeat</span><br></pre></td></tr></table></figure>
<p>虽然在首页能看见这个菜单，但是是不能使用。点击菜单 categories 会返回 <code>can't get /categories/</code> 错误信息。</p>
<p>首先要安装categories对应插件</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-category --save</span><br></pre></td></tr></table></figure>
<p>再在gitbash输入（切换到 <code>hexo</code> 目录下）</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new page categories</span><br></pre></td></tr></table></figure>
<p>在 <code>/hexo/source</code> 目录下发现多的一个categories文件夹 进入并编辑 <code>index.md</code>。</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: categories</span><br><span class="line">date: 2018-1-22 12:39:04</span><br><span class="line">type: &quot;categories&quot;</span><br><span class="line">comments: false</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>在 <code>/hexo/source/_post</code> 目录建立 <code>test.md</code> 内容如下：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">---</span><br><span class="line">title: test</span><br><span class="line">categories:</span><br><span class="line">  - Testing</span><br><span class="line">---</span><br></pre></td></tr></table></figure>
<p>注意空格！！！！注意空格！！！！注意空格！！！！注意空格！！！！</p>
<hr>
<h2 id="赞赏功能问题">赞赏功能问题</h2>
<p>在主题配置文件找到如下内容，并修改如下：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Reward</span></span><br><span class="line">reward_comment: Donate</span><br><span class="line">wechatpay: /images/wechatpay.png</span><br><span class="line">alipay: /images/alipay.jpg</span><br><span class="line"><span class="comment">#bitcoin: /images/bitcoin.png</span></span><br></pre></td></tr></table></figure>
<p>自己图片位置在 <code>Hexo/themes/next/source</code> 目录下的 <code>image</code>文件内。修改成这样过后但是还是不能显示赞赏功能。至少我是这样，经过百度终于解决了。</p>
<hr>
<p>在主题配置文件查找</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">false</span></span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>修改为如下:</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line"><span class="comment"># Automatically Excerpt. Not recommend.</span></span><br><span class="line"><span class="comment"># Please use &lt;!-- more --&gt; in the post to control excerpt accurately.</span></span><br><span class="line">auto_excerpt:</span><br><span class="line">  <span class="built_in">enable</span>: <span class="literal">true</span></span><br><span class="line">  length: 150</span><br></pre></td></tr></table></figure>
<p>再执行 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo clean &amp;&amp; hexo generate &amp;&amp;  hexo s </span><br></pre></td></tr></table></figure> 这下应该可以！</p>
<hr>
<h2 id="本地搜索配置">本地搜索配置</h2>
<ol type="1">
<li>hexo配置文件 <code>/hexo/_config.yml</code> 添加 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">#search</span><br><span class="line">search:</span><br><span class="line">  path: search.xml</span><br><span class="line">  field: post</span><br><span class="line">  format: html</span><br><span class="line">  limit: 10000</span><br></pre></td></tr></table></figure></li>
<li>安装插件 <figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ npm install hexo-generator-search --save</span><br><span class="line">$ npm install hexo-generator-searchdb --save</span><br></pre></td></tr></table></figure></li>
<li>修改主题配置文件 <code>/hexo/themes/next/_config.yml</code> <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: false</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure> 修改为 <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line"># Local search</span><br><span class="line"># Dependencies: https://github.com/flashlab/hexo-generator-search</span><br><span class="line">local_search:</span><br><span class="line">  enable: true</span><br><span class="line">  # if auto, trigger search by changing input</span><br><span class="line">  # if manual, trigger search by pressing enter key or search button</span><br><span class="line">  trigger: auto</span><br><span class="line">  # show top n results per article, show all results by setting to -1</span><br><span class="line">  top_n_per_article: 1</span><br></pre></td></tr></table></figure></li>
</ol>
<hr>
<h2 id="备注">备注</h2>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please email to me!😜</p>
<hr>
<h2 id="参考文档">参考文档</h2>
<p><a href="http://theme-next.iissnan.com/">next参考文档</a> <a href="https://hexo.io/zh-cn/docs/">hexo参考文档</a></p>
<p>没事就多看看官方文档，应该能解决问题的！加油！</p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>Hello! Hexo</title>
    <url>/2018/02/06/hello-world/</url>
    <content><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p>
<h2 id="quick-start">Quick Start</h2>
<h3 id="create-a-new-post">Create a new post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new <span class="string">&quot;My New Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p>
<h3 id="run-server">Run server</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p>
<h3 id="generate-static-files">Generate static files</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo generate</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p>
<h3 id="deploy-to-remote-sites">Deploy to remote sites</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo deploy</span><br></pre></td></tr></table></figure>
<p>More info: <a href="https://hexo.io/docs/deployment.html">Deployment</a></p>
<h2 id="hexo-draft-process">Hexo draft process</h2>
<h3 id="create-a-draft-post">Create a draft post</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo new draft <span class="string">&quot;My Draft Post&quot;</span></span><br></pre></td></tr></table></figure>
<h3 id="preview-a-draft">Preview a draft</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo server --draft</span><br></pre></td></tr></table></figure>
<h3 id="publish-a-draft">Publish a draft</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo publish <span class="string">&quot;My Draft Post&quot;</span></span><br></pre></td></tr></table></figure>
<p>The principle of publishing draft: Just move the document from <code>source/_draft</code> to <code>source/_posts</code>.</p>
<h3 id="display-drafts">Display drafts</h3>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">$ hexo --draft</span><br></pre></td></tr></table></figure>
<p>Displays draft posts (stored in the <code>source/_drafts</code> folder).</p>
<h2 id="reference">Reference</h2>
<p><a href="https://hexo.io/docs/commands">Hexo command</a></p>
]]></content>
      <categories>
        <category>Hexo</category>
      </categories>
      <tags>
        <tag>Hexo</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab mex tutorial</title>
    <url>/2021/06/17/matlab-mex-tutorial/</url>
    <content><![CDATA[<h1 id="为什么要使用-matlab-mex">为什么要使用 matlab mex</h1>
<p>我来聊聊怎么和 <strong>matlab mex</strong> 相遇的吧！哈哈哈！也可以说是我有求于 <strong>matlab mex</strong>,需要它的帮助！</p>
<p><em>Matlab Mex brother! help me! help me!</em></p>
<p>自己在用C语言写低通滤波器，但是在实际的硬件调试电路中，发现滤波器输出的结果 <strong>inf</strong>(无穷大)， 到底是怎么一回事？我应该去哪里debug呢？</p>
<p>放下硬件调试电路，去周围溜达溜达，出去透透气，呼吸呼吸人间烟火。休息回来后，思考思考，滤波器为什 么不正常工作？ 难道我滤波器参数设置不对吗？还是C语言代码出了问题？还是其他原因？为了debug,还是把 这部分滤波器代码分离出来，看看是否正确？</p>
<p>在得到输入的信号数据和输出信号数据，需要对他们进行分析？由于有成千上万个数据点，不可能自己手输入到 matlab数组里面，那么有两种方案，解决数据分析问题，第一种还是用C语言分析数据和画图(C语言代码偏向底层， 不适合分析数据，python倒是可以，但是我的DSP中的程序是C语言，为了保持DSP中的代码和我测试代码一致性， python不适合当前操作。去github上找C语言的图形库函数或数据分析包，这是一个不错的解决方案，但我主观上 不像学习其他库函数，学习成本比较大),第二种使用matlab和C语言的函数接口，即今天的主要内容 matlab mex, 实现C语言数据和matlab数据之间的沟通。</p>
<hr>
<h1 id="操作环境">操作环境</h1>
<ul>
<li>OS：Linux</li>
<li>matlab version: matlab 2017b</li>
<li>gcc verison: 8.3.0 (5.3官方推荐)</li>
</ul>
<hr>
<h1 id="低通滤波器离散设计">低通滤波器离散设计</h1>
<p>使用matlab的filterDesiner工具来设计低通滤波器，该工具主要用于滤波器的设计，可以设计多种滤波器。</p>
<h2 id="fiterdesiner-quick-overview">fiterDesiner quick Overview</h2>
<p>在matlab command窗口输入 <strong>filterDesigner</strong> ,启动滤波器设计工具。如下图所示，为filterDesigner启动 后的界面。</p>
<p><strong>各个功能块做如下说明</strong>：</p>
<ol type="1">
<li><p>显示当前的设计滤波器的信息。其中 <strong>Order</strong>指的是滤波器的阶数</p></li>
<li><p>设计滤波器的的类型，是低通滤波器还是高通滤波器还是带通滤波器或是其他的</p></li>
<li><p>滤波器的设计方法，首先分为两大类(针对离散化滤波器设计)，IIR和FIR, 然后其中可以选择 butterworth或 chebyshev I或 chebyshev II滤波方法</p></li>
<li><p>指定是滤波器的阶数，可以设置确定的阶数，也可以使用自动优化后的最小阶数，一般来说，最小阶数的方法 优化的滤波器结果更好，但是阶数一般都大于2阶以上，对于需要二阶或以下的滤波器，需要具体指定阶数。</p></li>
<li><p>频率参数的设计，首先是<strong>Unit</strong>指定单位，然后 <strong>Fs</strong>为采样频率， 至于 <strong>Fpass</strong> <strong>Fstop</strong>可以查看中 的参数，可以明确知道， <strong>Fpass</strong>为截至频率, <strong>Fstop</strong>和 <strong>Astop</strong>配合， <strong>Astop</strong>指定具体的衰减分贝， 对应的频率为 <strong>Fstop</strong>.</p></li>
<li><p>幅度参数设置，和频率参数的设计结合使用， <strong>Apass</strong>就是我们所说的通带衰减分贝和截至频率 <strong>Fpass</strong>相 对应，一般来说<strong>Apass=3dB</strong>, <strong>Astop</strong>和 <strong>Fstop</strong>对应，一般是每20dB对应衰减幅度<span class="math inline">\(\frac{1}{10}\)</span>. 分贝 公式如下: <span class="math display">\[ dB = -20 \lg A \]</span> A为增益倍数。</p></li>
<li><p>参数设计的参考图</p></li>
</ol>
<p><img data-src="/2021/06/17/matlab-mex-tutorial/filterDesignerOverview.png" alt="filterDesigner overview"> 针对<strong>5,6</strong>的设置多看看 <strong>7</strong>就明白了。</p>
<h1 id="filterdesigner-example">filterDesigner Example</h1>
<p>设计二阶低通滤波器，采用IIR butterworth 滤波器，截至频率<span class="math inline">\(fc=600Hz\)</span>,采样频率<span class="math inline">\(fs=10000Hz\)</span>, 具体操作，请看如下动图。</p>
<figure>
<img data-src="/2021/06/17/matlab-mex-tutorial/filterDesignerUseExample.gif" alt><figcaption>filterDesigner Example</figcaption>
</figure>
<p>设计后的具体参数如下： <figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">--------------------------                </span><br><span class="line">Section #1                                </span><br><span class="line">--------------------------                </span><br><span class="line">Numerator:                                </span><br><span class="line">1                                         </span><br><span class="line">2                                         </span><br><span class="line">1                                         </span><br><span class="line">Denominator:                              </span><br><span class="line"> 1                                        </span><br><span class="line">-1.475480443592646073724949928873684257269</span><br><span class="line"> 0.586919508061190309256005548377288505435</span><br><span class="line">Gain:                                     </span><br><span class="line">0.027859766117136031127188289246987551451 </span><br><span class="line">--------------------------                </span><br><span class="line">Output Gain:                              </span><br><span class="line">1        </span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<p>该参数是z变换下的常数，参数对应的公式如下： <span class="math display">\[H(z)=0.027856\frac{1+2z^{-1}+z^{-2}}{1-1.17548z^{-1}+0.58692z^{-2}}\]</span> 转换成离散表达式： <span class="math display">\[Y(n)=0.027856[X(n)+2X(n-1)+X(n-2)]+1.47548Y(n-1)-0.58693Y(n-2)\]</span> 输入为X,输出为Y。通过上述离散表达式书写C语言数字滤波器。</p>
<h1 id="低通滤波器c语言代码">低通滤波器C语言代码</h1>
<h2 id="二阶数字滤波器宏定义">二阶数字滤波器宏定义</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="comment">// IIR Butterworth second order sections</span></span><br><span class="line"><span class="comment">// fs=10kHz,fc=600Hz</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LPF2_k1      0.02786		<span class="comment">//gain</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LPF2_a11     -1.47548		<span class="comment">//denominator</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LPF2_a12     0.58692</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LPF2_b10     1*LPF2_k1		<span class="comment">//numerator</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LPF2_b11     2*LPF2_k1</span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> LPF2_b12     1*LPF2_k1</span></span><br><span class="line"></span><br><span class="line"><span class="meta">#<span class="meta-keyword">define</span> PI 3.14159</span></span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">struct</span> <span class="title">filterValues</span> &#123;</span></span><br><span class="line">	<span class="keyword">float</span> x[<span class="number">3</span>];	<span class="comment">/* input values: x(n):x[0], x(n-1):x[1], x(n-2)=x[2]  */</span></span><br><span class="line">	<span class="keyword">float</span> y[<span class="number">3</span>];	<span class="comment">/* output values: y(n):y[0], y(n-1):y[1], y(n-2)=y[2]  */</span></span><br><span class="line">&#125;;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="二阶滤波函数">二阶滤波函数</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*! \brief low pass filter</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * second order low pass filter:</span></span><br><span class="line"><span class="comment"> * 	fs=10khz(sample frequency), fc=600hz(cutoff frequency)</span></span><br><span class="line"><span class="comment"> * 	z transfer function:</span></span><br><span class="line"><span class="comment"> * 			   		1+2z^(-1)+z^(-2)</span></span><br><span class="line"><span class="comment"> * 		h(z)=0.02786  ---------------------------------</span></span><br><span class="line"><span class="comment"> *				1-1.47548z^(-1)+0.58692z^(-2)</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \param inputvalue: current input value</span></span><br><span class="line"><span class="comment"> * \param values: pointer to filtervalues</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * \return no return</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">lowpassfilter</span><span class="params">(<span class="keyword">float</span> inputvalue, struct filtervalues *values)</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	values-&gt;x[<span class="number">0</span>]=inputvalue;</span><br><span class="line">	values-&gt;y[<span class="number">0</span>] =lpf2_b10*(values-&gt;x[<span class="number">0</span>])+lpf2_b11*(values-&gt;x[<span class="number">1</span>])+lpf2_b12*(values-&gt;x[<span class="number">2</span>])-lpf2_a11*(values-&gt;y[<span class="number">1</span>])-lpf2_a12*(values-&gt;y[<span class="number">2</span>]);</span><br><span class="line"></span><br><span class="line">	values-&gt;x[<span class="number">2</span>]=values-&gt;x[<span class="number">1</span>];                                                  <span class="comment">//x存储值更新</span></span><br><span class="line">    	values-&gt;x[<span class="number">1</span>]=values-&gt;x[<span class="number">0</span>];</span><br><span class="line"></span><br><span class="line">    	values-&gt;y[<span class="number">2</span>]=values-&gt;y[<span class="number">1</span>];                                                <span class="comment">//y存储值更新</span></span><br><span class="line">    	values-&gt;y[<span class="number">1</span>]=values-&gt;y[<span class="number">0</span>];                                                <span class="comment">//y[0]为最终滤波输出</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="需要导入的头文件">需要导入的头文件</h2>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;stdio.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&lt;math.h&gt;</span></span></span><br><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mex.h&quot;</span></span></span><br></pre></td></tr></table></figure>
<p><strong>math.h</strong>文件主要用于计算sin的值，用于产生信号。 <strong>mex.h</strong>主要用于C语言和matlab数据交互， 需要使用mex工具。</p>
<hr>
<h1 id="matlab-mex">matlab mex</h1>
<h2 id="matlab-mex-install">matlab mex install</h2>
<p>matlab mex的安装比较简单，参考<a href="https://ww2.mathworks.cn/matlabcentral/fileexchange/52848-matlab-support-for-mingw-w64-c-c-compiler?s_tid=mwa_osa_a">MinGW-w64 C/C++ Compiler</a> ，登录matlab帐号，下载安装文件即可。用于Window平台，GCC编译器的安装，基本上是点点点就行了。 但是需要外网，网络不好，只有手动安装GCC编译器。安装matlab版本相对应的GCC版本，对于 R2017b and R2018a GCC 5.3。最好安装和matlab版本一致的版本。 对于linux系统，就无需使用该方法安装 GCC编译器。linux一般情况下是自带gcc编译器，如果没有，安装也比windows方便。当前我的gcc版本 和推荐的版本不一致，比matlab匹配的GCC版本高, 在使用mex会有警告，提示版本不一致，可以忽略。 在我当前使用中是没有问题的。</p>
<figure>
<img data-src="/2021/06/17/matlab-mex-tutorial/mexFirstUse.png" alt><figcaption>mex complie C</figcaption>
</figure>
<h2 id="matlab-mexfunction">matlab mexFunction</h2>
<p>C语言的滤波函数和matlab mex已经配置完成。剩下的便是完成C语言和matlab之间的编程接口。 顺便提一下，matlab的mex支持C语言和Fortran语言。在本低通滤波操作使用的是C语言。通过 mex编译C语言的源文件，可以得到matlab可运行的mex文件。而在实现C和matlab之间的数据操 作，需要在C源代码文件中添加 <strong>mexFunction</strong> 函数，可以理解在C语言中的主函数，用于 调用自己写的其他C函数，实现具体的功能。</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="meta">#<span class="meta-keyword">include</span> <span class="meta-string">&quot;mex.h&quot;</span>				<span class="comment">//引入mex头文件</span></span></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mexFunction</span><span class="params">(<span class="keyword">int</span> nlhs, mxArray *plhs[], 	<span class="comment">//输出结果</span></span></span></span><br><span class="line"><span class="params"><span class="function"><span class="keyword">int</span> nrhs, <span class="keyword">const</span> mxArray *prhs[])</span>		<span class="comment">//输入参数</span></span></span><br></pre></td></tr></table></figure>
<p><strong>mexFunction参数</strong>:</p>
<ol type="1">
<li><strong>nlhs</strong>: Number of expected output mxArrays 输出结果的数量</li>
<li><strong>plhs</strong>: Array of pointers to the expected output mxArrays 输出结果的指针数组</li>
<li><strong>nrhs</strong>: Number of input mxArrays 输入参数的数量</li>
<li><strong>prhs</strong>: Array of pointers to the input mxArrays. Do not modify any prhs values in your MEX file. Changing the data in these read-only mxArrays can produce undesired side effects. 输入参数的指针数组。</li>
</ol>
<p>一句话总结一下mexFunction，输出参数的和放回结果的数量和指针数组(存储输入和输出的具体结果)。</p>
<h2 id="mexfunction中常用函数">mexFunction中常用函数</h2>
<p>对mexFunction中需要使用的一些常用函数做简要说明。</p>
<p><code>mwPointer mxCreateDoubleMatrix(m, n, ComplexFlag)</code> 该函数用于创建一个矩阵，m为行，n为列， ComplexFlag用于指定矩阵中元素的数据类型，对于实数：mxREAL, 返回的是该矩阵的指针(地址)。一般是把返回值赋给数组plhs[]中的一个指针。实际使用该函数，主要用于在 内存中为矩阵分配空间。</p>
<p><code>double *mxGetPr(const mxArray *pm)</code> 该函数用于获取数组的首地址，即第一个元素的地址指针。</p>
<p><code>int mexPrintf(const char *message, ...)</code> 和C语言中的<code>printf()</code>函数的用法一样。</p>
<h2 id="mexfunction-具体c代码">mexFunction 具体C代码</h2>
<p>mexFunction二阶低通滤波器的C源代码。在正弦基波分量的基础上，添加了高频率的毛刺 (也是正弦分量，只是频率比C基本的高很多)。如下为二阶低通滤波和matlab数据交换的具体代码：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="comment">/*</span></span><br><span class="line"><span class="comment"> * nlhs 输出结果 数量</span></span><br><span class="line"><span class="comment"> * plhs 输出结果 指针</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> * nrhs 输入参数 数量</span></span><br><span class="line"><span class="comment"> * prhs 输入参数 指针</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">void</span> <span class="title">mexFunction</span><span class="params">(<span class="keyword">int</span> nlhs, mxArray *plhs[],</span></span></span><br><span class="line"><span class="params"><span class="function">        <span class="keyword">int</span> nrhs, <span class="keyword">const</span> mxArray *prhs[])</span></span></span><br><span class="line"><span class="function"></span>&#123;</span><br><span class="line">	<span class="keyword">int</span> N=<span class="number">400</span>;</span><br><span class="line">	<span class="keyword">int</span> n=<span class="number">10</span>;	<span class="comment">//显示周期数</span></span><br><span class="line">	<span class="keyword">int</span> f=<span class="number">3000</span>;	<span class="comment">//相对频率</span></span><br><span class="line">	<span class="keyword">int</span> i,m;</span><br><span class="line">	<span class="keyword">float</span> delta=<span class="number">2</span>*PI/N/f;</span><br><span class="line">	<span class="keyword">float</span> point=<span class="number">0</span>;</span><br><span class="line">    	<span class="keyword">double</span> *input,*result;</span><br><span class="line">	<span class="class"><span class="keyword">struct</span> <span class="title">filterValues</span> <span class="title">fvalues</span>=</span>&#123;&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;,&#123;<span class="number">0</span>,<span class="number">0</span>,<span class="number">0</span>&#125;&#125;;</span><br><span class="line"></span><br><span class="line">	plhs[<span class="number">0</span>]= mxCreateDoubleMatrix(<span class="number">1</span>, N*n*f, mxREAL);</span><br><span class="line">	plhs[<span class="number">1</span>] = mxCreateDoubleMatrix(<span class="number">1</span>, n*N, mxREAL);</span><br><span class="line"></span><br><span class="line">	input  = mxGetPr(plhs[<span class="number">0</span>]);</span><br><span class="line">    	result = mxGetPr(plhs[<span class="number">1</span>]);</span><br><span class="line">	m=<span class="number">0</span>;</span><br><span class="line">	<span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N*n*f; ++i) &#123;</span><br><span class="line">		input[i]=<span class="built_in">sin</span>(point)+<span class="number">0.2</span>*<span class="built_in">sin</span>(point*f);</span><br><span class="line">		point+=delta;</span><br><span class="line">		<span class="keyword">if</span> (i%(f)==<span class="number">0</span>) &#123;</span><br><span class="line">		LowPassFilter(input[i], &amp;fvalues);</span><br><span class="line">       		result[m]=fvalues.y[<span class="number">0</span>];</span><br><span class="line">	       	m++;	<span class="comment">//remember increment m!</span></span><br><span class="line">		&#125;</span><br><span class="line">		<span class="comment">//mexPrintf(&quot;y[%d]=%f\n&quot;,i,fvalues.y[0]);</span></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h2 id="compile-c-source-file-by-mex">compile C source file by mex</h2>
<p>在matlab命令行中输出如下内容，其中LowPassFilter.c为c语言源代码文件。 <figure class="highlight c"><table><tr><td class="code"><pre><span class="line">mex LowPassFilter.c</span><br></pre></td></tr></table></figure></p>
<p>编译成功后，可在matlab中直接执行LowPassFilter命令，由于上述有mexFunction 有两个返回值，故在matlab Commander窗口输入：</p>
<figure class="highlight plaintext"><table><tr><td class="code"><pre><span class="line">[a,b]=LowPassFilter;</span><br><span class="line"></span><br><span class="line">% 作图</span><br><span class="line">plot(linspace(0,10*pi,12000000),a)</span><br><span class="line">hold on</span><br><span class="line">plot(linspace(0,10*pi,4000),b)</span><br></pre></td></tr></table></figure>
<h2 id="lowpass-filer-result">lowpass filer result</h2>
<p>滤波结果，请见下图，可以发现滤波该滤波参数能较好的进行滤波。至于最初为什么 实际的硬件电路无法完成滤波，还需进一步查找原因，至少能排除参数和滤波器C语言 源代码没有问题。</p>
<figure>
<img data-src="/2021/06/17/matlab-mex-tutorial/lowpassResult.svg" alt><figcaption>low pass filter result</figcaption>
</figure>
<hr>
<h1 id="滤波器输出inf问题">滤波器输出inf问题</h1>
<p>在实际的DSP硬件电路中，数字滤波器输出无穷大<strong>inf</strong>问题，即<code>filtervalues.y[0]=inf</code> 需要解决该问题，正如前面排除滤波器C语言代码的问题，回想以下。用实际的示波器测量一 下滤波器未滤波的波形，发现每个周期有多个突变点，问题应该出在输入波形具有突变，输入 值的 <strong>inf</strong>,自然滤波得到的结果为无穷大。故在滤波的前，<strong>输入信号增加一个限幅环节</strong>。 即在调用<code>LowPassFilter(float inputvalue, struct filterDesigner *values)</code>之前，添加一句 限幅代码。限幅代码添加后，硬件滤波波形完好了。在实际硬件应用中，添加一个限幅环节，完美 解决问题。实际的软件仿真模拟中，输入信号比较理想，不存在突变的情况，故可以不加限幅环节。</p>
<p><strong>限幅！限幅！限幅！</strong></p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line"><span class="keyword">for</span> (i = <span class="number">0</span>; i &lt; N*n*f; ++i) &#123;</span><br><span class="line">	input[i]=<span class="built_in">sin</span>(point)+<span class="number">0.2</span>*<span class="built_in">sin</span>(point*f);</span><br><span class="line">	point+=delta;</span><br><span class="line">	<span class="comment">/************添加的限幅代码 start*********************/</span></span><br><span class="line">	<span class="comment">//limit input values </span></span><br><span class="line">	<span class="keyword">if</span> (input[i]&gt;<span class="number">10</span>) &#123;</span><br><span class="line">		input[i]=<span class="number">10</span>;</span><br><span class="line">	&#125; <span class="keyword">else</span> <span class="keyword">if</span> (input[i]&lt;<span class="number">-10</span>) &#123;</span><br><span class="line">		input[i]=<span class="number">-10</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">/*************添加的限幅代码 end********************/</span></span><br><span class="line">	<span class="keyword">if</span> (i%(f)==<span class="number">0</span>) &#123;</span><br><span class="line">	LowPassFilter(input[i], &amp;fvalues);</span><br><span class="line">	result[m]=fvalues.y[<span class="number">0</span>];</span><br><span class="line">	m++;	<span class="comment">//remember increment m!</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//mexPrintf(&quot;y[%d]=%f\n&quot;,i,fvalues.y[0]);</span></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h1 id="conclusion">Conclusion</h1>
<p>最终，终于实现C代码和matlab之间的互通，并且验证自己的数字低通滤波器参数和C语言 代码都没问题。做一天的硬件调试，发现问题出在未加限幅环节。因为实际的信号存在各种 不确定性，添加限幅环节，可以防止突变。</p>
<p><img data-src="/2021/06/17/matlab-mex-tutorial/experimentFilterWave.BMP" alt="实验低通滤波波形"> 请看上图的实验波形，棕色波形是带有高频信号噪声的正弦波，紫色波形是经过数字滤波后的 的波形。十分赏心悦目,终于实现硬件实验下的数字滤波。</p>
<h1 id="reference">Reference</h1>
<p><a href="https://ww2.mathworks.cn/help/">Matlab 帮助文档</a></p>
<h1 id="备注">备注</h1>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please email to me! 😝</p>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
        <tag>MEX</tag>
        <tag>Filter</tag>
      </tags>
  </entry>
  <entry>
    <title>matlab函数类型</title>
    <url>/2018/02/26/matlab_function_type/</url>
    <content><![CDATA[<h1 id="matlab-函数类型">matlab 函数类型</h1>
<h2 id="主函数">主函数</h2>
<p>主函数在结构上与其他函数没有什么区别，之所以叫主函数，就是因为他在M文件中坐了第一把交椅，其他函数都排在他的后面。按惯例他与M文件同名，在命令窗口或者其他函数中调用这个函数，都是引用M文件名。</p>
<h2 id="子函数">子函数</h2>
<p>主函数之后编写的函数为子函数。在函数M文件中,只有一个主函数，但是可以有多个子函数。所有的子函数也 采用function进行定义。如果主函数中包含子函数，则每个采用function定义的函数必须采用end结束。各个子函 数的先后顺序和调用的先后顺序无关。 在主函数进行函数调用时，首先查找该函数文件中的子函数，如果有同名的子函数，则调用该子函数。因此， 可以编写同名的子函数实现函数的重载。子函数只能被同一文件的主函数或其他子函数调用。</p>
<h2 id="嵌套函数">嵌套函数</h2>
<p>在函数内部，还可以定义一个或者多个函数称为函数的嵌套。在函数的内部定义的函数称为嵌套函数。可以进行多层嵌套。 每个用function定义的函数都必须用end语句结束。 嵌套函数也有自己的工作区。注意变量作用范围。</p>
<h2 id="私有函数">私有函数</h2>
<p>私有函数要保存在该目录的private文件夹下,具有有限的访问权限。私有函数的编写和普通函数的编写没有什么区别。 函数M文件可以直接调用私有函数。该函数M文件所在的目录下直接有一个private目录，私有函数就保存在该目录下。 <strong>私有函数只能被其父目录内的脚本或函数调用。</strong></p>
<h2 id="重载函数">重载函数</h2>
<p>在MATLAB中有很多都是重载函数，重载函数具有相同的函数名，但是参数类型或个数不同。当用户在调用函数时，MATLAB会根据实际参数类型和个数来选择其中一个。在MATLAB中重载函数保存在不同的目录下。</p>
<h2 id="匿名函数">匿名函数</h2>
<p>匿名函数通常是很简单的函数。匿名函数是面向命令行的函数形式，它通常只有一句很简单的声明语句组成。 创建匿名函数的标准格式</p>
<blockquote>
<p>fhandle=@(arglist) expression</p>
</blockquote>
<p>其中，<code>expression</code>通常为一个简单的MATLAB变量表达式实现函数功能。 <code>arglist</code> 为此匿名函数的输入参数列表。</p>
<h2 id="内联函数">内联函数</h2>
<p>内联函数是MATLAB比较简单的函数之一。其适用于表达式较为简单的函数。 调用格式： &gt; funName=inline(expr)</p>
<p><code>funName</code>为所定义的内联函数名称 <code>expr</code>为表达式对应的字符串。</p>
<h2 id="函数句柄">函数句柄</h2>
<p>函数句柄是一种特殊的函数类型，它提供了间接调用函数的方法，类似于C语言中的指针，只是这里只指向函数。函数句柄包含了该函数的函数名和类型等信息，可以通过函数 <strong>functions()</strong>来获取信息。 创建函数句柄使用 <code>@</code> ，可以使用函数句柄调用其他函数，也可以将函数句柄存储在数据结构中，方便以后使用。当使用函数句柄调用函数时，MATLAB会立即执行，不会进行文件收缩。当多次调用一个函数文件时，可以节约大量的搜索时间，从而提高函数的执行效率。</p>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>uBlock Origin Tutorial</title>
    <url>/2021/04/20/uBlock-Orgin-Tutor/</url>
    <content><![CDATA[<hr>
<h1 id="ublock-origin-tutorial">uBlock Origin Tutorial</h1>
<h2 id="不知为何接触到了-ublock-origin">不知为何接触到了 uBlock Origin</h2>
<p>什么时候开始接触 <a href="https://ublockorigin.com/">uBlock Origin</a>？在浏览Firefox插件安装商店的排行榜时，发现<strong>uBlock Origin</strong> 插件使用人数挺多的，于是就安装了！当时看见 <strong>uBlock</strong>就默认为是拦截广告的插件，为了避免广告就安装了！实际最初使用拦截广 告的插件是<strong>AdBlocker Ultimate</strong>, AdBlocker也挺不错的，尝试一下新的广告拦截插件，况且uBlock的酒红色我更偏爱就试试它吧！ 以为 <strong>uBlock Origin</strong>和 <strong>AdBlocker Ultimate</strong>一样，安装完无需配置就可以使用！事实上这句话，算正确，也算不正确。如果两者 相同，为什么 <strong>uBlock Origin</strong>作为后来者，增长速度较快于 <strong>AbBlocker Ultimate</strong>? 说明 <strong>uBlock Origin</strong>有它的优势，故我们 要探索探索它的优点。</p>
<p>喂！喂！喂！朋友该进入正题了，不要说这些废话！</p>
<p>客官，好的！开胃菜马上呈上。抱歉！</p>
<hr>
<h2 id="ublock-origin-introduction">uBlock Origin Introduction</h2>
<p>去官网<a href="https://ublockorigin.com/">uBlock Origin</a>，发现 uBlock Origin 简介。简单的说就是，免费 开源 的广告拦截器，且低CPU低 Memery 内存消耗,支持各种主流的浏览器。当然少不了去 <strong>Github</strong>查查，Github <a href="https://ublockorigin.com/">uBlock Origin</a>地址， 同样有介绍！uBlock Origin 哲学"uBlock Origin (or uBlock₀) is not an ad blocker; it's a general-purpose blocker. " 翻译成中文 就是 <strong>uBlock Origin 不只是一个广告拦截器，更是一个通用拦截器。</strong> 恰恰是这句话吸引我去研究它。感觉有一定道理。</p>
<h2 id="ublock-origin-install">uBlock Origin Install</h2>
<p>对于 <strong>uBlock Origin</strong> 安装，最简单的就是取个浏览器插件应用商店安装，这里给出 <a href="https://addons.mozilla.org/en-US/firefox/">Firefox插件应用商店</a> 地址。官网和Github上也有安装教程，就不做详细介绍了。</p>
<hr>
<h2 id="ublock-origin-tricks">uBlock Origin Tricks</h2>
<p>有一天天气不错，是个好天气好日子。吃完晚饭，闲来无事，那就研究研究搁下已久的 <strong>uBlock Origin</strong>插件。</p>
<blockquote>
<p>uBlock Origin (or uBlock₀) is not an ad blocker; it's a general-purpose blocker.</p>
</blockquote>
<h3 id="ublock-origin-菜单快速浏览">uBlock Origin 菜单快速浏览</h3>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginMenuQuickLook.gif" alt><figcaption>click uBlock Origin <em>more</em> and <em>less</em></figcaption>
</figure>
<h3 id="ublock-origin-菜单概要">uBlock Origin 菜单概要</h3>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginMenuInfo.png" alt><figcaption>uBlock Origin 菜单概要</figcaption>
</figure>
<p>如图所示为 uBlock Origin 的菜单概要，并对各功能块编号。</p>
<ol type="1">
<li><p>访问该网站请求了网址。</p></li>
<li><p>uBlock 高级使用菜单栏</p></li>
<li><p>uBlock 快速功能使用菜单</p></li>
<li><p>uBlock 开关机按钮</p></li>
<li><p>uBlock 的信息概要</p></li>
</ol>
<h3 id="ublock-origin-zapper-mode">uBlock Origin zapper mode</h3>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginzapper.gif" alt><figcaption>zapper mode</figcaption>
</figure>
<p>zapper mode 为快速Block当前网页的内容, 但只适用于当前时刻的网页，重新加载网页，阻塞的功能失效。 主要用于仅访问一次的网页，当前时刻不想看见网页的部分内容，可以使用该功能。</p>
<h3 id="ublock-origin-picker-mode">uBlock Origin picker mode</h3>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginPicker.gif" alt><figcaption>picker mode</figcaption>
</figure>
<p>picker mode主要选取该网页想要永久Block的内容（不显示选取的内容），进行快速的选取。选取后，右下角 会弹出一个对话框，其中 <strong>preview</strong> 为预览概选取的内容，有点类似于 zapper mode。 <strong>quit</strong>放弃本次 选取内容， <strong>create</strong> 确认本次选取内容，相当于确认按钮， <strong>pick</strong>重新选取。该功能的选取还是挺方便 Block 自己不想看的内容。</p>
<h3 id="ublock-origin-logger">uBlock Origin logger</h3>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginlogger.gif" alt><figcaption>logger</figcaption>
</figure>
<p>uBlock Origin 的日志功能主要查看该网页加载的资源，可以详细的查看，如上述演示，为查看该网站的图片。 更高级的使用技巧，请自己探索探索。</p>
<h3 id="ublock-origin-dashboard">uBlock Origin dashboard</h3>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginDashboard.gif" alt><figcaption>dashboard</figcaption>
</figure>
<p>uBlock Origin dashboard 主要是一些uBlock的设置和自己的过滤规则。可以自己修改过滤的内容。上述演示 内容中，把uBlock网站的Block规则删除，在重新加载网页，恢复原来的面貌了。</p>
<p>在 dashboard 中点击 <strong>Filter lists</strong>，然后把 <strong>Ad</strong> 中的 <strong>AdGuard Base</strong> 和 <strong>AdGuard Mobile Ads</strong> 勾选了，用于 Block 广告。主要该软件是外国人写的，对国外的网站的广告过滤比较友好，对于国内可以使用大佬们定义好的过滤规则，或者自己定制自己的过滤规则。也就是 <strong>My filters</strong> 的内容，自己添加修改。如果你学过 html 和 css，那么自己过滤内容就挺方便，因为有些广告用 picker 无法准确的筛选内容，会存在过滤不准确。</p>
<p>勾选 uBlock orgin 自带的 filter list。</p>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginFilterlist.png" alt><figcaption>filter lists</figcaption>
</figure>
<p>添加其他大佬定义的过滤规则，可以参考我 Blog <a href="https://seanchristspc.github.io/2022/02/20/Qutebrowser/">qutebrowser</a> 中的<strong>广告 block</strong> 部分内容，有介绍大佬定义的过滤规则。</p>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginAddMyFilterlist.png" alt><figcaption>add others filter list</figcaption>
</figure>
<h3 id="ublock-origin-customs">uBlock Origin Customs</h3>
<p>如下是我自己的过滤规则表，可以添加到 <strong>My filters</strong>中。只是我目前使用的，随着你使用的越久，定制的内容就 会越多。可供参考，但不完全正确。</p>
<figure class="highlight css"><table><tr><td class="code"><pre><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">15</span> https://www.zhihu.com</span><br><span class="line">www.zhihu.com##.Question-sideColumn--sticky.Question-sideColumn &gt; div &gt; .Sticky</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">15</span> https://www.nfmovies.com</span><br><span class="line">||www.nfmovies.com/static/*.jpg$image</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">15</span> http://www.bimiacg.com</span><br><span class="line">||v.taiqingjiu.com/syjpc/*.gif$image</span><br><span class="line">||v2.taiqingjiu.com/syjpc/*.gif$image</span><br><span class="line">||v.taiqingjiu.com/syjpc/*.gif$image</span><br><span class="line">||ddcdn.jd.com/ddimg/*/*.png$image</span><br><span class="line">||cdn.u1.huluxia.com/g4/*/*.jpg$image</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">15</span> https://blog.csdn.net</span><br><span class="line">blog.csdn.net##.recommend-box</span><br><span class="line">blog.csdn.net##.recommend-tit-mod</span><br><span class="line">blog.csdn.net###asideNewComments &gt; .aside-content</span><br><span class="line">blog.csdn.net###asideHotArticle &gt; .aside-content</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">15</span> https://book.douban.com</span><br><span class="line">book.douban.com##.aside</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">15</span> https://blog.csdn.net</span><br><span class="line">blog.csdn.net###asideHotArticle &gt; .aside-content</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">15</span> https://www.zhihu.com</span><br><span class="line">||pic*.zhimg.com/*.jpeg$image</span><br><span class="line">www.zhihu.com##.Footer</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">16</span> https://blog.csdn.net</span><br><span class="line">blog.csdn.net##.toolbox-list</span><br><span class="line">blog.csdn.net###asideHotArticle &gt; .aside-title</span><br><span class="line">blog.csdn.net###asideNewComments &gt; .aside-title</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">16</span> https://mathworld.wolfram.com</span><br><span class="line">||www.wolframcdn.com/side-images/*$image</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">16</span> https://www.jianshu.com</span><br><span class="line">www.jianshu.com##._3Pnjry</span><br><span class="line">www.jianshu.com##a._1OhGeD.hM7XFL:<span class="built_in">nth-of-type</span>(<span class="number">2</span>)</span><br><span class="line">www.jianshu.com##._13lIbp</span><br><span class="line">www.jianshu.com##.d0hShY</span><br><span class="line">www.jianshu.com##section.ouvJEz:<span class="built_in">nth-of-type</span>(<span class="number">2</span>)</span><br><span class="line">www.jianshu.com##._2xr8G8</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">17</span> https://blog.csdn.net</span><br><span class="line">blog.csdn.net###copyright-box</span><br><span class="line">blog.csdn.net##.template-box</span><br><span class="line">||kunpeng-sc.csdnimg.cn/?timestamp=*/$subdocument</span><br><span class="line">blog.csdn.net##.toolbar-container</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">17</span> https://www.jianshu.com</span><br><span class="line">www.jianshu.com##._1CSgtu</span><br><span class="line">www.jianshu.com##.VYwngI</span><br><span class="line">www.jianshu.com##div &gt; ._3Z3nHf</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">03</span>-<span class="number">18</span> https://www.cnblogs.com</span><br><span class="line">www.cnblogs.com##.RecentCommentBlock &gt; ul</span><br><span class="line">www.cnblogs.com###TopViewPostsBlock &gt; ul</span><br><span class="line">www.cnblogs.com###TopFeedbackPostsBlock &gt; ul</span><br><span class="line">www.cnblogs.com###TopDiggPostsBlock &gt; ul</span><br><span class="line">www.cnblogs.com##.catList &gt; .catListTitle</span><br><span class="line">www.cnblogs.com###recent_comments_wrap &gt; .catListTitle</span><br><span class="line">www.cnblogs.com###topview_posts_wrap &gt; .catListTitle</span><br><span class="line">www.cnblogs.com###topfeedback_posts_wrap &gt; .catListTitle</span><br><span class="line">www.cnblogs.com##.catListView &gt; .catListTitle</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">04</span>-<span class="number">16</span> https://mail.<span class="number">163</span>.com</span><br><span class="line">mail.<span class="number">163</span>.com##.nui-closeable</span><br><span class="line">mail.<span class="number">163</span>.com##.js-component-link.tL2</span><br><span class="line">mail.<span class="number">163</span>.com###_mail_component_106_106</span><br><span class="line">mail.<span class="number">163</span>.com###_mail_tabitem_3_121</span><br><span class="line">mail.<span class="number">163</span>.com##.mailgg</span><br><span class="line"></span><br><span class="line">! <span class="number">2021</span>-<span class="number">04</span>-<span class="number">16</span> https://mail.<span class="number">126</span>.com</span><br><span class="line"></span><br><span class="line">mail.<span class="number">126</span>.com##.mailgg</span><br><span class="line">mail.<span class="number">126</span>.com###_mail_tabitem_3_121</span><br><span class="line">mail.<span class="number">126</span>.com##.gWel-bottom</span><br><span class="line">mail.<span class="number">126</span>.com###_mail_component_106_106</span><br><span class="line">mail.<span class="number">126</span>.com###_mail_component_113_113</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="ublock-origin-快速功能使用">uBlock Origin 快速功能使用</h3>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginMenuQuickuse.gif" alt><figcaption>Quick function</figcaption>
</figure>
<figure>
<img data-src="/2021/04/20/uBlock-Orgin-Tutor/uBlockOriginQuickUse.png" alt><figcaption>Quick use</figcaption>
</figure>
<p>快速功能使用各模块解释</p>
<ol type="1">
<li>阻止所有该网站的弹出窗口</li>
<li>阻止该网站的大的媒体文件元素</li>
<li>关闭Cosmetic filters的过滤功能</li>
<li>阻止网站使用远程字体（网页显示的字体可能是远程下载的，也可能是本地加载的）</li>
<li>禁止网站javascript(对于有些网站，禁止js，会出现显示异常或无法加载网页)</li>
</ol>
<p>点击 <strong>锁</strong> 一样的图片，指永久改变该网站的阻塞内容。</p>
<hr>
<h2 id="备注">备注</h2>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please email to me! 😝</p>
<h2 id="参考连接">参考连接</h2>
<p><a href="https://ublockorigin.com/">uBlock Origini Official site</a></p>
<p><a href="https://github.com/gorhill/uBlock">uBlock Origin Github</a></p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>uBlock Origin</tag>
        <tag>Tools</tag>
        <tag>Browser</tag>
      </tags>
  </entry>
  <entry>
    <title>Recommend Softwares</title>
    <url>/2021/07/23/Recommend-Softwares/</url>
    <content><![CDATA[<h1 id="recommend-software">Recommend Software</h1>
<p>为什么要写这篇博文？今天比较闲，闲来没事干，突发奇想，使用电脑也有一段时间了， 要不写个blog记录一下自己喜欢使用的软件。文章会持续更新。</p>
<p>计算机行业经过这几十年的发展，已产出成千上万的软件，其中不乏一些优秀实用的软件。当前，软件还是要区分平台的， 有些软件依托于windows，有些软件依托于linux,有些软件依托于macOS。我会以平台来分类推荐不同的软件。由于， 从未使用过mac,故主要分为windows和linux两大板块来推荐软件，都是自己使用过的，感觉比较nice的。对于自己从未使用的， 但是比较优秀的软件并没有加入推荐列表。收录主要标准，其一自己使用过，其二优秀的软件。实际这两个标准是比较主观的。</p>
<p><span class="math display">\[
f(x)=e^{x}
\]</span></p>
<hr>
<h2 id="linux-平台">Linux 平台</h2>
<p>linux平台是开源平台，基本上linux上的软件都是金钱免费的，但是时间不免费，学习成本比较大，有些bug不能及时修复， 毕竟开发者纯粹靠热爱自愿投入到软件项目中，基本不靠软件赚钱,有热爱的积极性，但没有金钱强制的积极性。bug修复不即时， 但最终会修复。近几年开源界优秀的软件成出不穷，但依旧无法与windows平台软件相比较。就目前而言，windows的生态还是 好于linux，可以发现越来越多的大厂,例如 <strong>Microsoft,IBM,Google,Tencent,Huawei,AWS</strong> 等开始拥抱开源，开源界开始朝着 越来越好的方向发展。说了这么多题外话，该进入正式话题啦，linux上的优秀软件。</p>
<hr>
<h3 id="视频播放软件">视频播放软件</h3>
<p><a href="https://www.videolan.org/vlc/">VLC</a>: VLC还是一个不错的视频播放器，基本市面上的视频格式都支持，同时还可以视频格式转换， 更强大的是VLC还支持剪切视频。哈哈哈！完全不专注自己的播放器主业，搞一些视频处理的副业务。该视频播放器完全没有广告或弹窗。 如下图所示，为VLC网站的官网截图，也说了自己的优点。全平台视频播放器，无论是linux,windows,mac 还是ios,andriod他都有客户端。 良心的视频播放软件。有个缺点就是Windows和Linux平台界面有点平淡古老，但是andriod的VLC界面还是挺现代化的。 <img data-src="/2021/07/23/Recommend-Softwares/VLC.png" alt="VLC"></p>
<p>至于下载开源软件，国内的同学可以去<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华镜像</a>下载，速度还是比较快的。 <img data-src="/2021/07/23/Recommend-Softwares/tsinghuaMirror.png" alt="Tsinghua Mirror"></p>
<p>linux平台上的视频播放软件太多了，也有比较纯粹简洁的视频播放软件。例如Gnome桌面的<strong>totem</strong>视频播放器。 <a href="https://mpv.io/"><strong>mpv</strong></a>播放器也是挺nice的，简洁的。</p>
<h3 id="pdf软件">Pdf软件</h3>
<p><a href="https://wiki.gnome.org/Apps/Evince">Evince</a>: Evince是Gnome桌面环境自动安装的pdf阅读器，也是相当的简洁，有简单的批注功能。 如果你喜欢像手机一样具有黑夜模式，Evince依旧可以满足你。 <img data-src="/2021/07/23/Recommend-Softwares/evince.png" alt="Evince"></p>
<p><a href="https://pwmt.org/projects/zathura/">zathura</a>: zathura是比Evince更简洁的软件，但是没有批注功能，纯粹的pdf阅读器，高效、轻量。 如下图所示，一个菜单选项都没有。当然有快捷建调出它的其他功能。试试按 <code>Tab</code>键，看看会发生什么？当然这个也支持黑夜模式，快捷键 <code>Ctrl+R</code>。 <img data-src="/2021/07/23/Recommend-Softwares/zathura.png" alt="zathura"></p>
<p><a href="https://okular.kde.org/">okluar</a>: okluar比前两者都要复杂，功能也更多。对于需要注解，各种标注的同学，可以使用okluar。 Okluar也有黑夜模式，自己在设置里面找找会了。</p>
<figure>
<img data-src="/2021/07/23/Recommend-Softwares/okular.png" alt><figcaption>okluar</figcaption>
</figure>
<p><a href="https://www.wps.cn/">WPS</a>: 如果你想使用像word一样的排版文档处理软件，金山的WPS是一款不错的文档处理套件。今天终于 解决Linux下WPS账户登录问题。该问题困扰了接近大概半年了吧！终于找到解决方法了。解决方法很简单，就是我下载WPS的网址 有问题。如果使用 <strong>https://www.wps.cn</strong> 下载的WPS deb安装包，是包含登录功能的，但是使用<strong>https://www.wps.com</strong>下载 的Linux安装包是没有登录功能。前者安装包大小在300M以上，后者200M以上。有了WPS登录功能,就具有WPS云盘功能，自动备份文 档，并且可以在手机和电脑无缝切换，当然多个电脑之间也可以无缝切换。这样一说还是挺方便的(前提是你有一个WPS会员)。 值得提醒的linux版WPS是没有广告的。</p>
<p>你可能会好奇，为啥不推荐Adobe Acrobat DC。哈哈Adobe Acrobat DC 确实不错，功能很强大,不过我很少使用它。 我会在后续的Windows推荐，在Linux平台尽量推荐一些Linux的特色软件吧！当然，Adobe Acrobat DC 还是有许多优秀的功能的， 比如文件的合并，pdf文件OCR，缩小pdf文件大小等。依稀记得，有一次想看一本电子书，电子书内容在各个pdf软件上都乱码， 唯独Adobe Acrobat DC 不乱码。顿时对Adobe Acrobat DC产生好感。后来明白出现乱码的原因是自己系统中缺少电子书使用的字体， 在无法查到指定的字体时，会使用默认的字体，字体的不匹配，出现了乱码。最后，把字体嵌入pdf文件后， 所有pdf软件打开都不会乱码了。哈哈哈！嘴上说不要不要，实际特别想要。你看，我自己都说了这么多Adobe Acrobat DC的优点， 还嘴硬，还说不喜欢用Adobe Acrobat DC。我在处理pdf没有办法的时候，才会使用Adobe Acrobat。</p>
<h3 id="浏览器软件">浏览器软件</h3>
<p><a href="https://www.mozilla.org/en-US/">Firefox</a>: linux平台基本都默认安装了<strong>Firefox</strong>,linux浏览器界的王者。尽管Firefox或多或少有些缺点， 但是不阻碍我使用它。Firefox的插件，值得推荐。最近Firefox的Andriod平台的浏览器，感觉使用不错，进化啦！至于Firefox 拦截广告的插件 使用，可以参考 <a href="https://seanchristspc.github.io/2021/04/20/uBlock-Orgin-Tutor/">ublock origin 教程</a>。 <img data-src="/2021/07/23/Recommend-Softwares/firefox.png" alt="Firefox Home"></p>
<p>对于有些网站必须使用Chromium内核，可以使用 <a href="https://brave.com/">Brave</a>，简单一个字就是"快"。可能你无法访问brave官方网站， 那么你需要VPN啦！</p>
<p>推荐一款比较小众的浏览器是 <a href="https://qutebrowser.org/">qutebrowser</a>，基本可以实现全程快捷键操作。教程请参考自己写的 <a href="https://seanchristspc.github.io/2022/02/20/Qutebrowser/">qutebrowser blog</a>。是基于 QtWebEngine，而 QtWebEngine 是基于 Chromium的，所以 qutebrowser 支持 Chromium 内核。 另外一款和 qutebrowser 类似的是 <a href="https://fanglingsu.github.io/vimb/">vimb</a>。</p>
<h3 id="截图软件">截图软件</h3>
<p><a href="https://flameshot.org/">Flameshot</a>: 除了系统自带的截图快捷键，最值得推荐的linux截图软件就是<strong>Flameshot</strong>。 看了一下官网，现在已经支持windows，Linux，MacOS啦！ <img data-src="/2021/07/23/Recommend-Softwares/Flameshot.gif" alt="Flamshot Usage"></p>
<h3 id="画图软件">画图软件</h3>
<p><a href="http://https://inkscape.org">Inkscape</a>: 当前<strong>Inkscape</strong>已经更新到1.1版本。有许多新的特点。同样支持 Linux，Windows,macOS。 我主要用 <strong>Inkscape</strong> 来画论文中的图,对于论文中标注的公式或符号可以使用inkscape的 <strong>Latex</strong>功能，可以很方便的输入公式。 特色功能丰富，自己探索吧！ <img data-src="/2021/07/23/Recommend-Softwares/inkscape.png" alt="Inkscape"></p>
<h3 id="修图软件">修图软件</h3>
<p><a href="http://https://www.gimp.org">Gimp</a>: 修图可以用PS（Photoshop），当然可以用GIMP,今天访问 <strong>GIMP</strong> 官网，发现GIMP已经历了25年啦！ 同样支持 Linux,Windows,macOS。只要你用的熟练，依旧可以与PS相媲美。 <img data-src="/2021/07/23/Recommend-Softwares/Gimp.png" alt="Gimp"></p>
<h3 id="视频处理软件">视频处理软件</h3>
<p><a href="https://handbrake.fr/">Handshake</a>: 主要用于视频的格式转换，视频的压缩，由于是图形界面，使用还是挺简单的。依旧是全平台软件。 <img data-src="/2021/07/23/Recommend-Softwares/handshake.png" alt="Handshake"></p>
<p><a href="http://https://ffmpeg.org">ffmpeg</a>: 无论是视频转换格式，还是剪切视频，还是合并视频，提取声音，合并声音和视频，基本上所有的关于 视频处理都可以使用 <strong>ffmpeg</strong>。其他的一些视频处理软件，基本都使用了ffmpeg。使用命令行的ffmpeg,有点麻烦。不过ffmpeg依旧优秀。 当然你也可以用他截图或录屏。功能十分强大。你也可以使用它的配套命令<code>ffplay</code>,播放视频;查看视频文件信息，也可以使用<code>ffprobe</code>命令。 <img data-src="/2021/07/23/Recommend-Softwares/ffmpeg.png" alt="ffmpeg"></p>
<h3 id="相册管理软件">相册管理软件</h3>
<p><a href="http://https://www.darktable.org">darktable</a>:darktable是一个不错的图片管理软件。该图片管理软件主要针对你用相机拍摄图片的管理， 可以简单的修改，加滤镜，修改元信息等。界面也较为美观。该软件也是全平台软件（Linux,Windows,macOS）。 <img data-src="/2021/07/23/Recommend-Softwares/darktable.png" alt="darktable"></p>
<h3 id="录屏软件">录屏软件</h3>
<p><a href="https://www.maartenbaert.be/simplescreenrecorder/">SSR</a>: simplescreenrecorder看着参数特别多，但是使用还是特别方便的。 <img data-src="/2021/07/23/Recommend-Softwares/ssr.png" alt="Simpe screen recorder"></p>
<p><a href="https://obsproject.com/">OBS</a>: 当然录屏软件，怎么能少了 <strong>OBS Studio</strong> 呢？可以录屏，也可以用于直播，不错的软件。 <img data-src="/2021/07/23/Recommend-Softwares/obs.png" alt="OBS Studio"></p>
<h3 id="文献管理软件">文献管理软件</h3>
<p><a href="http://https://www.zotero.org">Zotero</a>: Zotero文献管理软件依旧强大。没使用过其他的参考文献管理软件，不做评论。我可以说的 是Zotero配合浏览器Zotero插件,可以快捷方便的下载文献，自己导入到Zotero中。 可以配合MS word 的zotero的插件，相当方便的插入 <strong>参考文献</strong>,参考文献的索引号会自动更新，解放你参考文献的烦恼。简单方便，同时可以安装Zotero插件，来增强Zotero功能。例如安装 <a href="https://github.com/eschnett/zotero-citationcounts">zotero-citationcounts</a>，可以快速更新文献的被引用数。 <img data-src="/2021/07/23/Recommend-Softwares/zotero.png" alt="Zotero"></p>
<p><a href="https://www.docear.org">Docear</a>: <strong>Docear</strong>(The Academic Literature Suite),也是文献管理软件，同时也可以做思维导图。不仅可以 插入图片，还可以插入 <strong>latex 公式</strong>,简直太舒服了。还可以设置文件超链接。简直就是文献管理全家桶。不过该项目已经太久没更新，维护了。 且该软件依托于 <strong>jdk8</strong>,其他更高版本的jdk无法使用。对于要写文献综述，该文献管理软件可以提升你的效率。有个缺点，界面有点复古， 不够现代化！哈哈哈！ <img data-src="/2021/07/23/Recommend-Softwares/docear.png" alt="Docear"></p>
<p>上述两款文献管理软件可以结合使用，都是全平台软件。</p>
<h3 id="文本编辑软件">文本编辑软件</h3>
<p><a href="http://https://www.vim.org">Vim</a>: Vim文本编辑器，依旧强大。有学习门槛和学习成本。现在我使用文本编辑大部分时间被vim占有， 我姑且称为超级记事本。学习教程可以参考<a href="https://seanchristspc.github.io/2018/03/19/Linux_Introduction/">Linux简单教程</a>中的 <strong>vim</strong>部分。 Vim中尤其爱使用<strong>snippet</strong>功能,可以试试。 <img data-src="/2021/07/23/Recommend-Softwares/vim.png" alt="VIM"></p>
<p><a href="https://www.sublimetext.com/">Sublime</a>: Sublime Text 也是不错的超级记事本。这个和Vim相比，学习成本较低，基本开箱即用。依旧是优秀 的文本编辑器。写一些脚本，或一些简单的程序，依旧可以使用它。这个是需要付费的，如果不购买，偶尔会提醒你需要订阅该软件，提醒频率 不高，有闲钱就买一个，没闲钱，提醒时，把提醒框关掉就行了。 <img data-src="/2021/07/23/Recommend-Softwares/sublime.png" alt="Sublime text 4"></p>
<p><strong>两款文本编辑软件也是全平台软件。</strong> 至于VSCode,目前没使用过，不做评论。</p>
<h3 id="磁盘分析软件">磁盘分析软件</h3>
<p><a href="https://help.gnome.org/users/baobab/3.24/">Disk Usage Analyzer</a>: 该磁盘分析软件是相当不错的。对于我这种希望手动删除不需要的文件， 手动分析各文件在磁盘的占有率，使用该软件清理磁盘空间是一个不错的选择。该软件还有一个名字： <a href="https://gitlab.gnome.org/GNOME/baobab"><strong>baobab</strong></a>. 命令行使用<code>baobab</code>运行该软件。 <img data-src="/2021/07/23/Recommend-Softwares/diskAnalyzer.png" alt="Disk Analyzer"></p>
<h3 id="下载文件软件">下载文件软件</h3>
<p><a href="https://www.freedownloadmanager.org">FreeDownLoad</a>: 该软件作为自己的默认下载器，可以开启多线程下载，提升自己的下载速度。全平台软件。 <img data-src="/2021/07/23/Recommend-Softwares/freeDownload.png" alt="free Download manager"></p>
<h3 id="字典软件">字典软件</h3>
<p><a href="http://goldendict.org/">Goldendict</a>: 字典查询软件。需要自己添加符合格式的字典库文件。该字典查询软件既可以使用自己的字典库查询， 也可以使用在线查询，需要添加在线查询网址，想当与浏览器查询字典。该字典查询软件有个快捷使用方式。你先用鼠标选中你需要查询的单词， 然后连续两次<code>Ctrl+C</code>，可以弹出一个查询结果对话框。快捷查询单词，但是无法翻译文章，仅仅用于作为字典，还是相当有用的。 <img data-src="/2021/07/23/Recommend-Softwares/goldendict.png" alt="goldendict"></p>
<h3 id="终端扩展软件">终端扩展软件</h3>
<p><a href="https://www.zsh.org/">Zsh</a>: zsh是一个shell。Linux常规默认的shell是Bash。为了更高效的使用的Terminal，可以使用zsh， 可以提高输入命令的速度。对于一个已经使用Linux多年的菜鸟，最近发现自己使用 <strong>Terminal</strong>的频率比较频繁。闲下来想想， 是时候提升自己使用Terminal的效率了。回想起以前听过的<code>zsh</code>，就试试它吧！至于安装 <code>sudo apt install zsh</code>,还是挺方便的。 如果不配置，直接这样使用zsh,是感觉不出差别的。和zsh配套的配置框架有许多。我使用了网上介绍最多的 <a href="https://ohmyz.sh/">Oh My zsh</a>, 这个折腾比较简单，方便。安装zsh并配置后，使用终端的效率大幅提升。</p>
<p>但是，对于Oh My zsh配置框架,当使用的插件较多时，速度就会变慢许多，使用越多的zsh插件，速度越慢。为了解决插件多， zsh速度变慢的问题，可以使用原生的zsh和 <a href="https://github.com/zdharma/zinit">zinit</a>。zinit相当与zsh的插件管理软件。 这样速度提升了。使用大量zsh插件，也不会卡顿。</p>
<p><strong>zsh</strong>也是最近才发现的，感觉相见恨晚。这么优秀的shell,真该早点使用。不过，在你使用一段时间的bash后，再使用zsh, 确实感觉舒服多了，好像任督二脉被打通了一样。</p>
<h3 id="排版软件">排版软件</h3>
<p><a href="http://tug.org/texlive/">TexLive</a>: 排版软件是相当不错的，很好的支持数学公式。和word相比，word是所见即所得的排版软件， 但是Tex不是，需要先编写代码，再编译，然后生成Pdf文件。这样说起来，比Word复杂多了。你的直觉是对的。但是随着你文档的内容的不断增加， 使用word修改文章是很消耗时间，word排版的时间和你的内容量基本成超线性关系，但是使用Tex排版，内容量和排版时间基本线性关系。 如果你是一篇小文档，用word或WPS都挺OK的，但是如果文档内容过多，推荐使用Tex。对于交叉引用特别多的文档，使用Tex不失为一种较好的选择。 你可以去<a href="https://mirrors.tuna.tsinghua.edu.cn/">清华镜像源</a>下载 <strong>TexLive</strong>安装文件。 <img data-src="/2021/07/23/Recommend-Softwares/tex.png" alt="Tex"></p>
<h3 id="终端互连软件">终端互连软件</h3>
<p><a href="https://kdeconnect.kde.org/">KDE Connect</a>: 各个终端(手机，电脑)互联的软件，对于文件的分享，剪贴板的共享是相当不错的。而且也支持 电脑与电脑之间的互联，手机与手机之间的互联。KDE 桌面的用户直接使用 <strong>KDE Connect</strong>即可，对于Gnome桌面的用户，可以使用Gnome的扩展 <a href="https://extensions.gnome.org/extension/1319/gsconnect/">GSConnect</a>，<strong>GSConnect</strong>完全实现了 <strong>KDE Connect</strong>的功能，在Gnome桌面 运行良好。macOS也有对应的应用程序<a href="https://binary-factory.kde.org/view/MacOS/job/kdeconnect-kde_Nightly_macos/">macOS Download</a>, 对于iOS目前还在测试阶段，不是特别稳定，可以参考<a href="https://kdeconnect.kde.org/download.html">iOS KDE Connect</a>。Windows平台可以通过 <strong>Microsoft Store</strong> 安装，对于Win7用户没有 <strong>Microsoft Store</strong>,可以通过<a href="https://download.kde.org/unstable/kdeconnect/win64-pre-20.08/">离线安装</a>. Andriod在国内的主流应用商店都没有对应的软件，可以访问 <a href="https://f-droid.org/packages/org.kde.kdeconnect_tp/">F-driod</a>,直接下载对 应的kde apk文件。</p>
<p>用于多设备之间的文件分享还是挺不错的,文件传输速度取决于路由器和两个互联设备的网络性能，10M/s是可以达到的。该软件的使用有一个前提， 就是所有设备处在同一个局域网下才能相互连接。简单的来说，需要你的设备连接同一个WIFI，或路由器。官方的对该软件的解释如下：</p>
<blockquote>
<p>Enabling communication between all your devices. Made for people like you.</p>
</blockquote>
<figure>
<img data-src="/2021/07/23/Recommend-Softwares/GSConnect.png" alt><figcaption>GSConnect</figcaption>
</figure>
<p>我在使用GSConnect的时候，由于防火墙端口没有开放，导致无法发现其他设备。 <a href="https://userbase.kde.org/KDEConnect#I_have_two_devices_running_KDE_Connect_on_the_same_network.2C_but_they_can.27t_see_each_other">参考教程</a></p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=1714-1764/tcp</span><br><span class="line">sudo firewall-cmd --zone=public --permanent --add-port=1714-1764/udp</span><br><span class="line">sudo systemctl restart firewalld.service</span><br></pre></td></tr></table></figure>
<p><a href="https://userbase.kde.org/KDEConnect">KDE 帮助文档</a></p>
<hr>
<h2 id="windows-平台">Windows 平台</h2>
<p>Windows平台，目前PC生态系统最完善的平台，能使用的软件也颇多。基本软件厂商都会适配Windows系统，毕竟Windows在这个地球村上， 使用的人数的目前排第一(PC领域)。软件厂商不可能抛弃这么大的用户群体。由于我在windows上使用时间不多，所以没有Linux推荐的软件那么多， 基本会和Linux推荐的软件一样。</p>
<hr>
<h3 id="视频播放软件-1">视频播放软件</h3>
<p>我依旧推荐 <strong>VLC</strong>播放器。当然也可以使用 <a href="https://potplayer.daum.net/"><strong>potplayer</strong></a>。</p>
<h3 id="pdf软件-1">pdf软件</h3>
<p>首推 <strong>Adobe Acrobat Pro DC</strong>,无论是阅读还是修改pdf文件，该款Adobe的Pdf处理软件都能从容应对。</p>
<p>也推荐 <a href="https://www.tracker-software.com/"><strong>PDF—XChange Views</strong></a>也是一款不错的pdf软件。可以自己定义自己界面的配色，同时标注类型特别丰富。 使用顺滑，使用配合自定义快捷键，可以快速的使用该PDF阅读器。 <img data-src="/2021/07/23/Recommend-Softwares/PdfXChange.png" alt="PDF-XChange Views"></p>
<p><a href="https://www.sumatrapdfreader.org/free-pdf-reader">Sumatra PDF</a>:如果你追求像Linux pdf的的zathura一样简洁， windows平台的<strong>Sumatra</strong>可能是你喜欢的菜。 <img data-src="/2021/07/23/Recommend-Softwares/sumatra.png" alt="Sumatra PDF"></p>
<h3 id="浏览器软件-1">浏览器软件</h3>
<p>浏览器软件和Linux推荐的浏览器软件相同 <strong>Firefox或Brave</strong>，请参考前面Linux浏览器软件部分。但对于 qutebrowser 可以在 windows 上使用，但是好像安装要复杂一点。</p>
<h3 id="截图软件-1">截图软件</h3>
<p>除了Linux推荐的 <strong>Flameshot</strong>，也可以使用 <strong>Snipaste</strong>。可以去微软应用商店搜索 <strong>snipaste</strong>,并安装截图软件。</p>
<h3 id="画图软件-1">画图软件</h3>
<p>画图软件依旧推荐<strong>Inkscape</strong>，当然你也可以使用微软的<strong>Visio</strong>。不过个人更喜欢使用 <strong>Inkscape</strong>。 当然，配合Word使用，还是Visio更方便。</p>
<h3 id="修图软件-1">修图软件</h3>
<p>修图软件依旧和Linux推荐的应用程序一样，25岁的 <strong>GIMP</strong>。</p>
<h3 id="视频处理软件-1">视频处理软件</h3>
<p>依旧推荐 <strong>Handshake</strong>和 <strong>ffmpeg</strong>。</p>
<h3 id="相册管理软件-1">相册管理软件</h3>
<p>相册管理软件依旧 <strong>darktable</strong>。</p>
<h3 id="录屏软件-1">录屏软件</h3>
<p>windows录屏软件就使用 <strong>OBS Studio</strong>吧！</p>
<h3 id="文献管理软件-1">文献管理软件</h3>
<p>既然Zotero和Docear是全平台软件，那么和Linux一样。 <strong>Zotero和Docear</strong> Yes!</p>
<h3 id="文本编辑软件-1">文本编辑软件</h3>
<p>Windows平台就使用 <strong>Sublime Text</strong>软件。</p>
<h3 id="磁盘分析软件-1">磁盘分析软件</h3>
<p><a href="http://www.uderzo.it/main_products/space_sniffer/">SpaceSniffer</a>: 磁盘分析软件是一款轻量小巧的软件。大概只有3M大小。 <img data-src="/2021/07/23/Recommend-Softwares/spaceSniffer.png" alt="SpaceSniffer"></p>
<h3 id="下载文件软件-1">下载文件软件</h3>
<p>windows下载软件依旧推荐 <strong>FreeDownloadManager</strong>。</p>
<h3 id="排版软件-1">排版软件</h3>
<p><strong>Word 、TexLive、WPS</strong>。</p>
<h3 id="终端互连软件-1">终端互连软件</h3>
<p><a href="https://kdeconnect.kde.org/">KDE Connect</a></p>
<hr>
<h2 id="备注">备注</h2>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please email to me!😜</p>
]]></content>
      <categories>
        <category>Tools</category>
      </categories>
      <tags>
        <tag>Tools</tag>
      </tags>
  </entry>
  <entry>
    <title>Design Pattern by Java</title>
    <url>/2018/02/14/Design-Pattern-Java/</url>
    <content><![CDATA[<h1 id="设计模式">设计模式</h1>
<p>本篇的设计模式记录，主要是参考书籍 《图解设计模式》做的学习记录笔记！ 回想一下，那都是多年以前的事了。最开始每个设计模式 用一片博客记录。最近，突然发现这样有点分散，想了一想，干脆直接整合到一篇博文吧。有点长，但是有目录可以快速定位到具体的设计 模式，也算方便。</p>
<hr>
<h2 id="facade模式">Facade模式</h2>
<p>简单窗口  使用Facade模式可以为相互关联在一起的错中复杂的类整理出高层的接口。其中的Facade角色可以让系统对外只有一个简单的接口。</p>
<hr>
<h3 id="演示程序类图">演示程序类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Facade_Design_Pattern.png" alt><figcaption>Facade模式</figcaption>
</figure>
<hr>
<h3 id="代码">代码</h3>
<h4 id="database类">Database类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Facade.pagemaker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileInputStream;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Database</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">Database</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//防止外部new出Database对象，所以声明为private</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> Properties <span class="title">getProperties</span><span class="params">(String dbname)</span></span>&#123;</span><br><span class="line">		String filename=dbname+<span class="string">&quot;.txt&quot;</span>;</span><br><span class="line">		Properties prop=<span class="keyword">new</span> Properties();</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			prop.load(<span class="keyword">new</span> FileInputStream(<span class="string">&quot;/home/sean/Documents/&quot;</span>+filename));</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> prop;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="htmlwriter类">HtmlWriter类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Facade.pagemaker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.io.Writer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">HtmlWriter</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Writer writer;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">HtmlWriter</span><span class="params">(Writer writer)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.writer=writer;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">title</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">		<span class="comment">//输出标题</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;html&gt;&quot;</span>);</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;head&gt;&quot;</span>);</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;title&gt;&quot;</span>+title+<span class="string">&quot;&lt;/title&gt;&quot;</span>);</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;/head&gt;&quot;</span>);</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;body&gt;\n&quot;</span>);</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;h1&gt;&quot;</span>+title+<span class="string">&quot;&lt;/h1&gt;&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paragraph</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">		<span class="comment">//输出段落</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;p&gt;&quot;</span>+msg+<span class="string">&quot;&lt;/p&gt;&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">link</span><span class="params">(String href,String caption)</span></span>&#123;</span><br><span class="line">		<span class="comment">//输出超链接</span></span><br><span class="line">		paragraph(<span class="string">&quot;&lt;a href=\&quot;&quot;</span> +href +<span class="string">&quot;\&quot;&gt;&quot;</span>+caption+<span class="string">&quot;&lt;/a&gt;&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mailto</span><span class="params">(String mailaddr,String username)</span></span>&#123;</span><br><span class="line">		<span class="comment">//输出邮件地址</span></span><br><span class="line">		link(<span class="string">&quot;mailto:&quot;</span>+mailaddr,username);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//结束输出html</span></span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;/body&gt;&quot;</span>);</span><br><span class="line">			writer.write(<span class="string">&quot;&lt;/html&gt;\n&quot;</span>);</span><br><span class="line">			writer.close();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="pagemaker类">PageMaker类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Facade.pagemaker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.io.FileWriter;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"><span class="keyword">import</span> java.util.Properties;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PageMaker</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">PageMaker</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="comment">//防止外部new出PageMaker实例，所以声明为private方法</span></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">makeWelcomePage</span><span class="params">(String mailaddr,String filename)</span></span>&#123;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			Properties mailprop=Database.getProperties(<span class="string">&quot;maildata&quot;</span>);</span><br><span class="line">			String username=mailprop.getProperty(mailaddr);</span><br><span class="line">			HtmlWriter writer=<span class="keyword">new</span> HtmlWriter(<span class="keyword">new</span> FileWriter(<span class="string">&quot;/home/sean/Documents/&quot;</span>+filename));</span><br><span class="line">			writer.title(<span class="string">&quot;Welcome to &quot;</span>+username+<span class="string">&quot;&#x27;s page!&quot;</span>);</span><br><span class="line">			writer.paragraph(username+<span class="string">&quot;欢迎到来&quot;</span>+username+<span class="string">&quot;的主页。&quot;</span>);</span><br><span class="line">			writer.paragraph(<span class="string">&quot;等你的邮件喔！&quot;</span>);</span><br><span class="line">			writer.mailto(mailaddr, username);</span><br><span class="line">			writer.close();</span><br><span class="line">			System.out.println(filename+<span class="string">&quot;is created for &quot;</span>+mailaddr +<span class="string">&quot; (&quot;</span>+username+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main类">Main类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Facade;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.Facade.pagemaker.PageMaker;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		PageMaker.makeWelcomePage(<span class="string">&quot;seanchristspc@gmail.com&quot;</span>, <span class="string">&quot;welcome.html&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h3 id="要点">要点</h3>
<h4 id="facade窗口">Facade(窗口)</h4>
<p>Facade角色向系统外部提供高层接口。在实例程序中由<strong>PageMaker</strong>扮演此角色。</p>
<h4 id="构成系统的许多其他角色">构成系统的许多其他角色</h4>
<p>这些角色各自完成自己的工作，他们并不知道Facade角色。Facade角色调用其他角色进行工作，但是其他角色不会调用Facade角色。代码中 <strong>Database</strong>和<strong>HtmlWriter</strong>扮演其他角色。</p>
<h4 id="client">Client</h4>
<p>Client角色负责调用Facade角色</p>
<hr>
<h3 id="个人理解">个人理解</h3>
<p>Facade模式就是把复杂的系统变<strong>看起来</strong>简单。所谓看起来简单就是指在编写代码的时候还是挺复杂的，只是在使用某个功能是对外的接口比较少而且明确。 该模式还是挺好理解的，代码也不复杂。</p>
<hr>
<h2 id="mediator模式">Mediator模式</h2>
<p>只有一个仲裁者  要调用多个对象之间的关系时，就需要使用Mediator模式。将控制的逻辑处理交给仲裁者。</p>
<hr>
<h3 id="类和接口表">类和接口表</h3>
<table>
<thead>
<tr class="header">
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Mediator</td>
<td>定义 "仲裁者" 的接口(API)的接口</td>
</tr>
<tr class="even">
<td>Colleague</td>
<td>定义"组员"的接口(API)的接口</td>
</tr>
<tr class="odd">
<td>ColleagueButton</td>
<td>表示按钮的类。它实现Colleague接口</td>
</tr>
<tr class="even">
<td>ColleagueTextField</td>
<td>表示文本输入框的类。它实现了Colleague接口</td>
</tr>
<tr class="odd">
<td>ColleagueCheckbox</td>
<td>表示勾选框的类。实现了Colleague接口</td>
</tr>
<tr class="even">
<td>LoginFrame</td>
<td>表示登录对话框类。实现了Mediator接口</td>
</tr>
<tr class="odd">
<td>Main</td>
<td>测试程序行为的类</td>
</tr>
</tbody>
</table>
<h3 id="程序的类图">程序的类图</h3>
<p>有点复杂喔！ 不急。慢慢看！！ <img data-src="/2018/02/14/Design-Pattern-Java/Mediator_Design_Pattern.png" alt="Mediator模式"></p>
<h3 id="代码-1">代码</h3>
<h4 id="colleague接口组员接口">Colleague接口(组员接口)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setColleagueEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="mediator接口仲裁者接口">Mediator接口(仲裁者接口)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">	<span class="comment">//生成Mediator要管理的组员.</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">createColleagues</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="comment">//被各个Colleague组员调用，让组员向仲裁者进行报告</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">colleagueChanged</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="colleaguebutton具体的组员">ColleagueButton(具体的组员)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.HeadlessException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColleagueButton</span> <span class="keyword">extends</span> <span class="title">Button</span> <span class="keyword">implements</span> <span class="title">Colleague</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Mediator mediator;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ColleagueButton</span><span class="params">(String caption)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(caption);</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//保存Mediator</span></span><br><span class="line">		<span class="keyword">this</span>.mediator=mediator;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleagueEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//Mediator下达启用禁用的指示</span></span><br><span class="line">		setEnabled(enabled);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="colleaguecheckbox具体的组员">ColleagueCheckbox(具体的组员)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Checkbox;</span><br><span class="line"><span class="keyword">import</span> java.awt.CheckboxGroup;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ItemListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColleagueCheckbox</span> <span class="keyword">extends</span> <span class="title">Checkbox</span> <span class="keyword">implements</span> <span class="title">Colleague</span>,</span></span><br><span class="line"><span class="class">		<span class="title">ItemListener</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Mediator mediator;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ColleagueCheckbox</span><span class="params">(String caption,CheckboxGroup group,<span class="keyword">boolean</span> state)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(caption,group,state);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">itemStateChanged</span><span class="params">(ItemEvent e)</span> </span>&#123;</span><br><span class="line">		mediator.colleagueChanged();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mediator=mediator;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleagueEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">		setEnabled(enabled);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="colleaguetextfield具体的组员">ColleagueTextField(具体的组员)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.TextField;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.TextEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.TextListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">ColleagueTextField</span> <span class="keyword">extends</span> <span class="title">TextField</span> <span class="keyword">implements</span> <span class="title">Colleague</span>,</span></span><br><span class="line"><span class="class">		<span class="title">TextListener</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Mediator mediator;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">ColleagueTextField</span><span class="params">(String text,<span class="keyword">int</span> columns)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(text,columns);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">textValueChanged</span><span class="params">(TextEvent e)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//文字发生变化时通知Mediator</span></span><br><span class="line">		mediator.colleagueChanged();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setMediator</span><span class="params">(Mediator mediator)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.mediator=mediator;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setColleagueEnabled</span><span class="params">(<span class="keyword">boolean</span> enabled)</span> </span>&#123;</span><br><span class="line">		setEnabled(enabled);</span><br><span class="line">		setBackground(enabled ? Color.white : Color.lightGray);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="loginframe具体的仲裁者">LoginFrame(具体的仲裁者)</h4>
<p>代码有点多加油看看！ <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.CheckboxGroup;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.GridLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Label;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">LoginFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span>, <span class="title">Mediator</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ColleagueCheckbox checkGuest;</span><br><span class="line">	<span class="keyword">private</span> ColleagueCheckbox checkLogin;</span><br><span class="line">	<span class="keyword">private</span> ColleagueTextField textUser;</span><br><span class="line">	<span class="keyword">private</span> ColleagueTextField textPass;</span><br><span class="line">	<span class="keyword">private</span> ColleagueButton buttonOK;</span><br><span class="line">	<span class="keyword">private</span> ColleagueButton buttonCancle;</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="comment">//生成并配置各个Colleague后，显示对话框</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">LoginFrame</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(title);</span><br><span class="line">		setBackground(Color.lightGray);</span><br><span class="line">		<span class="comment">//使用布局管理器生成4×2窗格</span></span><br><span class="line">		setLayout(<span class="keyword">new</span> GridLayout(<span class="number">4</span>,<span class="number">2</span>));</span><br><span class="line">		<span class="comment">//生成各个Colleague</span></span><br><span class="line">		createColleagues();</span><br><span class="line">		add(checkGuest);</span><br><span class="line">		add(checkLogin);</span><br><span class="line">		add(<span class="keyword">new</span> Label(<span class="string">&quot;username&quot;</span>));</span><br><span class="line">		add(textUser);</span><br><span class="line">		add(<span class="keyword">new</span> Label(<span class="string">&quot;Password&quot;</span>));</span><br><span class="line">		add(textPass);</span><br><span class="line">		add(buttonOK);</span><br><span class="line">		add(buttonCancle);</span><br><span class="line">		<span class="comment">//设置初始的启用/禁用状态</span></span><br><span class="line">		colleagueChanged();</span><br><span class="line">		<span class="comment">//显示</span></span><br><span class="line">		pack();</span><br><span class="line">		show();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">createColleagues</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">//生成各个Colleague</span></span><br><span class="line">		CheckboxGroup g= <span class="keyword">new</span> CheckboxGroup();</span><br><span class="line">		checkGuest = <span class="keyword">new</span> ColleagueCheckbox(<span class="string">&quot;Guest&quot;</span>,g,<span class="keyword">true</span>);</span><br><span class="line">		checkLogin = <span class="keyword">new</span> ColleagueCheckbox(<span class="string">&quot;Login&quot;</span>,g,<span class="keyword">false</span>);</span><br><span class="line">		textUser = <span class="keyword">new</span> ColleagueTextField(<span class="string">&quot;&quot;</span>,<span class="number">10</span>);</span><br><span class="line">		textPass = <span class="keyword">new</span> ColleagueTextField(<span class="string">&quot;&quot;</span>,<span class="number">10</span>);</span><br><span class="line">		textPass.setEchoChar(<span class="string">&#x27;*&#x27;</span>);</span><br><span class="line">		buttonOK = <span class="keyword">new</span> ColleagueButton(<span class="string">&quot;OK&quot;</span>);</span><br><span class="line">		buttonCancle = <span class="keyword">new</span> ColleagueButton(<span class="string">&quot;Cancle&quot;</span>);</span><br><span class="line">		<span class="comment">//设置Mediator</span></span><br><span class="line">		checkGuest.setMediator(<span class="keyword">this</span>);</span><br><span class="line">		checkLogin.setMediator(<span class="keyword">this</span>);</span><br><span class="line">		textUser.setMediator(<span class="keyword">this</span>);</span><br><span class="line">		textPass.setMediator(<span class="keyword">this</span>);</span><br><span class="line">		buttonOK.setMediator(<span class="keyword">this</span>);</span><br><span class="line">		buttonCancle.setMediator(<span class="keyword">this</span>);</span><br><span class="line">		<span class="comment">//设置Listener</span></span><br><span class="line">		checkGuest.addItemListener(checkGuest);</span><br><span class="line">		checkLogin.addItemListener(checkLogin);</span><br><span class="line">		textUser.addTextListener(textUser);</span><br><span class="line">		textPass.addTextListener(textPass);</span><br><span class="line">		buttonOK.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">		buttonCancle.addActionListener(<span class="keyword">this</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">colleagueChanged</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(checkGuest.getState())&#123;</span><br><span class="line">			textUser.setColleagueEnabled(<span class="keyword">false</span>);</span><br><span class="line">			textPass.setColleagueEnabled(<span class="keyword">false</span>);</span><br><span class="line">			buttonOK.setColleagueEnabled(<span class="keyword">true</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			textUser.setColleagueEnabled(<span class="keyword">true</span>);</span><br><span class="line">			userpassChanged();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">userpassChanged</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(textUser.getText().length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">			textPass.setColleagueEnabled(<span class="keyword">true</span>);</span><br><span class="line">			<span class="keyword">if</span>(textPass.getText().length()&gt;<span class="number">0</span>)&#123;</span><br><span class="line">				buttonOK.setColleagueEnabled(<span class="keyword">true</span>);</span><br><span class="line">			&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">				buttonOK.setColleagueEnabled(<span class="keyword">false</span>);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			textPass.setColleagueEnabled(<span class="keyword">false</span>);</span><br><span class="line">			buttonOK.setColleagueEnabled(<span class="keyword">false</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">		System.out.println(e.toString());</span><br><span class="line">		System.exit(<span class="number">0</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h4 id="主函数-调用者-客户">主函数 调用者 客户</h4>
<p>代码比较少！放松！放松！放松！ <figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Mediator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		LoginFrame lf=<span class="keyword">new</span> LoginFrame(<span class="string">&quot;Mediator Sample&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure></p>
<h3 id="个人理解-1">个人理解</h3>
<p>Mediator模式就如同在一个集体中需要一个管理者，没管理者就是一团乱麻！有管理者，能让程序有序的进行！虽然我们崇尚自由！但是没有管理的世界更可怕！生活中需要管理者，程序中也需要管理者！程序来源于生活。</p>
<hr>
<h2 id="command模式">Command模式</h2>
<p>命令也是类</p>
<hr>
<h3 id="类表">类表</h3>
<table>
<thead>
<tr class="header">
<th>包</th>
<th>类名</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>command</td>
<td>Command</td>
<td>表示<strong>命令</strong>的接口</td>
</tr>
<tr class="even">
<td>command</td>
<td>MacroCommand</td>
<td>表示 <strong>由多条命令整合成的命令</strong> 的类</td>
</tr>
<tr class="odd">
<td>drawer</td>
<td>DrawCommand</td>
<td>表示 <strong>绘制一个点的命令</strong> 的类</td>
</tr>
<tr class="even">
<td>drawer</td>
<td>Drawable</td>
<td>表示 <strong>绘制对象</strong> 的接口</td>
</tr>
<tr class="odd">
<td>drawer</td>
<td>DrawCanvas</td>
<td>实现 <strong>绘制对象</strong> 的类</td>
</tr>
<tr class="even">
<td>无名</td>
<td>Main</td>
<td>测试程序行为的类</td>
</tr>
</tbody>
</table>
<h3 id="类图">类图</h3>
<p>粗略一点的 <img data-src="/2018/02/14/Design-Pattern-Java/Command_Design_Pattern_Simple.png" alt="Command"></p>
<p>详细一点 <img data-src="/2018/02/14/Design-Pattern-Java/Command_Design_Pattern_Detail.png" alt="Command"></p>
<h3 id="code">code</h3>
<h4 id="command">Command</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Command.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span></span>; </span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="macrocommand">MacroCommand</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Command.command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.Stack;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">MacroCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Stack commands = <span class="keyword">new</span> Stack();</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		Iterator it=commands.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			((Command)it.next()).execute();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">append</span><span class="params">(Command command)</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(command != <span class="keyword">this</span>)&#123;</span><br><span class="line">			commands.push(command);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除最后一条命令</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">undo</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(!commands.empty())&#123;</span><br><span class="line">			commands.pop();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//删除所有命令</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">clear</span><span class="params">()</span></span>&#123;</span><br><span class="line">		commands.clear();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="drawable">Drawable</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Command.drawer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x,<span class="keyword">int</span> y)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="drawcanvas">DrawCanvas</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Command.drawer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Canvas;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Graphics;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.Command.command.MacroCommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawCanvas</span> <span class="keyword">extends</span> <span class="title">Canvas</span> <span class="keyword">implements</span> <span class="title">Drawable</span> </span>&#123;</span><br><span class="line">	<span class="comment">//颜色</span></span><br><span class="line">	<span class="keyword">private</span> Color color =Color.red;</span><br><span class="line">	<span class="comment">//绘制圆点半径</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> radius=<span class="number">6</span>;</span><br><span class="line">	<span class="comment">//命令的历史记录</span></span><br><span class="line">	<span class="keyword">private</span> MacroCommand history;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DrawCanvas</span><span class="params">(<span class="keyword">int</span> width,<span class="keyword">int</span> height,MacroCommand history)</span></span>&#123;</span><br><span class="line">		setSize(width, height);</span><br><span class="line">		setBackground(Color.WHITE);</span><br><span class="line">		<span class="keyword">this</span>.history=history;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//重新全部绘制</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">paint</span><span class="params">(Graphics g)</span></span>&#123;</span><br><span class="line">		history.execute();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">draw</span><span class="params">(<span class="keyword">int</span> x, <span class="keyword">int</span> y)</span> </span>&#123;</span><br><span class="line">		Graphics g=getGraphics();</span><br><span class="line">		g.setColor(color);</span><br><span class="line">		g.fillOval(x-radius, y-radius, radius*<span class="number">2</span>, radius*<span class="number">2</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="drawcommand">DrawCommand</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Command.drawer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.Point;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.Command.command.Command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DrawCommand</span> <span class="keyword">implements</span> <span class="title">Command</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//绘制对象</span></span><br><span class="line">	<span class="keyword">protected</span> Drawable drawable;</span><br><span class="line">	<span class="comment">//绘制位置</span></span><br><span class="line">	<span class="keyword">private</span> Point position;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">DrawCommand</span><span class="params">(Drawable drawable,Point position )</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.drawable=drawable;</span><br><span class="line">		<span class="keyword">this</span>.position=position;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">execute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		drawable.draw(position.x, position.y);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main">Main</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Command;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.MouseMotionListener;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.WindowListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> javax.swing.Box;</span><br><span class="line"><span class="keyword">import</span> javax.swing.BoxLayout;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JButton;</span><br><span class="line"><span class="keyword">import</span> javax.swing.JFrame;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.Command.command.Command;</span><br><span class="line"><span class="keyword">import</span> com.sean.Command.command.MacroCommand;</span><br><span class="line"><span class="keyword">import</span> com.sean.Command.drawer.DrawCanvas;</span><br><span class="line"><span class="keyword">import</span> com.sean.Command.drawer.DrawCommand;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> <span class="keyword">extends</span> <span class="title">JFrame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span>,</span></span><br><span class="line"><span class="class">		<span class="title">MouseMotionListener</span>, <span class="title">WindowListener</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//绘制的历史记录</span></span><br><span class="line">	<span class="keyword">private</span> MacroCommand history=<span class="keyword">new</span> MacroCommand();</span><br><span class="line">	<span class="comment">//绘制区域</span></span><br><span class="line">	<span class="keyword">private</span> DrawCanvas canvas=<span class="keyword">new</span> DrawCanvas(<span class="number">400</span>,<span class="number">400</span>,history);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//删除按钮</span></span><br><span class="line">	<span class="keyword">private</span> JButton clearButton=<span class="keyword">new</span> JButton(<span class="string">&quot;clear&quot;</span>);</span><br><span class="line">	</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Main</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(title);</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">this</span>.addWindowListener(<span class="keyword">this</span>);</span><br><span class="line">		canvas.addMouseMotionListener(<span class="keyword">this</span>);</span><br><span class="line">		clearButton.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">		</span><br><span class="line">		Box buttonBox=<span class="keyword">new</span> Box(BoxLayout.X_AXIS);</span><br><span class="line">		buttonBox.add(clearButton);</span><br><span class="line">		Box mainBox=<span class="keyword">new</span> Box(BoxLayout.Y_AXIS);</span><br><span class="line">		</span><br><span class="line">		mainBox.add(buttonBox);</span><br><span class="line">		mainBox.add(canvas);</span><br><span class="line">		getContentPane().add(mainBox);</span><br><span class="line">		</span><br><span class="line">		pack();</span><br><span class="line">		show();</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowOpened</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosing</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">		System.exit(<span class="number">0</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowClosed</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowIconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeiconified</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowActivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">windowDeactivated</span><span class="params">(WindowEvent e)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseDragged</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">		Command command=<span class="keyword">new</span> DrawCommand(canvas,e.getPoint());</span><br><span class="line">		history.append(command);</span><br><span class="line">		command.execute();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">mouseMoved</span><span class="params">(MouseEvent e)</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(e.getSource()==clearButton)&#123;</span><br><span class="line">			history.clear();</span><br><span class="line">			canvas.repaint();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span></span>&#123;</span><br><span class="line">		<span class="keyword">new</span> Main(<span class="string">&quot;Command Pattern&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="state模式">State模式</h2>
<p>用类表示状态</p>
<hr>
<h3 id="类图-1">类图</h3>
<p>有点复杂！但只有部分是自己写的，其他是java类库内的类。</p>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/State_Design_Pattern_complex.png" alt><figcaption>State</figcaption>
</figure>
<p>粗略简单一点的类图 <img data-src="/2018/02/14/Design-Pattern-Java/State_Design_Pattern_simple.png" alt="State"></p>
<h3 id="代码-2">代码</h3>
<h4 id="state">State</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">State</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context,<span class="keyword">int</span> hour)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="nightstate具体的状态">NightState(具体的状态)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">NightState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> NightState singleton = <span class="keyword">new</span> NightState();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">NightState</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> State <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> singleton;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(<span class="number">9</span>&lt;=hour || hour&lt;<span class="number">17</span>)&#123;</span><br><span class="line">			context.changeState(DayState.getInstance());</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		context.callSecurityCenter(<span class="string">&quot;紧急！晚上使用金库！&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		context.callSecurityCenter(<span class="string">&quot;按下警铃（晚上）&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		context.callSecurityCenter(<span class="string">&quot;晚上通话录音&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;[晚上]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="daystate具体的状态">DayState(具体的状态)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DayState</span> <span class="keyword">implements</span> <span class="title">State</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> DayState singleton = <span class="keyword">new</span> DayState();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">DayState</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> State <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> singleton;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doClock</span><span class="params">(Context context, <span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(hour&lt;<span class="number">9</span> || <span class="number">17</span>&lt;=hour)&#123;</span><br><span class="line">			context.changeState(NightState.getInstance());</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doUse</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		context.recordLog(<span class="string">&quot;使用金库（白天）&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doAlarm</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		context.callSecurityCenter(<span class="string">&quot;按下警铃（白天）&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">doPhone</span><span class="params">(Context context)</span> </span>&#123;</span><br><span class="line">		context.callSecurityCenter(<span class="string">&quot;正常通话（白天）&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;[白天]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="context">Context</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Context</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setClock</span><span class="params">(<span class="keyword">int</span> hour)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> State <span class="title">changeState</span><span class="params">(State state)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">callSecurityCenter</span><span class="params">(String msg)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">recordLog</span><span class="params">(String msg)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="safeframe">SafeFrame</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.awt.BorderLayout;</span><br><span class="line"><span class="keyword">import</span> java.awt.Button;</span><br><span class="line"><span class="keyword">import</span> java.awt.Color;</span><br><span class="line"><span class="keyword">import</span> java.awt.Frame;</span><br><span class="line"><span class="keyword">import</span> java.awt.Panel;</span><br><span class="line"><span class="keyword">import</span> java.awt.TextArea;</span><br><span class="line"><span class="keyword">import</span> java.awt.TextField;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionEvent;</span><br><span class="line"><span class="keyword">import</span> java.awt.event.ActionListener;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">SafeFrame</span> <span class="keyword">extends</span> <span class="title">Frame</span> <span class="keyword">implements</span> <span class="title">ActionListener</span>, <span class="title">Context</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="keyword">private</span> TextField textClock = <span class="keyword">new</span> TextField(<span class="number">60</span>);</span><br><span class="line">	<span class="keyword">private</span> TextArea textScreen=<span class="keyword">new</span> TextArea(<span class="number">10</span>,<span class="number">60</span>);</span><br><span class="line">	<span class="keyword">private</span> Button buttonUse=<span class="keyword">new</span> Button(<span class="string">&quot;使用金库&quot;</span>);</span><br><span class="line">	<span class="keyword">private</span> Button buttonAlarm=<span class="keyword">new</span> Button(<span class="string">&quot;按下警铃&quot;</span>);</span><br><span class="line">	<span class="keyword">private</span> Button buttonPhone=<span class="keyword">new</span> Button(<span class="string">&quot;正常通话&quot;</span>);</span><br><span class="line">	<span class="keyword">private</span> Button buttonExit=<span class="keyword">new</span> Button(<span class="string">&quot;结束&quot;</span>);</span><br><span class="line">	<span class="keyword">private</span> State state=DayState.getInstance();</span><br><span class="line">	<span class="comment">//构造函数</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">SafeFrame</span><span class="params">(String title)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(title);</span><br><span class="line">		setBackground(Color.lightGray);</span><br><span class="line">		setLayout(<span class="keyword">new</span> BorderLayout());</span><br><span class="line">		<span class="comment">//配置textClock</span></span><br><span class="line">		add(textClock,BorderLayout.NORTH);</span><br><span class="line">		textClock.setEditable(<span class="keyword">false</span>);</span><br><span class="line">		<span class="comment">//配置textScreen</span></span><br><span class="line">		add(textScreen,BorderLayout.CENTER);</span><br><span class="line">		textScreen.setEditable(<span class="keyword">false</span>);</span><br><span class="line">		<span class="comment">//为界面添加按钮</span></span><br><span class="line">		Panel panel=<span class="keyword">new</span> Panel();</span><br><span class="line">		panel.add(buttonUse);</span><br><span class="line">		panel.add(buttonAlarm);</span><br><span class="line">		panel.add(buttonPhone);</span><br><span class="line">		panel.add(buttonExit);</span><br><span class="line">		<span class="comment">//配置界面</span></span><br><span class="line">		add(panel,BorderLayout.SOUTH);</span><br><span class="line">		<span class="comment">//显示</span></span><br><span class="line">		pack();</span><br><span class="line">		show();</span><br><span class="line">		<span class="comment">//设置监听器</span></span><br><span class="line">		buttonUse.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">		buttonAlarm.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">		buttonPhone.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">		buttonExit.addActionListener(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setClock</span><span class="params">(<span class="keyword">int</span> hour)</span> </span>&#123;</span><br><span class="line">		String clockstring=<span class="string">&quot;现在时间是:&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span>(hour&lt;<span class="number">10</span>)&#123;</span><br><span class="line">			clockstring+=<span class="string">&quot;0&quot;</span>+hour+<span class="string">&quot;:00&quot;</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			clockstring+=hour+<span class="string">&quot;:00&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(clockstring);</span><br><span class="line">		textClock.setText(clockstring);</span><br><span class="line">		state.doClock(<span class="keyword">this</span>, hour);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> State <span class="title">changeState</span><span class="params">(State state)</span> </span>&#123;</span><br><span class="line">        System.out.println(<span class="string">&quot;从&quot;</span>+<span class="keyword">this</span>.state+<span class="string">&quot;状态变为了&quot;</span>+state+<span class="string">&quot;状态&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.state=state;	</span><br><span class="line">		<span class="keyword">return</span> state;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">callSecurityCenter</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">		textScreen.append(<span class="string">&quot;Call!&quot;</span>+msg+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">recordLog</span><span class="params">(String msg)</span> </span>&#123;</span><br><span class="line">		textScreen.append(<span class="string">&quot;record ... &quot;</span>+msg+<span class="string">&quot;\n&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">actionPerformed</span><span class="params">(ActionEvent e)</span> </span>&#123;</span><br><span class="line">		System.out.println(e.toString());</span><br><span class="line">		<span class="keyword">if</span>(e.getSource()==buttonUse)&#123;</span><br><span class="line">			state.doUse(<span class="keyword">this</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e.getSource()==buttonAlarm) &#123;</span><br><span class="line">			state.doAlarm(<span class="keyword">this</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e.getSource()==buttonPhone) &#123;</span><br><span class="line">			state.doPhone(<span class="keyword">this</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (e.getSource()== buttonExit) &#123;</span><br><span class="line">			System.exit(<span class="number">0</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> &#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;?&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main-1">Main</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.State;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		SafeFrame frame=<span class="keyword">new</span> SafeFrame(<span class="string">&quot;state module&quot;</span>);</span><br><span class="line">		<span class="keyword">while</span>(<span class="keyword">true</span>)&#123;</span><br><span class="line">			<span class="keyword">for</span>(<span class="keyword">int</span> hour=<span class="number">0</span>;hour&lt;<span class="number">24</span>;hour++)&#123;</span><br><span class="line">				frame.setClock(hour);	<span class="comment">//设置时间</span></span><br><span class="line">				<span class="keyword">try</span>&#123;</span><br><span class="line">					Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">				&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">					e.printStackTrace();</span><br><span class="line">				&#125;</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="要点-1">要点</h3>
<p>采用分而治之方针。 <strong>定义接口，声明抽象方法</strong> <strong>定义多个类，实现具体的方法</strong></p>
<hr>
<h2 id="memento模式">Memento模式</h2>
<p><strong>保存对象状态</strong> ### 类表 | 名字 | 说明 | |--------|--------| | Memento | 表示Gamer状态的类 | | Gamer | 表示游戏主人公的类，他会生成Memento实例 | | Main | 进行游戏的类。他会事先保存Memento的实例，之后会根据需要回复Gamer的状态 |</p>
<h3 id="类图-2">类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Memento_Design_Pattern.png" alt><figcaption>Memento</figcaption>
</figure>
<h3 id="代码-3">代码</h3>
<h4 id="memento类">Memento类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.AbstractFactory.listfactory.ListLink;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Memento</span> </span>&#123;</span><br><span class="line">	<span class="keyword">int</span> money;</span><br><span class="line">	ArrayList fruits;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> money;</span><br><span class="line">	&#125;</span><br><span class="line">	Memento(<span class="keyword">int</span> money)&#123;</span><br><span class="line">		<span class="keyword">this</span>.money=money;</span><br><span class="line">		<span class="keyword">this</span>.fruits=<span class="keyword">new</span> ArrayList();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">void</span> <span class="title">addFruit</span><span class="params">(String fruit)</span></span>&#123;</span><br><span class="line">		fruits.add(fruit);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function">List <span class="title">getFruits</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> (List) fruits.clone();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="gamer类">Gamer类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Gamer</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> money;</span><br><span class="line">	<span class="keyword">private</span> List fruits=<span class="keyword">new</span> ArrayList();</span><br><span class="line">	<span class="keyword">private</span> Random random=<span class="keyword">new</span> Random();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> String[] fruitsname=&#123;<span class="string">&quot;苹果&quot;</span>,<span class="string">&quot;葡萄&quot;</span>,<span class="string">&quot;香蕉&quot;</span>,<span class="string">&quot;橘子&quot;</span>&#125;;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Gamer</span><span class="params">(<span class="keyword">int</span> money)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.money=money;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getMoney</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> money;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">bet</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">int</span> dice = random.nextInt(<span class="number">6</span>)+<span class="number">1</span>;</span><br><span class="line">		<span class="keyword">if</span>(dice==<span class="number">1</span>)&#123;</span><br><span class="line">			money+=<span class="number">100</span>;</span><br><span class="line">			System.out.println(<span class="string">&quot;所持金币增加了。&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (dice==<span class="number">2</span>) &#123;</span><br><span class="line">			money/=<span class="number">2</span>;</span><br><span class="line">			System.out.println(<span class="string">&quot;所持金币减半。&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span> <span class="keyword">if</span> (dice==<span class="number">6</span>) &#123;</span><br><span class="line">			String f=getFruit();</span><br><span class="line">			System.out.println(<span class="string">&quot;获得的水果&quot;</span>+f+<span class="string">&quot;)。&quot;</span>);</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;什么都没发生。&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Memento <span class="title">createMemento</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Memento m=<span class="keyword">new</span> Memento(money);</span><br><span class="line">		Iterator it=fruits.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			String f=(String)it.next();</span><br><span class="line">			<span class="keyword">if</span>(f.startsWith(<span class="string">&quot;好吃的&quot;</span>))&#123;</span><br><span class="line">				m.addFruit(f);</span><br><span class="line">			&#125;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> m;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">restoreMemento</span><span class="params">(Memento memento)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.money=money;</span><br><span class="line">		<span class="keyword">this</span>.fruits=memento.getFruits();</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">toString</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> <span class="string">&quot;[money= &quot;</span>+money+<span class="string">&quot;,fruits= &quot;</span>+fruits+<span class="string">&quot;]&quot;</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">private</span> String <span class="title">getFruit</span><span class="params">()</span></span>&#123; </span><br><span class="line">		String prefix=<span class="string">&quot;&quot;</span>;</span><br><span class="line">		<span class="keyword">if</span>(random.nextBoolean())&#123;</span><br><span class="line">			prefix=<span class="string">&quot;好吃的&quot;</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> prefix+fruitsname[random.nextInt(fruitsname.length)];</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main-2">Main</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Memento;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Gamer gamer=<span class="keyword">new</span> Gamer(<span class="number">100</span>);</span><br><span class="line">		Memento memento=gamer.createMemento();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">100</span>;i++)&#123;</span><br><span class="line">			System.out.println(<span class="string">&quot;========&quot;</span>+i);</span><br><span class="line">			System.out.println(<span class="string">&quot;当前状态：&quot;</span>+gamer);</span><br><span class="line">			gamer.bet(); <span class="comment">//进行游戏</span></span><br><span class="line">			System.out.println(<span class="string">&quot;所持金钱为&quot;</span>+gamer.getMoney()+<span class="string">&quot;元&quot;</span>);</span><br><span class="line">			<span class="keyword">if</span>(gamer.getMoney()&gt;memento.getMoney())&#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;（所持金钱增加许多，因此保存游戏当前状态）&quot;</span>);</span><br><span class="line">				memento=gamer.createMemento();</span><br><span class="line">			&#125;<span class="keyword">else</span> <span class="keyword">if</span> (gamer.getMoney()&lt;memento.getMoney()/<span class="number">2</span>) &#123;</span><br><span class="line">				System.out.println(<span class="string">&quot;（所持金钱减少许多，因此要恢复至以前状态）&quot;</span>);</span><br><span class="line">				gamer.restoreMemento(memento);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				Thread.sleep(<span class="number">100</span>);</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="个人理解-2">个人理解</h3>
<p>Memento模式就是实现对象状态的恢复，而设置的。</p>
<hr>
<h2 id="observe模式">Observe模式</h2>
<p>在Observe模式中，当观察对象的状态发生变化，会通知给观察者。Observe模式适用于根据对象状态进行相应的处理场景。</p>
<hr>
<h3 id="类和接口的表">类和接口的表</h3>
<table>
<thead>
<tr class="header">
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Observer</td>
<td>表示观察者接口</td>
</tr>
<tr class="even">
<td>NumberGenerator</td>
<td>表示生成数值的对象的抽象类</td>
</tr>
<tr class="odd">
<td>RandomNumberGenerator</td>
<td>生成随机数的类</td>
</tr>
<tr class="even">
<td>DigitObserver</td>
<td>表示以数字形式显示数值类</td>
</tr>
<tr class="odd">
<td>GraphObserver</td>
<td>表示以简单的图形显示数值类</td>
</tr>
<tr class="even">
<td>Main</td>
<td>测试程序行为的类</td>
</tr>
</tbody>
</table>
<h3 id="程序类图">程序类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Observe_Design_Pattern.png" alt><figcaption>Observer</figcaption>
</figure>
<h3 id="代码-4">代码</h3>
<h4 id="observer接口定义抽象方法">Observer接口(定义抽象方法)</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(NumberGenerator generator)</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="numbergenerator抽象类">NumberGenerator抽象类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">NumberGenerator</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> ArrayList observers = <span class="keyword">new</span> ArrayList();</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">addObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">		observers.add(observer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">deleteObserver</span><span class="params">(Observer observer)</span></span>&#123;</span><br><span class="line">		observers.remove(observer);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">notifyObservers</span><span class="params">()</span></span>&#123;</span><br><span class="line">		Iterator it=observers.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Observer o=(Observer) it.next();</span><br><span class="line">			o.update(<span class="keyword">this</span>);</span><br><span class="line">		&#125;	</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">exeute</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="digitobserver具体的观察者">DigitObserver具体的观察者</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">DigitObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(NumberGenerator generator)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;DigitObserver：&quot;</span>+generator.getNumber());</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="graphobserver具体的观察者">GraphObserver具体的观察者</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">GraphObserver</span> <span class="keyword">implements</span> <span class="title">Observer</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">update</span><span class="params">(NumberGenerator generator)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;GraphObserver:&quot;</span>);</span><br><span class="line">		<span class="keyword">int</span> count = generator.getNumber();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;count;i++)&#123;</span><br><span class="line">			System.out.print(<span class="string">&quot;*&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;&quot;</span>);</span><br><span class="line">		<span class="keyword">try</span>&#123;</span><br><span class="line">			Thread.sleep(<span class="number">100</span>);</span><br><span class="line">		&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="randomnumbergenerator具体的被观察对象">RandomNumberGenerator具体的被观察对象</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.Random;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">RandomNumberGenerator</span> <span class="keyword">extends</span> <span class="title">NumberGenerator</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Random random= <span class="keyword">new</span> Random();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> number;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getNumber</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> number;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">exeute</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">20</span>;i++)&#123;</span><br><span class="line">			number=random.nextInt(<span class="number">50</span>);</span><br><span class="line">			notifyObservers();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="测试方法">测试方法</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line">ackage com.sean.Observer;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		NumberGenerator generator=<span class="keyword">new</span> RandomNumberGenerator();</span><br><span class="line">		Observer observer1=<span class="keyword">new</span> DigitObserver();</span><br><span class="line">		Observer observer2=<span class="keyword">new</span> GraphObserver();</span><br><span class="line">		generator.addObserver(observer1);</span><br><span class="line">		generator.addObserver(observer2);</span><br><span class="line">		generator.exeute();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="要点-2">要点</h3>
<p>Observer角色并非主动去观察，而是被动去观察，被动的接受观察对象的通知。</p>
<hr>
<h2 id="flyweight-模式">Flyweight 模式</h2>
<p><strong>共享</strong>对象，避免浪费。</p>
<hr>
<h3 id="类表-1">类表</h3>
<table>
<thead>
<tr class="header">
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>BigChar</td>
<td>表示"大型字符"类</td>
</tr>
<tr class="even">
<td>BigCharFactory</td>
<td>表示生成和共用BigChar类的实例的类</td>
</tr>
<tr class="odd">
<td>BigString</td>
<td>表示多个BigChar组成的 "大型字符串" 的类</td>
</tr>
<tr class="even">
<td>Main</td>
<td>测试程序行为的类</td>
</tr>
</tbody>
</table>
<h3 id="程序类图-1">程序类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/flyweight_uml_fig.png" alt><figcaption>Flyweight</figcaption>
</figure>
<h3 id="代码-5">代码</h3>
<h4 id="bigchar类">BigChar类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">import</span> java.io.BufferedReader;</span><br><span class="line"><span class="keyword">import</span> java.io.FileNotFoundException;</span><br><span class="line"><span class="keyword">import</span> java.io.FileReader;</span><br><span class="line"><span class="keyword">import</span> java.io.IOException;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigChar</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">char</span> charname;</span><br><span class="line">	<span class="keyword">private</span> String fontdata;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BigChar</span><span class="params">(<span class="keyword">char</span> charname)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.charname=charname;</span><br><span class="line">		<span class="keyword">try</span> &#123;</span><br><span class="line">			BufferedReader reader=<span class="keyword">new</span> BufferedReader(<span class="keyword">new</span> FileReader(<span class="string">&quot;/home/sean/Documents/&quot;</span>+<span class="string">&quot;big&quot;</span>+charname+<span class="string">&quot;.txt&quot;</span>));</span><br><span class="line">			String line;</span><br><span class="line">			StringBuffer buf=<span class="keyword">new</span> StringBuffer();</span><br><span class="line">			<span class="keyword">while</span>((line=reader.readLine())!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				buf.append(line);</span><br><span class="line">				buf.append(<span class="string">&quot;\n&quot;</span>);</span><br><span class="line">			&#125;</span><br><span class="line">			reader.close();</span><br><span class="line">			<span class="keyword">this</span>.fontdata=buf.toString();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (FileNotFoundException e) &#123;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125; <span class="keyword">catch</span> (IOException e) &#123;</span><br><span class="line">			<span class="keyword">this</span>.fontdata=charname+<span class="string">&quot;?&quot;</span>;</span><br><span class="line">			e.printStackTrace();</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.print(fontdata);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="bigcharfactory类">BigCharFactory类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.HashMap;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigCharFactory</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> HashMap pool=<span class="keyword">new</span> HashMap();</span><br><span class="line">	<span class="comment">//Singleton模式</span></span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">static</span> BigCharFactory singleton=<span class="keyword">new</span> BigCharFactory();</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="title">BigCharFactory</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//获取唯一实例</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> BigCharFactory <span class="title">getInstance</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> singleton;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//生成（共享)BigChar类实例</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> BigChar <span class="title">getBigChar</span><span class="params">(<span class="keyword">char</span> charname)</span></span>&#123;</span><br><span class="line">		BigChar bc=(BigChar) pool.get(<span class="string">&quot;&quot;</span>+charname);</span><br><span class="line">		<span class="keyword">if</span>(bc==<span class="keyword">null</span>)&#123;</span><br><span class="line">			bc=<span class="keyword">new</span> BigChar(charname);</span><br><span class="line">			pool.put(<span class="string">&quot;&quot;</span>+charname, bc);</span><br><span class="line">		&#125;</span><br><span class="line">		<span class="keyword">return</span> bc;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="bigstring类">BigString类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BigString</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> BigChar[] bigChars;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">BigString</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">		bigChars=<span class="keyword">new</span> BigChar[string.length()];</span><br><span class="line">		BigCharFactory factory=BigCharFactory.getInstance();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bigChars.length;i++)&#123;</span><br><span class="line">			bigChars[i]=factory.getBigChar(string.charAt(i));</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="comment">//显示</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;bigChars.length;i++)&#123;</span><br><span class="line">			bigChars[i].print();</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main类-1">Main类</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Flyweight;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		BigString bs=<span class="keyword">new</span> BigString(<span class="string">&quot;10101&quot;</span>);</span><br><span class="line">		bs.print();</span><br><span class="line">		</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="要点-3">要点</h3>
<p>Flyweight模式会对<strong>多个地方产生影响</strong>。</p>
<p><strong>Intrinsic:</strong> 应当被共享的信息<br>
<strong>Extrinsic:</strong> 不应当被共享的信息</p>
<table>
<thead>
<tr class="header">
<th>名字</th>
<th>解释</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Instrinsic信息</td>
<td>不依赖位置状况，可以共享</td>
</tr>
<tr class="even">
<td>Extrinsic信息</td>
<td>依赖位置与状况，不能共享</td>
</tr>
</tbody>
</table>
<p><strong>不要让被共享的实例被垃圾回收机器回收</strong> Flyweight优点：共享实例能减少对内存的使用，并且能提高运行的速度。</p>
<hr>
<h2 id="adapter模式">Adapter模式</h2>
<p>加个 "适配器" 以便复用 Adapter模式也被称为Wrapper(包装器)模式。</p>
<p>Adapter模式 类适配器模式(使用继承的适配器) 对象适配器模式(使用委托的适配器)</p>
<hr>
<h3 id="类适配器模式使用继承的适配器">类适配器模式(使用继承的适配器)</h3>
<h4 id="类图-3">类图</h4>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Adapter_Design_Pattern.png" alt><figcaption>Adapter Design Pattern</figcaption>
</figure>
<h4 id="code-1">code</h4>
<h5 id="print">Print</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Adapter.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="banner">Banner</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Adapter.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banner</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String string;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Banner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.string=string;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithParen</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;(&quot;</span>+string+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithAster</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;*&quot;</span>+string+<span class="string">&quot;*&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="printbanner">PrintBanner</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Adapter.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBanner</span> <span class="keyword">extends</span> <span class="title">Banner</span> <span class="keyword">implements</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PrintBanner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">		<span class="keyword">super</span>(string);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		showWithParen();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		showWithAster();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h5 id="main-3">Main</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Adapter.a;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Print print =  <span class="keyword">new</span> PrintBanner(<span class="string">&quot;Hello&quot;</span>);</span><br><span class="line">		print.printWeak();</span><br><span class="line">		print.printStrong();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="对象适配器模式使用委托的适配器">对象适配器模式(使用委托的适配器)</h3>
<h4 id="类图-4">类图</h4>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Adapter_Design_Pattern_proxy.png" alt><figcaption>Adapter Design Pattern proxy</figcaption>
</figure>
<h4 id="code-2">code</h4>
<h5 id="banner-1">Banner</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Adapter.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Banner</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String string;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Banner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.string=string;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithParen</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;(&quot;</span>+string+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">showWithAster</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;*&quot;</span>+string+<span class="string">&quot;*&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="print-1">Print</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Adapter.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h5 id="printbanner-1">PrintBanner</h5>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Adapter.b;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrintBanner</span> <span class="keyword">extends</span> <span class="title">Print</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> Banner banner;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PrintBanner</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.banner = <span class="keyword">new</span> Banner(string);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printWeak</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		banner.showWithParen();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">printStrong</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		banner.showWithAster();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="要点-4">要点</h3>
<p>Adapter模式会对现有的类进行适配，生成行的类。 版本的升级与兼容需要用到Adapter模式。 适配！适配！就是给需要的类配对一个合适的插口。</p>
<h2 id="factorymethod模式">FactoryMethod模式</h2>
<p>将实例的生成交给子类用TemplateMethod模式来构建 <strong>生成的实例的工厂</strong> ， 就是FactoryMethod模式。</p>
<h3 id="类图-5">类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Facade_Design_Pattern.png" alt><figcaption>Factory</figcaption>
</figure>
<h3 id="code-3">code</h3>
<h4 id="factory">Factory</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.FactoryMethod.framework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> Product <span class="title">create</span><span class="params">(String owner)</span></span>&#123;</span><br><span class="line">		Product product=createProduct(owner);</span><br><span class="line">		registerProduct(product);</span><br><span class="line">		<span class="keyword">return</span> product;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> Product <span class="title">createProduct</span><span class="params">(String owner)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">registerProduct</span><span class="params">(Product product)</span></span>;</span><br><span class="line">	</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="product">Product</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"></span><br><span class="line"><span class="keyword">package</span> com.sean.FactoryMethod.framework;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="idcard">IDCard</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.FactoryMethod.idcard;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.FactoryMethod.framework.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCard</span> <span class="keyword">extends</span> <span class="title">Product</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String owner;</span><br><span class="line">	IDCard(String owner)&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;制作&quot;</span>+owner+<span class="string">&quot;的ID卡。&quot;</span>);</span><br><span class="line">		<span class="keyword">this</span>.owner=owner;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">use</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;使用&quot;</span>+owner+<span class="string">&quot;的ID卡。&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getOwner</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> owner;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="idcardfactory">IDCardFactory</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.FactoryMethod.idcard;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"><span class="keyword">import</span> java.util.List;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.FactoryMethod.framework.Factory;</span><br><span class="line"><span class="keyword">import</span> com.sean.FactoryMethod.framework.Product;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">IDCardFactory</span> <span class="keyword">extends</span> <span class="title">Factory</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> List owners = <span class="keyword">new</span> ArrayList(); </span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> Product <span class="title">createProduct</span><span class="params">(String owner)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> <span class="keyword">new</span> IDCard(owner);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">protected</span> <span class="keyword">void</span> <span class="title">registerProduct</span><span class="params">(Product product)</span> </span>&#123;</span><br><span class="line">		owners.add(((IDCard)product).getOwner());</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> List <span class="title">getOwners</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> owners;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main-4">Main</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.FactoryMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> com.sean.FactoryMethod.framework.Factory;</span><br><span class="line"><span class="keyword">import</span> com.sean.FactoryMethod.framework.Product;</span><br><span class="line"><span class="keyword">import</span> com.sean.FactoryMethod.idcard.IDCardFactory;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Factory factory=<span class="keyword">new</span> IDCardFactory();</span><br><span class="line">		Product card1= factory.create(<span class="string">&quot;小明&quot;</span>);</span><br><span class="line">		Product card2=factory.create(<span class="string">&quot;小红&quot;</span>);</span><br><span class="line">		Product card3=factory.create(<span class="string">&quot;小刚&quot;</span>);</span><br><span class="line">		card1.use();</span><br><span class="line">		card2.use();</span><br><span class="line">		card3.use();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h3 id="要点-5">要点</h3>
<p>工厂产生产品 具体的工厂产生具体的产品 这两者形成一一对应的关系。</p>
<hr>
<h2 id="templatemethod模式">TemplateMethod模式</h2>
<p>将具体处理交给子类 带有模板功能的模式。 在父类中定义处理流程的框架，在子类中实现具体处理的模式就称为TemplateMethod模式。 在抽象类阶段确定处理的流程非常重要。</p>
<hr>
<h3 id="类图-6">类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/TemplateMethod_Design_Pattern.png" alt><figcaption>TemplateMethod</figcaption>
</figure>
<h3 id="代码-6">代码</h3>
<h4 id="abstractdisplay">AbstractDisplay</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.TemplateMethod;</span><br><span class="line"><span class="comment">/**</span></span><br><span class="line"><span class="comment"> * 抽象类中可有具体的方法实现</span></span><br><span class="line"><span class="comment"> * 但是如果用接口是不行的（原因：接口不能有具体的方法实现）</span></span><br><span class="line"><span class="comment"> * <span class="doctag">@author</span> sean</span></span><br><span class="line"><span class="comment"> *</span></span><br><span class="line"><span class="comment"> */</span></span><br><span class="line"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">	<span class="comment">//修改修饰符可以改变抽象类方法的访问权限问题</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">final</span> <span class="keyword">void</span> <span class="title">display</span><span class="params">()</span></span>&#123;</span><br><span class="line">		open();</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">			print();</span><br><span class="line">		&#125;</span><br><span class="line">		close();</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="chardisplay">CharDisplay</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.TemplateMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">CharDisplay</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">char</span> ch;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">CharDisplay</span><span class="params">(<span class="keyword">char</span> ch)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.ch=ch;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;&lt;&lt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.print(ch);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;&gt;&gt;&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="stringdisplay">StringDisplay</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.TemplateMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">StringDisplay</span> <span class="keyword">extends</span> <span class="title">AbstractDisplay</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String string;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> width;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">StringDisplay</span><span class="params">(String string)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.string=string;</span><br><span class="line">		<span class="keyword">this</span>.width=string.getBytes().length;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">open</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		printLine();</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;|&quot;</span>+string+<span class="string">&quot;|&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="meta">@Override</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">close</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		printLine();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	</span><br><span class="line">	<span class="function"><span class="keyword">private</span> <span class="keyword">void</span> <span class="title">printLine</span><span class="params">()</span></span>&#123;</span><br><span class="line">		System.out.print(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;width;i++)&#123;</span><br><span class="line">			System.out.print(<span class="string">&quot;-&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;+&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main-5">Main</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.TemplateMethod;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		AbstractDisplay d1=<span class="keyword">new</span> CharDisplay(<span class="string">&#x27;H&#x27;</span>);</span><br><span class="line">		AbstractDisplay d2=<span class="keyword">new</span> StringDisplay(<span class="string">&quot;Hello,world&quot;</span>);</span><br><span class="line">		d1.display();</span><br><span class="line">		d2.display();</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h3 id="要点-6">要点</h3>
<p>Template Method模式中，父类与子类是紧密联系，共同工作的。在子类中实现父类的抽象方法。</p>
<hr>
<h2 id="proxy模式">Proxy模式</h2>
<p><strong>只在必要时生成实例</strong></p>
<hr>
<h3 id="类表-2">类表</h3>
<table>
<thead>
<tr class="header">
<th>名字</th>
<th>说明</th>
</tr>
</thead>
<tbody>
<tr class="odd">
<td>Printer</td>
<td>表示带名字的打印机类(本人)</td>
</tr>
<tr class="even">
<td>Printable</td>
<td>Printer和PrinterProxy的共同接口</td>
</tr>
<tr class="odd">
<td>PrinterProxy</td>
<td>表示带名字的打印机类(代理人)</td>
</tr>
<tr class="even">
<td>Main</td>
<td>测试程序行为的类</td>
</tr>
</tbody>
</table>
<h3 id="类图-7">类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Proxy_Design_Pattern.png" alt><figcaption>Proxy</figcaption>
</figure>
<h3 id="代码-7">代码</h3>
<h4 id="printable接口">Printable接口</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">setPrinterName</span><span class="params">(String name)</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> String <span class="title">getPrintName</span><span class="params">()</span></span>;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String string)</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="printer">Printer</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Printer</span> <span class="keyword">implements</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Printer</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Printer</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">		heavyJob(<span class="string">&quot;正在生成Printer实例（&quot;</span>+name+<span class="string">&quot;)&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">setPrinterName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPrintName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">		System.out.println(<span class="string">&quot;====&quot;</span>+name+<span class="string">&quot;====&quot;</span>);</span><br><span class="line">		System.out.println(string);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">heavyJob</span><span class="params">(String msg)</span></span>&#123;</span><br><span class="line">		System.out.print(msg);</span><br><span class="line">		<span class="keyword">for</span>(<span class="keyword">int</span> i=<span class="number">0</span>;i&lt;<span class="number">5</span>;i++)&#123;</span><br><span class="line">			<span class="keyword">try</span>&#123;</span><br><span class="line">				Thread.sleep(<span class="number">1000</span>);</span><br><span class="line">			&#125;<span class="keyword">catch</span>(InterruptedException e)&#123;</span><br><span class="line">				e.printStackTrace();</span><br><span class="line">			&#125;</span><br><span class="line">			System.out.print(<span class="string">&quot;.&quot;</span>);</span><br><span class="line">		&#125;</span><br><span class="line">		System.out.println(<span class="string">&quot;结束。&quot;</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="printerproxy">PrinterProxy</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">PrinterProxy</span> <span class="keyword">implements</span> <span class="title">Printable</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="keyword">private</span> Printer real;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PrinterProxy</span><span class="params">()</span></span>&#123;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">PrinterProxy</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">setPrinterName</span><span class="params">(String name)</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">			<span class="keyword">if</span>(real!=<span class="keyword">null</span>)&#123;</span><br><span class="line">				real.setPrinterName(name);</span><br><span class="line">			&#125;</span><br><span class="line">			<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getPrintName</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">print</span><span class="params">(String string)</span> </span>&#123;</span><br><span class="line">		realize();</span><br><span class="line">		real.print(string);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">synchronized</span> <span class="keyword">void</span> <span class="title">realize</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">if</span>(real==<span class="keyword">null</span>)&#123;</span><br><span class="line">			real=<span class="keyword">new</span> Printer(name);</span><br><span class="line">		&#125;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="main-6">Main</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Proxy;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">/**</span></span><br><span class="line"><span class="comment">	 * <span class="doctag">@param</span> args</span></span><br><span class="line"><span class="comment">	 */</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		Printable p=<span class="keyword">new</span> PrinterProxy(<span class="string">&quot;Alice&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;现在的名字是&quot;</span>+p.getPrintName()+<span class="string">&quot;。&quot;</span>);</span><br><span class="line">		p.setPrinterName(<span class="string">&quot;Bob&quot;</span>);</span><br><span class="line">		System.out.println(<span class="string">&quot;现在的名字是&quot;</span>+p.getPrintName()+<span class="string">&quot;。&quot;</span>);</span><br><span class="line">		p.print(<span class="string">&quot;Hello,world!&quot;</span>);</span><br><span class="line"></span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<hr>
<h2 id="iterator模式">Iterator模式</h2>
<p>一个一个遍历 <strong>迭代器</strong></p>
<hr>
<h3 id="类图-8">类图</h3>
<figure>
<img data-src="/2018/02/14/Design-Pattern-Java/Iterator_Design_Pattern.png" alt><figcaption>Iterator</figcaption>
</figure>
<h3 id="code-4">code</h3>
<h4 id="aggregate">Aggregate</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Iterator <span class="title">iterator</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>
<h4 id="iterator">Iterator</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">interface</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span></span>;</span><br><span class="line">		<span class="function"><span class="keyword">public</span> <span class="keyword">abstract</span> Object <span class="title">next</span><span class="params">()</span></span>;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="book">Book</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Book</span> </span>&#123;</span><br><span class="line">	<span class="keyword">private</span> String name;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="title">Book</span><span class="params">(String name)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.name=name;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> String <span class="title">getName</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> name;</span><br><span class="line">	&#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="bookshelf">BookShelf</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">import</span> java.util.ArrayList;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelf</span> <span class="keyword">implements</span> <span class="title">Aggregate</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="comment">//private Book[] books;</span></span><br><span class="line">	<span class="keyword">private</span> ArrayList&lt;Book&gt; bookList = <span class="keyword">new</span> ArrayList&lt;Book&gt;();</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> last=<span class="number">0</span>;</span><br><span class="line"><span class="comment">//	public BookShelf(int maxsize)&#123;</span></span><br><span class="line"><span class="comment">//		this.books = new Book[maxsize];</span></span><br><span class="line"><span class="comment">//	&#125;</span></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Book <span class="title">getBookAt</span><span class="params">(<span class="keyword">int</span> index)</span></span></span><br><span class="line"><span class="function">	</span>&#123;</span><br><span class="line">		<span class="keyword">return</span> bookList.get(index);</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">void</span> <span class="title">appendBook</span><span class="params">(Book book)</span></span>&#123;</span><br><span class="line">		bookList.add(book);</span><br><span class="line">		last++;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">int</span> <span class="title">getLength</span><span class="params">()</span></span>&#123;</span><br><span class="line">		<span class="keyword">return</span> last;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> Iterator <span class="title">iterator</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="keyword">return</span>  <span class="keyword">new</span> BookShelfIterator(<span class="keyword">this</span>);</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="bookshelfiterator">BookShelfIterator</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">BookShelfIterator</span> <span class="keyword">implements</span> <span class="title">Iterator</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="keyword">private</span> BookShelf bookShelf;</span><br><span class="line">	<span class="keyword">private</span> <span class="keyword">int</span> index;</span><br><span class="line">	<span class="function"><span class="keyword">public</span>  <span class="title">BookShelfIterator</span><span class="params">(BookShelf bookShelf)</span></span>&#123;</span><br><span class="line">		<span class="keyword">this</span>.bookShelf = bookShelf;</span><br><span class="line">		<span class="keyword">this</span>.index=<span class="number">0</span>;</span><br><span class="line">	&#125;</span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">boolean</span> <span class="title">hasNext</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		<span class="keyword">if</span>(index &lt; bookShelf.getLength())&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">true</span>;</span><br><span class="line">		&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">			<span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> Object <span class="title">next</span><span class="params">()</span> </span>&#123;</span><br><span class="line">		<span class="comment">// TODO Auto-generated method stub</span></span><br><span class="line">		Book book = bookShelf.getBookAt(index);</span><br><span class="line">		index++;</span><br><span class="line">		<span class="keyword">return</span> book;</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<h4 id="main-7">Main</h4>
<figure class="highlight java"><table><tr><td class="code"><pre><span class="line"><span class="keyword">package</span> com.sean.Iterator;</span><br><span class="line"></span><br><span class="line"><span class="keyword">public</span> <span class="class"><span class="keyword">class</span> <span class="title">Main</span> </span>&#123;</span><br><span class="line"></span><br><span class="line">	<span class="function"><span class="keyword">public</span> <span class="keyword">static</span> <span class="keyword">void</span> <span class="title">main</span><span class="params">(String[] args)</span> </span>&#123;</span><br><span class="line">		<span class="comment">//BookShelf bookShelf = new BookShelf(4);</span></span><br><span class="line">		BookShelf bookShelf = <span class="keyword">new</span> BookShelf();</span><br><span class="line">		bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Around the World in 80 Days&quot;</span>));</span><br><span class="line">		bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Bible&quot;</span>));</span><br><span class="line">		bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Cinderella&quot;</span>));</span><br><span class="line">		bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Dady-Long-Legs&quot;</span>));</span><br><span class="line">		bookShelf.appendBook(<span class="keyword">new</span> Book(<span class="string">&quot;Gone with the wind!&quot;</span>));</span><br><span class="line">		Iterator it = bookShelf.iterator();</span><br><span class="line">		<span class="keyword">while</span>(it.hasNext())&#123;</span><br><span class="line">			Book book = (Book) it.next();</span><br><span class="line">			System.out.println(book.getName());</span><br><span class="line">		&#125;</span><br><span class="line">		</span><br><span class="line">	&#125;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"></span><br></pre></td></tr></table></figure>
<hr>
<h2 id="参照">参照</h2>
<blockquote>
<p>《图解设计模式》</p>
</blockquote>
<p>写这个只是为了加深自己对设计模式的理解，如不明白，可以看 《图解设计模式》。 程序类图使用idea 生成的</p>
<h2 id="备注">备注</h2>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please email to me! 😤</p>
]]></content>
      <categories>
        <category>DesignPattern</category>
      </categories>
      <tags>
        <tag>Java</tag>
        <tag>DesignPattern</tag>
      </tags>
  </entry>
  <entry>
    <title>A simple debug MATLAB code tutorial</title>
    <url>/2022/03/29/Debug-MATLAB-Code/</url>
    <content><![CDATA[<hr>
<h1 id="debug-matlab-code-tutorial">Debug MATLAB Code Tutorial</h1>
<h2 id="为什么需要-debug-matlab-代码">为什么需要 Debug MATLAB 代码</h2>
<p>讲讲自己使用 MATLAB 的遭遇吧！最近在写一个仿真程序，其中的核心代码我是用 MATLAB Code 实现的。然后在 simulink 中使用示波器查看自己的仿真程序的输出结果是否正确。输出结果的波形趋势是正确的，但是在边界处和我设想的有偏差。因此需要进一步优化代码。在出现偏差的地方，我需要用仿真示波器查看结果，每次需要精确到具体的时刻，才能比较自己程序的输出结果和理论结果。有时我需要查看代码中另一个变量的值。如果用示波器的来显示结果，就需要再定义一个输出端口，然后再用示波器连接刚才定义的输出端口。同时，每个示波器都要调节到同一时刻，才能比对此时的仿真结果。这样用示波器来调试 simulink 中的代码方式属实麻烦。实际我使用示波器调试使用了接近一天，感觉自己这样调试的效率太低了。晚上，回寝室就向室友吐槽这样调试 simulink 代码太麻烦了。室友来了一句，"可以 debug MATLAB code 呀！" 问题是在 <code>.m</code> 文件书写的 MATLAB Code 可以进行 debug，在 simulink 中可行吗？第二天，尝试了一下在 simulink 中尝试了一下打断点，是可行的！因此用 debug 的方式调试 simulink 程序是一个可行的方案。这样调试的效率就提高了。</p>
<p>操作环境：</p>
<hr>
<p>MATLAB: R2021B</p>
<p>OS: Debian GNU/Linux 11 (bullseye) x86_64</p>
<p>Kernel: 5.10.0-13-amd64</p>
<hr>
<p><span class="math display">\[
\begin{equation}
\label{ComplexOutputSignal}
e^{x}=1+\frac{1}{1!}x+\frac{1}{2!}x^2+\frac{1}{3!}x^3+\frac{1}{4!}x^4+\cdots
\end{equation}
\]</span></p>
<p>引用公式 <span class="math inline">\(\eqref{ComplexOutputSignal}\)</span>。</p>
<p>值得注意的是 MATLAB R2021B Linux 版本可能无法启动 simulink。出现闪退，并出现如下日志：</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">Inconsistency detected by ld.so: ../elf/dl-tls.c: 597: _dl_allocate_tls_init: Assertion `listp != NULL<span class="string">&#x27; failed!</span></span><br></pre></td></tr></table></figure>
<p>该问题是因为 glibc 自身的 bug 所致，具体修复方案请参考 <a href="https://ww2.mathworks.cn/support/bugreports/2632298">MATLAB Bug Report</a> 的解决方案。</p>
<p>Debug MATLAB Code Files 无论在 <code>.m</code> 文件（script），还是在 <code>.mlx</code> 文件（live script）或者 simulink 中的 <code>MATLAB function</code> debug 逻辑都是类似的。理论上只要会一种文件的调试，在其他类型文件 debug 都会无师自通。如果你使用过 C 语言等编程语言调试工具，自然的，你也会特别适应在 MATLAB 中 debug 程序。有一个 debug 的专业术语 <strong>断点</strong>，意思是程序执行到<strong>断点</strong>处，程序暂时冻结在此处，然后手动的点击继续运行，可跳过该断点。尽管在 <code>.m</code>，<code>.mlx</code> 和 <code>MATLAB function</code> 中的 debug 操作类似，但是接下来为了充分熟悉 debug 方式，会在上述三种环境中都会有演示教程。</p>
<hr>
<h2 id="debug-.m-文件">Debug <code>.m</code> 文件</h2>
<p>Debug <code>.m</code> 文件的事例程序如下：</p>
<figure class="highlight c"><table><tr><td class="code"><pre><span class="line">% debug demo</span><br><span class="line">clear;</span><br><span class="line">t=linspace(<span class="number">0</span>,<span class="number">2</span>*pi,<span class="number">50</span>);</span><br><span class="line">y=<span class="built_in">exp</span>(-t).*<span class="built_in">sin</span>(t);</span><br><span class="line">plot(t,y);</span><br><span class="line">hold on;</span><br><span class="line"><span class="keyword">for</span> k=<span class="number">1</span>:length(t)</span><br><span class="line">    plot(t(k),y(k),<span class="string">&#x27;o&#x27;</span>); % breakpoint</span><br><span class="line">    <span class="title function_">pause</span><span class="params">(<span class="number">0.1</span>)</span>;</span><br><span class="line">end</span><br><span class="line">hold off;</span><br></pre></td></tr></table></figure>
<p>简单的调试流程：</p>
<hr>
<ol type="1">
<li>设置断点：在需要打断点的位置的数字行号单击鼠标左键即可添加断点</li>
<li>执行程序：点击 <code>Run</code></li>
<li>继续运行：点击 <code>Continue</code>，程序直到遇到下一个断点才停止。</li>
<li>执行下一步：点击 <code>Step</code></li>
<li>查看当前运行程序变量值：在 <code>Command Window</code> 输入需要你需要查看的变量名，然后回车。</li>
<li>停止调试：点击 <code>Stop</code></li>
</ol>
<hr>
<p>Debug <code>.m</code> 文件各窗口或按钮功能解释</p>
<figure>
<img data-src="/2022/03/29/Debug-MATLAB-Code/DebugMFile.png" alt><figcaption>debug m-file 功能指示</figcaption>
</figure>
<p>debug 动态演示 gif 图</p>
<figure>
<img data-src="/2022/03/29/Debug-MATLAB-Code/DebugMatlabMFile.gif" alt><figcaption>Debug M-file Demo</figcaption>
</figure>
<p>除了使用 <code>Command Window</code> 窗口来查看当前变量，可以在程序调试程序处，鼠标移动到需要查看的变量，会自动显示当前变量值。感觉是不是特别方便呀！</p>
<figure>
<img data-src="/2022/03/29/Debug-MATLAB-Code/DebugMatlabMFile2.gif" alt><figcaption>Show current value</figcaption>
</figure>
<p>如果只需执行一次断点调试操作，可以把鼠标放置在数字行号右侧，会出现一个视频播放器，播放或暂停的符号。鼠标左键点击一下，便可执行单次的调试操作。</p>
<figure>
<img data-src="/2022/03/29/Debug-MATLAB-Code/DebugtoHere.png" alt><figcaption>Continue to Here</figcaption>
</figure>
<h2 id="debug-.mlx-文件">Debug <code>.mlx</code> 文件</h2>
<p>Debug '.mlx' 文件的方法和 <code>.m</code> 文件类似，只是程序的结果在 <code>.mlx</code> 文件内部显示而已。</p>
<p>debug live script 演示动图</p>
<figure>
<img data-src="/2022/03/29/Debug-MATLAB-Code/DebugMatlabLiveScriptFile.gif" alt><figcaption>Debug live script demo</figcaption>
</figure>
<hr>
<h2 id="debug-simulink-matlab-function">Debug simulink <code>MATLAB function</code></h2>
<p>简单的 debug simulink 仿真整体架构。 <img data-src="/2022/03/29/Debug-MATLAB-Code/DebugSimulinkOverview.png" alt="Overview Debug Simulink"></p>
<p><code>MATLAB function</code> DebugDemo1 的程序如下：</p>
<figure class="highlight c"><figcaption><span>DebugDemo1</span></figcaption><table><tr><td class="code"><pre><span class="line">function [out1,out2] = DebugDemo1(t,sample)</span><br><span class="line"></span><br><span class="line">persistent n lastout;</span><br><span class="line"><span class="keyword">if</span> <span class="title function_">isempty</span><span class="params">(n)</span></span><br><span class="line">    n=<span class="number">1</span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> <span class="title function_">isempty</span><span class="params">(lastout)</span></span><br><span class="line">    lastout=<span class="number">0</span>;</span><br><span class="line">end</span><br><span class="line"></span><br><span class="line">out1=<span class="built_in">exp</span>(-t).*<span class="built_in">sin</span>(t);</span><br><span class="line"></span><br><span class="line"><span class="keyword">if</span> t&gt;n*sample</span><br><span class="line">    out2=out1;</span><br><span class="line">    lastout=out2;</span><br><span class="line">    n=n+<span class="number">1</span>;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">    out2=lastout;</span><br><span class="line">end</span><br></pre></td></tr></table></figure>
<p>simulink debug 演示效果</p>
<figure>
<img data-src="/2022/03/29/Debug-MATLAB-Code/DebugMatlabSimulinkFunction.gif" alt><figcaption>Debug simulink demo</figcaption>
</figure>
<p>Debug 操作内容可以参看官方帮助文档。在 <code>Command Window</code> 输入如下命令，然后点击 <code>Debug MATLAB Code Files</code> 即可查看本地帮助文档 debug 内容。</p>
<h2 id="section"><figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">doc Debug MATLAB Code Files</span><br></pre></td></tr></table></figure></h2>
<h2 id="matlab-simulink-tip">matlab simulink tip</h2>
<p>最近，使用 MATLAB R2021b 仿真，发现一个新功能，十分不错。我个人把他称为<em>便捷版的示波器</em>，当然他有专业的名字 <strong>Simulation Data Inspector</strong>。有是需要在仿真中比对多组数据，尤其是比对的数据比较多时，用仿真示波器来比对数据比较麻烦。需要连线，设置 <code>mux</code> 输入端口数等等操作。而使用 <strong>Simulation Data Inspector</strong> 就方便太多了。具体使用流程，请参考下面的动态图。</p>
<figure>
<img data-src="/2022/03/29/Debug-MATLAB-Code/SimulationDataInspector.gif" alt><figcaption>Simulation Data Inspector Demo</figcaption>
</figure>
<p>上面的动态演示只是演示了 Data Inspector 一些基本功能，更多功能请使用在 <code>Command Window</code> 中使用 <code>doc</code> 命令查看帮助文档。</p>
<figure class="highlight bash"><table><tr><td class="code"><pre><span class="line">doc View Data <span class="keyword">in</span> the Simulation Data Inspector</span><br></pre></td></tr></table></figure>
<h2 id="备注">备注</h2>
<p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please contact me by email 😏! Have fun!</p>
<hr>
<h2 id="参考">参考</h2>
<p><a href="https://ww2.mathworks.cn/help/matlab/matlab_prog/debugging-process-and-features.html?lang=en">Debug MATLAB Code Files</a></p>
<p><a href="https://ww2.mathworks.cn/help/simulink/ug/populate-sdi-with-your-data.html?lang=en">Simulation Data Inspector</a></p>
]]></content>
      <categories>
        <category>MATLAB</category>
      </categories>
      <tags>
        <tag>MATLAB</tag>
      </tags>
  </entry>
  <entry>
    <title>Phase Locked Loop Learning Notes</title>
    <url>/2022/03/30/PLL-Learning-Notes/</url>
    <content><![CDATA[<h1 id="接触锁相环的缘由"><a href="#接触锁相环的缘由" class="headerlink" title="接触锁相环的缘由"></a>接触锁相环的缘由</h1><p>学电力电子，尤其是新能源光伏或风电的并网运行需要同步电网，需要锁相环来同步相位信息。对于电力驱动领域，无位置传感器电力驱动有运用锁相环的需求。我最近研究的电力驱动内容也有需求锁定一个未知信号的相位，因此需要了解并使用锁相环。大概花了一个月的时间来学习锁相环，对锁相环的基本原理有了一定的了解。尤其是自己明白原理后，看其他文献就容易理解了。不会像最开始学习锁相环阶段，看着锁相环就头大，头晕。实际锁相环的基本原理并不难，尤其是公式推导过程（公式偏多），不要抵触，多花点时间就可以掌握。接下来首先介绍锁相环的需要完成的目标。</p>
<hr>
<h1 id="Phase-Locked-Loop-的目标"><a href="#Phase-Locked-Loop-的目标" class="headerlink" title="Phase Locked Loop 的目标"></a>Phase Locked Loop 的目标</h1><p>PLL 全称为 Phase Locked Loop，中文名把它叫做<strong>锁相环</strong>。PLL 的基本功能是<strong>跟踪</strong>、<strong>锁定</strong>交流信号的<strong>相位</strong>，且在必要时还可以提供有关信号的<strong>频率</strong>和<strong>幅值</strong><sup><a href="#fn_1" id="reffn_1">1</a></sup>。</p>
<hr>
<h1 id="乘法鉴相锁相环"><a href="#乘法鉴相锁相环" class="headerlink" title="乘法鉴相锁相环"></a>乘法鉴相锁相环</h1><p>基于乘法鉴相器的锁相环是最基础的一种。主要参看文献<strong>《PWM 整流器及其控制》</strong>来学习锁相环，以此来掌握核心的概念，并加深对锁相环的理解。</p>
<h2 id="锁相环的基本构成"><a href="#锁相环的基本构成" class="headerlink" title="锁相环的基本构成"></a>锁相环的基本构成</h2><p>基本锁相环的闭环控制回路一般含有<strong>鉴相器</strong>（PD）、<strong>环路滤波器</strong>（LF）和<strong>压控振荡器</strong>（VCO）这三种结构，如图1所示。乘法鉴相锁相环是指鉴相器采用<strong>乘法器</strong>的锁相环。 </p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/BasicPllConfiguration.png" alt title="图1 基本闭环锁相环控制结构"></p>
<hr>
<ol>
<li>鉴相器：比较输入信号$v<em>{i}(t)$和输出信号$v</em>{o}(t)$的相位。</li>
<li>环路滤波器：滤除误差信号$v_{d}(t)$的二次谐波分量和噪声。</li>
<li>压控振荡器：完成电压和频率的变换，即压控振荡器的输出信号的频率与误差信号$v_{d}(t)$的大小成正比。</li>
</ol>
<hr>
<p>接下来就分别分析锁相环的三个基本单元<strong>鉴相器、环路滤波器、压控振荡器</strong>(PD,LP,VCO)的功能和数学模型。其中，锁相环最核心的部分是<strong>鉴相器</strong>。</p>
<hr>
<h2 id="乘法鉴相器-PD"><a href="#乘法鉴相器-PD" class="headerlink" title="乘法鉴相器 PD"></a>乘法鉴相器 PD</h2><p>实际要分析的是为什么<strong>乘法器</strong>能实现相位的比较? 带着这个问题去理解<strong>乘法鉴相器</strong>。</p>
<p>定义输入信号：</p>
<script type="math/tex; mode=display">
\begin{equation}
    v_{i}(t) = V_i \sin[\omega_i t +\theta_i(t)]
\end{equation}</script><p>定义输出信号：</p>
<script type="math/tex; mode=display">
\begin{equation}
    v_{o}(t) = V_o \cos[\omega_o t +\theta_o(t)]
\end{equation}</script><p>这样一看这两个信号就含有 $\omega<em>i$、$\omega_o$、$\theta</em>{i}(t)$、<br>$\theta_o(t)$、$V_i$ 和 $V_o$，总共6个变量，看来需要简化简化，方便后续的分析。</p>
<p>注意：<strong>输入输出信号为两正交信号</strong>（$\sin, \cos$）</p>
<p>以 $\omega_o$ 为参考频率，重新定义输入信号的瞬时相位：</p>
<script type="math/tex; mode=display">
\begin{equation}
    [\omega_i t + \theta_i(t)] = \omega_o  t + 
    [(\omega_i-\omega_o)t + \theta_i(t)]
    = \omega_o t + \theta_{1}(t)
\end{equation}</script><p>其中，$\theta_{1}(t) =(\omega_i-\omega_o)t + \theta_i(t)=\Delta \omega_o t + \theta_i(t)$</p>
<p>输出信号的瞬时相位：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \omega_o t + \theta_o(t) = \omega_o t + \theta_2(t)
\end{equation}</script><p>其中，$\theta_2(t)=\theta_o(t)$。</p>
<p>简化后的输入输出信号表达式：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \left\{
        \begin{aligned}
            \label{eq:input and out signal}
            v_i(t) &= V_i \sin [\omega_o t + \theta_{1}(t)]\\
            v_o(t) &= V_o \cos [\omega_o t + \theta_{2}(t)]\\
        \end{aligned}
    \right.
\end{equation}</script><p>和最初定义相比，减少了一个频率变量$\omega_i$。</p>
<p>乘法鉴相器结构框图，如图2所示，简单的数学表达式为$v_d(t)=K_m v_i(t) v_o(t)$，其中$K_m$ 为乘法器的比列系数。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/Multiplier.png" alt title="图2 乘法鉴相器结构"></p>
<p>再用个积化和差公式：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \sin\alpha \cdot \cos\beta = \frac{1}{2}
    [\sin(\alpha+\beta)+\sin(\alpha-\beta) ]\\
\end{equation}</script><p>在乘法鉴相器数学表达式中，应用三角函数积化和差公式化简过程：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:complex output signal}
    \begin{aligned}
        v_d(t) & = K_m v_i(t) v_o(t)\\
               & = K_m V_i V_o \cos [\omega_o t + \theta_{2}(t)] 
               \sin [\omega_o t + \theta_{1}(t)]\\
               & = \frac{1}{2} K_m V_i V_o \sin[2\omega_o t+
               \theta_1(t)+\theta_2(t)]+\frac{1}{2} K_m V_i V_o
               \sin[\theta_1(t)-\theta_2(t)]
    \end{aligned}
\end{equation}</script><p>其中，$\frac{1}{2} K_m V_i V_o \sin[2\omega_o t+\theta_1(t)+\theta_2(t)]$<br>含有二次谐波，需要设置一个低通滤波器将其滤除。</p>
<p>故公式$\eqref{eq:complex output signal}$可做进一步的简化，去掉二次谐波部分。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:simple output singal}
    v_d(t)=\frac{1}{2} K_m V_i V_o\sin[\theta_1(t)-\theta_2(t)]
\end{equation}</script><p>看公式$\eqref{eq:simple output singal}$ 中的 $\theta_1(t)-\theta_2(t)$，这不是出现了两瞬时相位之差了吗？可以解决本小节最开始提出的问题。</p>
<p><strong><em>“实际要分析的是为什么乘法器能实现相位的比较?”</em></strong></p>
<p>进一步简化$v_d(t)$</p>
<p>定义瞬时相位差：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \begin{aligned}
    \theta_e(t) &= \theta_1(t)-\theta_2(t)\\
            &= \Delta \omega_o t + \theta_i(t) -\theta_o(t)    
    \end{aligned}
\end{equation}</script><p>定义幅值：</p>
<script type="math/tex; mode=display">
\begin{equation}
    V_d = \frac{1}{2} K_m V_i V_o
\end{equation}</script><p>再进一步简化</p>
<script type="math/tex; mode=display">
\begin{equation}
    v_d(t) = V_d \sin \theta_e(t)
\end{equation}</script><p>这已经是最简化的形式了。</p>
<p>定义过零点的斜率为$K_d$，把 $K_d$称为鉴相器的灵敏度。</p>
<script type="math/tex; mode=display">
\begin{equation}
    K_d = \frac{\mathrm{d}v_d}{\mathrm{d}\theta_e}\bigg|_{\theta_e=0}
    =\frac{\mathrm{d}}{\mathrm{d}\theta_e}(V_d\sin\theta_e)\bigg|_{\theta_e=0}  
    = Vd
\end{equation}</script><p>故$v_d(t)$也可以写成：</p>
<script type="math/tex; mode=display">
\begin{equation}
    v_d(t) = K_d \sin \theta_e(t)
\end{equation}</script><p>这就是乘法鉴相器的数学模型，其结构图请见图3。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/MultiplierPDModel.png" alt title="图3 乘法鉴相器模型结构"></p>
<h2 id="压控振荡器"><a href="#压控振荡器" class="headerlink" title="压控振荡器"></a>压控振荡器</h2><p><strong>何为压控振荡器？</strong></p>
<p>压控振荡器的振荡频率$\omega_v(t)$随控制电压$v_c(t)$成正比（近似正比）变化。如图4所示为压控振荡器特性曲线。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/VCOCharacteristcCurve.png" alt title="图4 压控振荡器特性曲线"></p>
<p>用数学表达式表示压控振荡器特性曲线：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:VCOCharacteristic}
    \omega_v(t)=\omega_0 + K_o v_c(t)
\end{equation}</script><p>注意：<strong>$\omega_0$ 与 $\omega_o$ 区别，$\omega_0$一个是 VCO 固有振荡频率，<br>$\omega_o$ 是输出信号频率</strong>。</p>
<p>如图3所示，对鉴相器起作用的是瞬时相位$\theta_2(t)$,不是瞬时角频率 $\omega_v (t)$。</p>
<script type="math/tex; mode=display">
\begin{equation}
     \omega_o t + \theta_2(t)=\int_{0}^{t} \omega_v(t) d(t)= \omega_0 t 
    + K_0 \int_{0}^{t} v_{c}(t) dt
\end{equation}</script><script type="math/tex; mode=display">
\begin{equation}
    \theta_2(t) = K_0 \int_{0}^{t} v_{c}(t) dt
\end{equation}</script><p>这就是压控振荡器的数学模型，显然是一个积分器。定义微分算子 $p=d/dt$。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \theta_2(t) = K_0 \frac{v_{c}(t)}{p}
\end{equation}</script><p><img data-src="/2022/03/30/PLL-Learning-Notes/VCOModel.png" alt title="图5 压控振荡器数学模型"></p>
<h2 id="环路滤波器"><a href="#环路滤波器" class="headerlink" title="环路滤波器"></a>环路滤波器</h2><p>环路滤波器的作用主要是用来滤除鉴相器输出信号的<strong>二次谐波分量和噪声</strong>。</p>
<p>环路滤波器的$s$域数学模型:</p>
<script type="math/tex; mode=display">
\begin{equation}
    V_c(s) = F(s) V_d(s)
\end{equation}</script><p>换成微分算子的形式：</p>
<script type="math/tex; mode=display">
\begin{equation}
    v_c(t)=F(p)v_d(t)
\end{equation}</script><p><img data-src="/2022/03/30/PLL-Learning-Notes/LP.png" alt title="图6 环路滤波器时域模型结构图"></p>
<h2 id="乘法鉴相器锁相环基本相位方程"><a href="#乘法鉴相器锁相环基本相位方程" class="headerlink" title="乘法鉴相器锁相环基本相位方程"></a>乘法鉴相器锁相环基本相位方程</h2><p>根据前面三个基本单元的分析，可以综合成一个模型图，如图7所示。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/PLLConfiguration.png" alt title="图7 锁相环路的相位反馈系统结构"></p>
<script type="math/tex; mode=display">
\begin{equation}
    \theta_e(t)=\theta_1(t) - \theta_2(t)=\theta_1(t) - K_0F(p) \frac{v_d(t)}{p}
    =\theta_1(t) - K_0 K_d F(p) \frac{1}{p} \sin \theta_e(t)
\end{equation}</script><p>两端微分：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \frac{\mathrm{d}\theta_e(t)}{\mathrm{d}t}+K_0 K_d F(p) \sin \theta_e(t)
    = \frac{\mathrm{d}\theta_1(t)}{\mathrm{d}t}
\end{equation}</script><h2 id="锁相环锁定问题"><a href="#锁相环锁定问题" class="headerlink" title="锁相环锁定问题"></a>锁相环锁定问题</h2><p>当锁相环输入一个频率和相位不随时间变化的信号，即$v_i(t)=V_i\sin(\omega_i t+\theta_i)$。$\omega_i$与$\theta_i$ 不随时间变化。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \frac{\mathrm{d}\theta_1(t)}{\mathrm{d}t}
    = \omega_i - \omega_o = \Delta \omega_o
\end{equation}</script><p>简化基本相位方程：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \underbrace{\frac{\mathrm{d}\theta_e(t)}{\mathrm{d}t}}_{\omega_e}
    +\underbrace{K_0 K_d F(p) \sin \theta_e(t)}_{\omega_v-\omega_0}
    = \Delta \omega_o
\end{equation}</script><p>参考锁相环的相位反馈图7和VCO特性方程$\eqref{eq:VCOCharacteristic}$，可得</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:control frequencyi difference}
    \begin{aligned}
        K_0 K_d F(p) \sin \theta_e(t) & = K_0 F(p)  [K_d\sin\theta_e(t)]\\
                          &= K_0 F(p) v_d(t)\\
                          &= K_0 v_c(t)\\
                          &= \omega_v - \omega_0
    \end{aligned}
\end{equation}</script><p>$\omega_v - \omega_0$称为控制频差，是压控振荡器受控制电压$v_c(t)$作用而产生的。</p>
<p>注意：<strong>$\omega_0$ 与 $\omega_o$ 区别，$\omega_0$一个是 VCO 固有振荡频率，$\omega_o$ 是输出信号频率</strong>。</p>
<p>$\frac{\mathrm{d}\theta_e(t)}{\mathrm{d}t}$ 可以用 $\omega_e$ 代替，被称为瞬时频差。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \begin{aligned}
    \frac{\mathrm{d}\theta_e(t)}{\mathrm{d}t} = 
    \frac{\mathrm{d}\theta_1(t)-\theta_2(t)}{\mathrm{d}t}
    \end{aligned}
\end{equation}</script><p>书上的解释不清楚，下面是我按照自己理解，来解释整个锁相环的工作情况。</p>
<p><strong>现在分析锁相环是如何实现频率的锁定和相位的锁定？</strong></p>
<p>根据图7来分析锁定问题。假设存在某一时刻$\theta_1(t)&gt;\theta_2(t)$，$0 &lt;\theta_e(t)&lt;\frac{\pi}{2}$，$\theta_1(t)$ 与 $\theta_2(t)$ 的差值在扩大，也就是说$\theta_1(t)$对应的角频率大于$\theta_2(t)$ 的角频率。$\theta_e(t)=\theta_1(t)-\theta_2(t)&gt;0$ $\uparrow$，那么 $v_d(t)$  $\uparrow$ ，那么 $v_c(t)$ $\uparrow$，那么对应 VCO 的输出信号频率增加$\omega_v$，那么$\theta_2(t)$的频率在增加，以此来追上$\theta_2(t)$的频率，当 $\theta_1(t)$的频率和 $\theta_2(t)$的频率相等时，$\theta_e(t)$就是一个恒定值，整个闭环系统进入稳态。</p>
<p><strong>现在的稳定状态是有输入输出信号是有相位差。为了实现相位偏差为零，可以在环路滤波器之后加一个PI，便可实现相位的零稳态误差。</strong></p>
<hr>
<h1 id="经典的三相锁相环"><a href="#经典的三相锁相环" class="headerlink" title="经典的三相锁相环"></a>经典的三相锁相环</h1><p>经典的三相系统的锁相环主要参考文献 <a href="https://ieeexplore.ieee.org/document/567077">Operation of a phase locked loop system under distorted utility conditions</a><sup><a href="#fn_2" id="reffn_2">2</a></sup>。</p>
<h2 id="经典三相锁相环原理图"><a href="#经典三相锁相环原理图" class="headerlink" title="经典三相锁相环原理图"></a>经典三相锁相环原理图</h2><p><img data-src="/2022/03/30/PLL-Learning-Notes/SSRFSPLLVector.png" alt title="图8 SSRF-SPLL 矢量图"></p>
<p>SSRF-SPLL矢量图8各变量定义：</p>
<hr>
<ul>
<li>$\mathbf{V}$ 实际电压矢量</li>
<li>$\mathbf{V}_{pll}$ 锁相环的输出电压矢量</li>
<li>$\theta$ 实际电压矢量的矢量角度</li>
<li>$\hat{\theta}$ 锁相环输出的电压矢量角度</li>
</ul>
<hr>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SSRFSPLLConfiguration.png" alt title="图9 SSRF-SPLL 控制结构原理框图"></p>
<p>$\omega<em>{ff}$ 是检测电压的额定频率，那这个物理量的作用是什么？主要是设置一个检测信号的额定频率，实际信号的频率是在这个频率$\omega</em>{ff}$上下波动，主要降低PI控制器输出的压力，这样PI输出就没必要和额定频率一样大，只需一个较小的量$\Delta \omega<em>o$即可。同时，$\omega</em>{ff}$给系统的频率一个初始值，有维持系统稳定的作用（不必要从0直接突变到$\omega<em>{ff}$附近，而是直接在$\omega</em>{ff}$附近变化）。</p>
<p>上面的锁相环控制框图有点复杂，可以简化简化。</p>
<p>简化版的三相锁相环控制框图，如图10所示。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SSRFSPLLConfigurationSimple.png" alt title="图10 简化版的三相锁相环控制框图"></p>
<h2 id="经典三相锁相环有关数学公式"><a href="#经典三相锁相环有关数学公式" class="headerlink" title="经典三相锁相环有关数学公式"></a>经典三相锁相环有关数学公式</h2><p>平衡的三相电网电压：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:BalancedThreePhaseVoltage}
    \begin{aligned}
        v_a &=\mathbf{V} \cos(\omega_1 t)\\
        v_b &=\mathbf{V} \cos(\omega_1 t - 2\pi/3)\\
        v_a &=\mathbf{V} \cos(\omega_1 t - 4\pi/3)
    \end{aligned}
\end{equation}</script><script type="math/tex; mode=display">
\begin{equation}
    \label{eq:AlphaBetaVoltage}
    \begin{aligned}
    \begin{bmatrix}
        v_{\alpha}\\
        v_{\beta}
    \end{bmatrix}
    =\frac{2}{3}
    \begin{bmatrix}
        1 & -\frac{1}{2} & -\frac{1}{2}\\
        0 & \frac{\sqrt{3}}{2} & -\frac{\sqrt{3}}{2}\\
    \end{bmatrix}
    \begin{bmatrix}
        v_a\\
        v_b\\
        v_c
    \end{bmatrix}
    =\mathbf{V}
    \begin{bmatrix}
        \cos (\omega_1 t)\\
        \sin (\omega_1 t)
    \end{bmatrix}
    =\mathbf{V}
    \begin{bmatrix}
        \cos \theta\\
        \sin \theta
    \end{bmatrix}
    \end{aligned}
\end{equation}</script><p>如果三相平衡电压以 $\sin$ 表示， $abc\rightarrow \alpha\beta$ 的变换方程：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \begin{aligned}
        \label{eq:AlphaBetaVoltage2}
    \begin{bmatrix}
        v_{\alpha}\\
        v_{\beta}
    \end{bmatrix}
    =\frac{2}{3}
    \begin{bmatrix}
        1 & -\frac{1}{2} & -\frac{1}{2}\\
        0 & \frac{\sqrt{3}}{2} & -\frac{\sqrt{3}}{2}\\
    \end{bmatrix}
    \begin{bmatrix}
        v_a\\
        v_b\\
        v_c
    \end{bmatrix}
    =\mathbf{V}
    \begin{bmatrix}
        \sin (\omega_1 t)\\
        -\cos (\omega_1 t)
    \end{bmatrix}
    =\mathbf{V}
    \begin{bmatrix}
        \sin \theta\\
        -\cos \theta
    \end{bmatrix}
    \end{aligned}
\end{equation}</script><script type="math/tex; mode=display">
\begin{equation}
    \begin{bmatrix}
        v_d\\
        v_q
    \end{bmatrix}
    =
    \begin{bmatrix}
        \cos(\hat{\theta}) & \sin(\hat{\theta})\\
        -\sin(\hat{\theta}) & \cos(\hat{\theta})
    \end{bmatrix}
    \begin{bmatrix}
        v_\alpha\\
        v_\beta
    \end{bmatrix}
\end{equation}</script><p>$\hat{\theta}=\omega_o t+\varphi_o$</p>
<p>各物理量意义：</p>
<hr>
<ul>
<li>$\mathbf{V}$ 实际电压矢量</li>
<li>$\omega_1$ 电网电压角频率</li>
<li>$\theta$ 实际电压矢量的矢量角度</li>
<li>$\hat{\theta}$ 锁相环估计的电压矢量角度</li>
<li>$\omega_o$ 锁相环估计角频率</li>
</ul>
<hr>
<p>进一步简化计算：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:SimpleAlphaBetaToDQ}
    \begin{bmatrix}
        v_d\\
        v_q
    \end{bmatrix}
    =\mathbf{V}
    \begin{bmatrix}
        \cos (\theta - \hat{\theta})\\
        \sin (\theta - \hat{\theta})
    \end{bmatrix}
    =\mathbf{V}
    \begin{bmatrix}
        \cos [(\omega_1 - \omega_o)t+\varphi_{error}]\\
        \sin [(\omega_1 - \omega_o)t+\varphi_{error}]
    \end{bmatrix}
\end{equation}</script><p>进行了一堆的数学推到过程，开始通过最后的数学表达式$\eqref{eq:SimpleAlphaBetaToDQ}$和图9开始分析三相锁相环原理。</p>
<h2 id="经典三相锁相环原理分析"><a href="#经典三相锁相环原理分析" class="headerlink" title="经典三相锁相环原理分析"></a>经典三相锁相环原理分析</h2><hr>
<p>输入信号和锁相环输出信号的可能性主要为<strong>频率</strong>和<strong>初相位</strong>的比较。频率不同$\omega<em>1 \neq \omega_o$， $v_q$ 是一个交流量。当频率锁定 $\omega_1 = \omega_o$， $v_q$ 是一个直流量。当频率和相位完全锁定， $\omega_1=\omega_o,\varphi</em>{error}=0$，$v_q=0$。 而图9原理框图，因PI环节，正好能实现 $v_q=0$ 要求。那么按照图9的原理便可实现锁相环的功能。</p>
<p><em>前面分析的三相锁相环的实现需要一个三相电网电压平衡的条件，对于不平衡的电网，无法适用。</em></p>
<h2 id="不平衡电网电压对锁相环的影响"><a href="#不平衡电网电压对锁相环的影响" class="headerlink" title="不平衡电网电压对锁相环的影响"></a>不平衡电网电压对锁相环的影响</h2><p><em>不平衡的电网电压可以用对称分量法分解成正序、负序和零序电压。</em></p>
<p><strong>不平衡电网电压用正、负和零序电压表达式：</strong>：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:UnbalanceThreePhaseVoltage}
    \begin{aligned}
        v_a &=\mathbf{V}^+ \cos(\omega_1 t) +
        \mathbf{V}^- \cos(-\omega_1 t+\varphi^-) +
        \mathbf{V}^0 \cos(\omega_1 t + \varphi^0)\\
        v_b &=\mathbf{V}^+ \cos(\omega_1 t - 2\pi/3) +
        \mathbf{V}^- \cos(-\omega_1 t - 2\pi/3+\varphi^-) +
        \mathbf{V}^0 \cos(\omega_1 t - 2\pi/3+\varphi^0)\\
        v_a &=\mathbf{V}^+ \cos(\omega_1 t - 4\pi/3)+
        \mathbf{V}^- \cos(-\omega_1 t - 4\pi/3+\varphi^-)+
        \mathbf{V}^0 \cos(\omega_1 t - 4\pi/3+\varphi^0)
    \end{aligned}
\end{equation}</script><p>$0,+,-$ 分别代表零序，正序，负序。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:PositiveAndNegativeComponentAlphaBeta}
    \mathbf{v}_{\alpha\beta}=
    \begin{bmatrix}
        v_{\alpha}\\
        v_{\beta}
    \end{bmatrix}
    = \mathbf{V}^+ + \mathbf{V}^-
    =\mathbf{V}^+
    \begin{bmatrix}
        \cos (\omega_1 t)\\
        \sin (\omega_1 t)
    \end{bmatrix}
    +\mathbf{V}^-
    \begin{bmatrix}
        \cos (-\omega_1 t + \varphi^-)\\
        \sin (-\omega_1 t + \varphi^-)
    \end{bmatrix}
\end{equation}</script><p>通过公式$~\eqref{eq:PositiveAndNegativeComponentAlphaBeta}$，可以得<br>到电网电压矢量的幅值和相位。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:AmplitudeAndPhaseForUnbalance}
    \begin{aligned}
    |\mathbf{V}|=\sqrt{(\mathbf{V}^+)^2 + (\mathbf{V}^-)^2 + 2 \mathbf{V}^+ 
    \mathbf{V}^- \cos(-2\omega t + \varphi^-)}\\
    \theta = \omega t + \arctan(\frac{\mathbf{V}^- \sin 
    (-2 \omega t + \varphi^-)}
    {\mathbf{V}^+ + \mathbf{V}^- \cos (-2\omega t + \varphi^{-1})})
    \end{aligned}
\end{equation}</script><p>由公式$\eqref{eq:AmplitudeAndPhaseForUnbalance}$可以知道，不平衡的电网电压会出现波动的幅值和相角（角频率）。而波动的幅值和相角对经典的三相锁相环有不利的影响。经典的三相锁相环适应理想的平衡三相电网电压，但对其他非理想情况需要额外的处理措施，来弥补其对非理想电网电压适应不足问题。</p>
<p><strong>对应公式$\eqref{eq:AmplitudeAndPhaseForUnbalance}$，可以提出使用低通滤波器滤波方案，来抑制不平衡电压中的谐波分量。但是引入滤波器会降低响应速度。</strong> 经典的三相锁相环适应理想的平衡三相电网电压，但对其他非理想情况需要额外的处理措施，来弥补其对非理想电网电压适应不足问题。</p>
<p><strong><em>Se Kyo Chung 的三相锁相环闭环传递函数推导以及相角不平衡，谐波和直流偏置对三相锁相环误差理论分析写的不错<sup><a href="#fn_3" id="reffn_3">3</a></sup>，值得一提的是该文献的实验结果图简单明了，值得一读。</em></strong></p>
<p>为了用于不平衡的三相电网，也可以采取提取不平衡电网中正序电压电压。那么需要了解<strong>对称分量法</strong>的原理，以此来提取正序电压。</p>
<hr>
<h1 id="对称分量法"><a href="#对称分量法" class="headerlink" title="对称分量法"></a>对称分量法</h1><p>$ABC\longrightarrow NP0$ 对于三相非平衡ABC（可以是电压，也可以是电流，甚至其他信号）可以分解成 $N$(negative sequence)，$P$(positive sequence)，$0$(zero sequence)，这个方式被称为<strong>对称分量法</strong>。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \begin{bmatrix}
        P\\
        N\\
        0
    \end{bmatrix}
    =
    \frac{1}{3}
    \begin{bmatrix}
        1 & \alpha & \alpha^2\\
        1 & \alpha^2 & \alpha\\
        1 & 1 & 1\\
    \end{bmatrix}
    \begin{bmatrix}
        A\\
        B\\
        C\\
    \end{bmatrix}
\end{equation}</script><script type="math/tex; mode=display">\alpha = e^{j\frac{2\pi}{3}}</script><p>$NP0 \longrightarrow ABC$</p>
<p>至于理论推到，用 $NP0 \longrightarrow ABC$ 更易于理解。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \begin{bmatrix}
        A\\
        B\\
        C\\
    \end{bmatrix}
    =
    \begin{bmatrix}
        1 & 1 & 1\\
        \alpha^2 & \alpha & 1\\
        \alpha & \alpha^2 & 1\\
    \end{bmatrix}
    \begin{bmatrix}
        P\\
        N\\
        0
    \end{bmatrix}
\end{equation}</script><p><strong>提取的正序分量直接用于平衡三相锁相环的原理</strong>,便可解决三相锁相不平衡问题。但是该方法对变换频率的三相电网适应性差。提取正序分量用于锁相环的方法可参考文献<sup><a href="#fn_4" id="reffn_4">4</a></sup>。</p>
<h1 id="双同步坐标系解耦锁相环"><a href="#双同步坐标系解耦锁相环" class="headerlink" title="双同步坐标系解耦锁相环"></a>双同步坐标系解耦锁相环</h1><p>针对三相电网不平衡的锁相问题，Rodriguez 等人提出了双同步坐标系解耦锁相环<sup><a href="#fn_5" id="reffn_5">5</a></sup>，具有较高的响应速度、较高的鲁棒性和较精确的性能这一节的内容主要是理解<strong>双同步坐标系解耦锁相环原理</strong>。这一小节稍微有点复杂，不想看可以跳过，感兴趣或者闲来没事倒是可以看看。</p>
<p><strong>双同步坐标系</strong>故名思意该锁相环方法含有两个同步坐标系。</p>
<p><strong>因此定义两个同步坐标系</strong>：</p>
<hr>
<ul>
<li>$dq^{+}$坐标系，angular frequency: $\hat{\omega}$，angluar position: $\hat{\theta}$</li>
<li>$dq^{-}$坐标系，angular frequency: $-\hat{\omega}$，angluar position: $-\hat{\theta}$</li>
</ul>
<hr>
<p><strong>备注</strong>： 对于不平衡的三相电网电压系统，合成的电压矢量 $\mathbf{V}$ 虽然频率是固定的，但是幅值是不断变化的。而当把三相不平衡电压使用对称分量法，可以分解成<strong>正序</strong>、<strong>负序</strong>和<strong>零序</strong>。因为中性点连接的系统，不存在零序分量。故只剩下<strong>正序和负序</strong>。同时单个负序或正序的电压矢量的幅值是恒定的。正、负序分别对应$dq^+$、$dq^-$同步坐标系。用$dq^+$ 来锁相正序， $dq^-$ 来锁相负序是没有问题。</p>
<p>定义的双坐标系和电压矢量如图11所示。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/DSRF.png" alt title="图11 双同步坐标系及坐标系的电压矢量"></p>
<hr>
<h2 id="双同步坐标系的一些数学公式"><a href="#双同步坐标系的一些数学公式" class="headerlink" title="双同步坐标系的一些数学公式"></a>双同步坐标系的一些数学公式</h2><p>conventional $ \alpha \beta \longrightarrow dq$ transformation matrix</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:AlphaBetaToDQ}
    \mathbf{T}_{dq}=
    \begin{bmatrix}
        \cos(\theta) & \sin(\theta)\\
        -\sin(\theta) & \cos(\theta)
    \end{bmatrix}
\end{equation}</script><p>从图11可以发现，$dq^+$ 坐标系和我们传统的$dq$坐标系是一样的。故</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:AlphaBetaToDQPositive}
    \mathbf{T}_{dq^+}=
    \begin{bmatrix}
        \cos(\hat{\theta}) & \sin(\hat{\theta})\\
        -\sin(\hat{\theta}) & \cos(\hat{\theta})
    \end{bmatrix}
\end{equation}</script><p>而$dq^-$坐标系的位置角为 $-\hat{\theta}$, 故</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:AlphaBetaToDQNegative}
    [\mathbf{T}_{dq^-}]=
    \begin{bmatrix}
        \cos(-\hat{\theta}) & \sin(-\hat{\theta})\\
        -\sin(-\hat{\theta}) & \cos(-\hat{\theta})
    \end{bmatrix}
    =
    \begin{bmatrix}
        \cos(\hat{\theta}) & -\sin(\hat{\theta})\\
        \sin(\hat{\theta}) & \cos(\hat{\theta})
    \end{bmatrix}
    =[\mathbf{T}_{dq^+}]^T
\end{equation}</script><p>根据公式 $\eqref{eq:PositiveAndNegativeComponentAlphaBeta}$，再结合 $\mathbf{T}<em>{dq^+}$ 和 $\mathbf{T}</em>{dq^-}$，可以获得 $\mathbf{v}<em>{dq^+}$ 和 $\mathbf{v}</em>{dq^+}$:</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:DoubelSychrounousDQ}
    \begin{aligned}
        \mathbf{v}_{dq^+}=
        \begin{bmatrix}
            v_{d^+}\\
            v_{q^+}
        \end{bmatrix}
        =[\mathbf{T}_{dq^+}] \mathbf{v}_{\alpha\beta} 
        =\mathbf{V}^+
        \begin{bmatrix}
            \cos (\omega t -\hat{\theta})\\
            \sin (\omega t -\hat{\theta})
        \end{bmatrix}
        +\mathbf{V}^-
        \begin{bmatrix}
            \cos (-\omega t + \varphi^- - \hat{\theta})\\
            \sin (-\omega t + \varphi^- - \hat{\theta})
        \end{bmatrix}\\
        \mathbf{v}_{dq^-}=
        \begin{bmatrix}
            v_{d^-}\\
            v_{q^-}
        \end{bmatrix}
        =[\mathbf{T}_{dq^-}] \mathbf{v}_{\alpha\beta} 
        =\mathbf{V}^+
        \begin{bmatrix}
            \cos (\omega t +\hat{\theta})\\
            \sin (\omega t +\hat{\theta})
        \end{bmatrix}
        +\mathbf{V}^-
        \begin{bmatrix}
            \cos (-\omega t + \varphi^- + \hat{\theta})\\
            \sin (-\omega t + \varphi^- + \hat{\theta})
        \end{bmatrix}
    \end{aligned}
\end{equation}</script><p>前面我们已经知道，使用单同步坐标系的锁相环控制结构是可以实现 $\hat{\theta} \approx \omega t$，那么对于双同步坐标系，各自独立闭环运行，依旧可以实现 $\hat{\theta} \approx \omega t$。那么 $\hat{\theta} - \omega t$ 为一个很小的值，可以采用小信号分析方法。有如下的近似等式：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:sincosapprox}
    \begin{aligned}
    \sin(\omega t - \hat{\theta}) & \approx \omega t 
    - \hat{\theta}\\
    \cos(\omega t - \hat{\theta}) & \approx 1 - ((\omega t - 
    \hat{\theta})^2/2)\\
    -\omega t - \hat{\theta} & \approx -2 \omega t
    \end{aligned}
\end{equation}</script><p>根据公式$\eqref{eq:sincosapprox}$，可以化简公式$\eqref{eq:DoubelSychrounousDQ}$,得到一个简化版结果。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:SimpleDoubelSychrounousDQ}
    \begin{aligned}
        \mathbf{v}_{dq^+}
        &=\mathbf{V}^+
        \begin{bmatrix}
            1 - (\omega t -\hat{\theta})^2/2\\
            \omega t -\hat{\theta}
        \end{bmatrix}
        +\mathbf{V}^-
        \begin{bmatrix}
            \cos (-2\omega t + \varphi^-)\\
            \sin (-2\omega t + \varphi^-)
        \end{bmatrix}\\
        \mathbf{v}_{dq^-}
        &=\mathbf{V}^+
        \begin{bmatrix}
            \cos (2\omega t)\\
            \sin (2\omega t)
        \end{bmatrix}
        +\mathbf{V}^-
        \begin{bmatrix}
            \cos (\varphi^-)\\
            \sin (\varphi^-)
        \end{bmatrix}
    \end{aligned}
\end{equation}</script><p>至于得到简化的公式有何意义？$dq^+$ 和 $dq^-$ 坐标系的直流分量与电网电压的正序和负序分量的幅值有关，而2次谐波分量是分解两同步旋转坐标系而造成的耦合分量。接下来主要目标就是<strong>解耦耦合分量</strong>，或者说消除耦合分量。</p>
<hr>
<h2 id="解耦网络"><a href="#解耦网络" class="headerlink" title="解耦网络"></a>解耦网络</h2><p>为进行一般化分析，假设任意电压矢量包括正、负序分量两部分，分别以角速度 $n\omega$ 和 $m\omega$ 旋转，其中 $n$ 、$m$ 分别表示正、负序。电网角频率$\omega$。通过公式$\eqref{eq:PositiveAndNegativeComponentAlphaBeta}$，可以得电压矢量的正、负序分量表示为：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:GeneralPositiveAndNegativeComponentAlphaBeta}
    \mathbf{v}_{\alpha\beta}=
    \begin{bmatrix}
        v_{\alpha}\\
        v_{\beta}
    \end{bmatrix}
    = \mathbf{V}_{\alpha\beta}^n + \mathbf{V}_{\alpha\beta}^m
    =\mathbf{V}^{n}
    \begin{bmatrix}
        \cos (n \omega t + \varphi^n)\\
        \sin (n \omega t + \varphi^n) 
    \end{bmatrix}
    +\mathbf{V}^{m}
    \begin{bmatrix}
        \cos (m \omega t + \varphi^m)\\
        \sin (m \omega t + \varphi^m)
    \end{bmatrix}
\end{equation}</script><p>$\varphi^n$ 和 $\varphi^m$ 正序和负序电压矢量的初始相位角。</p>
<p>现在正序、负序两个旋转坐标系分别用 $dq^n$ 和 $dq^m$ 来表示。$n \hat{\theta}$ 和$m \hat{\theta}$ 则表示正、负序的两个旋转坐标系的相位角度。$\hat{\theta}$ 为锁相环输出角度。</p>
<p><strong>先假设锁相环能完全锁相，即有 $\hat{\theta}=\omega t$。</strong>(至于为什么要这样假设？在理想的锁相的条件下，找出影响波动的原因,并把波动量消除，便可得到正确的锁相。同时，在常规的三相锁相环结构，就可以达到$\hat{\theta} \approx \omega t$的效果，因此做这样的假设是合理的操作)。那么，公式$\eqref{eq:GeneralPositiveAndNegativeComponentAlphaBeta}$ 在 $dq^n$ 和 $dq^m$ 坐标系下表达式为：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:MNDoubelSychrounousDQ}
    \begin{aligned}
        \mathbf{v}_{dq^n} &=
        \begin{bmatrix}
            v_{d^n}\\
            v_{q^n}
        \end{bmatrix}
        =[\mathbf{T}_{dq^n}] \mathbf{v}_{\alpha\beta}=
        \begin{bmatrix}
            \cos(n\hat{\theta}) & \sin(n\hat{\theta})\\
            -\sin(n\hat{\theta}) & \cos(n\hat{\theta})
        \end{bmatrix}
        \begin{bmatrix}
            v_{\alpha}\\
            v_{\beta}
        \end{bmatrix}
        \\
                  &= \mathbf{V}^n
        \begin{bmatrix}
            \cos (\varphi^n)\\
            \sin (\varphi^n)
        \end{bmatrix}
        +\mathbf{V}^m\cos(\varphi^m)
        \begin{bmatrix}
            \cos ((n-m)\omega t)\\
            -\sin( (n-m)\omega t)
        \end{bmatrix}
        +\mathbf{V}^m\sin(\varphi^m)
        \begin{bmatrix}
            \sin ((n-m)\omega t)\\
            \cos ((n-m)\omega t)
        \end{bmatrix}\\
        \mathbf{v}_{dq^m} &=
        \begin{bmatrix}
            v_{d^m}\\
            v_{q^m}
        \end{bmatrix}
        =[\mathbf{T}_{dq^m}] \mathbf{v}_{\alpha\beta}=
        \begin{bmatrix}
            \cos(m\hat{\theta}) & \sin(m\hat{\theta})\\
            -\sin(m\hat{\theta}) & \cos(m\hat{\theta})
        \end{bmatrix}
        \begin{bmatrix}
            v_{\alpha}\\
            v_{\beta}
        \end{bmatrix}
        \\
                  &=\mathbf{V}^m
        \begin{bmatrix}
            \cos \varphi^m\\
            \sin \varphi^m
        \end{bmatrix}
        +\mathbf{V}^n\cos(\varphi^n)
        \begin{bmatrix}
            \cos ((n-m)\omega t)\\
            \sin ((n-m)\omega t)
        \end{bmatrix}
        +\mathbf{V}^n\sin(\varphi^n)
        \begin{bmatrix}
            -\sin ((n-m)\omega t)\\
            \cos ((n-m)\omega t)
        \end{bmatrix}\\
    \end{aligned}
\end{equation}</script><p>从公式$\eqref{eq:MNDoubelSychrounousDQ}$，我们得到了在<strong>锁相状态($\omega t = \hat{\theta}$)</strong>下的 $\mathbf{v}<em>{dq^n}$和$\mathbf{v}</em>{dq^n}$的表达式。通过表达式可以知道，$dq^n$坐标系下的交流量(振荡量)的幅值由 $dq^m$ 坐标系下的平均值所决定。与之对应的， $dq^m$ 坐标系下的<strong>交流量</strong>的幅值由$dq^n$坐标系下的平均值决定。<strong>解耦的目标就是消除振荡量(交流量)。</strong>既然实际的$\mathbf{v}<em>{dq^n}$ 和 $\mathbf{v}</em>{dq^m}$ 中含有交流量部分，为了消除交流量，可以\textbf{构造一个等量的交流量来与之做差}，便可消除交流部分。<br>以消除交流分量为目标，如图12所示，为$dq^n$ 坐标系下的解耦网络。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/DQMNDecouple.png" alt title="图12 $dq^n$坐标系的解耦网络"></p>
<p>针对$dq^m$坐标系，可以根据公式$\eqref{eq:MNDoubelSychrounousDQ}$，构造对应的解耦网络。</p>
<p>那么$dq^n$和$dq^m$双同步坐标系的解耦网络如图13所示。其中LPF是一个一阶低通滤波器，其传递函数可表示为：</p>
<script type="math/tex; mode=display">
\begin{equation}
    LPF(s)=\frac{\omega_f}{s+\omega_f}
\end{equation}</script><p>文献[5]中，在这个解耦网络的基础上，进一步用状态空间方程来表示该解耦网络。个人认为，对于理解双坐标系的锁相环原理到此，就可以完全理解其核心理念了。文献[5]用状态空间模型的目的大概在于表达形式更统一，简便吧！</p>
<p>通过对解耦网络图13和传统的三相锁相环结构图10整合，可以得到双同步坐标系下锁相环整个原理框图，如图14所示。 <strong>$n$ 或 $m$ 分别代表正负序的意义。</strong></p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/DDSRFSPLL.png" alt title="图14 DDSRF-SPLL原理框图"></p>
<p>该方法解决了前面提取正序方案无法应对变换频率的问题。对频率具有良好的适应性。尽管该接偶环节加了一个一阶低通滤波器降低了响应速度，但是该锁相环的效果还是不错的。三相锁相环的研究就告一段落。接下来开始研究<strong>单相锁相环</strong>。</p>
<hr>
<h1 id="虚拟平均无功鉴相单相锁相环"><a href="#虚拟平均无功鉴相单相锁相环" class="headerlink" title="虚拟平均无功鉴相单相锁相环"></a>虚拟平均无功鉴相单相锁相环</h1><p><img data-src="/2022/03/30/PLL-Learning-Notes/SinglePhasePLLConfigurationVirtualReactivePower.png" alt title="图15 基于虚拟平均无功鉴相的单相锁相环控制结构"></p>
<p>该方法取了一个高大上的名字<strong>虚拟平均无功鉴相单相锁相环</strong>，实际从本质上来看就是最开始分析的<strong>乘法鉴相锁相环</strong>。如果再本质一点就是<strong>乘法器</strong>。</p>
<p>输入信号：</p>
<script type="math/tex; mode=display">
\begin{equation}
    e_i=V\cos \theta
\end{equation}</script><p>锁相环输出相角：$\hat{\theta}$</p>
<p>定义一个虚拟的电流$i_s$（简单的说就是一个假想的物理量，在真实的物理世界不存在的物理量)重要的是它的数学表达式：</p>
<script type="math/tex; mode=display">
\begin{equation}
    i_s=\sin \hat{\theta}
\end{equation}</script><p>上面$e_i$和 $i_s$ 经过乘法器得到的结果，定义为虚拟无功功率$p$:</p>
<script type="math/tex; mode=display">
\begin{equation}
    p=V\cos\theta \sin \hat{\theta}
\end{equation}</script><p>三角函数积化和差公式用于 $p$:</p>
<script type="math/tex; mode=display">
\begin{equation}
    p=\frac{V}{2}\sin (\hat{\theta} - \theta)
    +\frac{V}{2} \sin (\hat{\theta} + \theta)
\end{equation}</script><p>和乘法器鉴相锁相环相似的处理逻辑，低通滤波器滤除$\frac{V}{2} \sin (\hat{\theta} + \theta)$ 交流分量，得到无功功率平均值$\bar{p}$。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \bar{p}=\frac{V}{2}\sin (\hat{\theta} - \theta)
\end{equation}</script><p>假设该系统成功锁相，那么有 $\theta \approx \hat{\theta}$, 小信号处理，可以得到</p>
<script type="math/tex; mode=display">
\begin{equation}
    \bar{p} = \frac{V}{2}(\hat{\theta} - \theta)
\end{equation}</script><p>那么只要控制$\bar{p}$为0，便可以实现锁相。这也是 $\bar{p}^{ * }=0$ 的原因。</p>
<p>虚拟平均无功鉴相单相锁相环的整个原理，控制结构图15充分展现其原理。</p>
<p>该方法简单，但该方法的动态性能比较弱(添加了低通滤波器LPF)。它对电网谐波不敏感，算一个优点吧。无法获得电网的幅值信息，算一个缺点吧。</p>
<hr>
<h1 id="增强型单相锁相环EPLL"><a href="#增强型单相锁相环EPLL" class="headerlink" title="增强型单相锁相环EPLL"></a>增强型单相锁相环EPLL</h1><p>为了解决<strong>虚拟平均无功鉴相单相锁相环</strong>动态响应速度慢的问题，采用基于自适应滤波理论的来重构输入信号的基波分量，同时可以实现对输入信号幅值、相位角与频率的估算。把这种基于自适应滤波理论的锁相环称为<strong>增强型单相锁相环</strong><sup><a href="#fn_6" id="reffn_6">6</a></sup>. </p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SinglePhaseEPLLConfiguration.png" alt title="图16 增强型单相锁相环控制结构"></p>
<p>该控制结构多了一个比较陌生的变量$\hat{A}$，他是用来估算输入锁相信号的幅值。</p>
<p>根据图16的控制结构，可以写出$e_d$</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:SingleEpllPDSignal}
    \begin{aligned}
        e_d &= e \times \sin \hat{\theta}\\
            &= (e_i-\hat{e_i}) \sin \hat{\theta}\\
            &= (\hat{A} \cos \hat{\theta}-V\cos \theta) 
            \sin \hat{\theta}\\
            &= \frac{V}{2} \sin (\hat{\theta} -\theta)+
            \frac{V}{2} \sin (\theta + \hat{\theta}) -
            \frac{\hat{A}}{2} \sin 2 \hat{\theta}
    \end{aligned}
\end{equation}</script><p>仔细端详该控制结构框图，会发现在<strong>稳态</strong>时，有$\hat{A} \approx V$, $\hat{\theta} \approx \theta$，在使用小信号模型分析方法，可以简化公式$\eqref{eq:SingleEpllPDSignal}$，得到一个有关相位差的公式。</p>
<script type="math/tex; mode=display">
\begin{equation}
    e_d = \frac{V}{2} (\hat{\theta}-\theta)
\end{equation}</script><p>值得注意的是控制框图中的PD环节中有一个积分系数 $K$, $K$的大小决定的是线电压幅值估算值 $\hat{A}$ 的收敛速度。<strong>$\hat{A}$的收敛目标就是线电压幅值</strong>。</p>
<p>该锁相环的近似闭环传递函数：</p>
<script type="math/tex; mode=display">
\begin{equation}
    H(s)=K_v \frac{s K_p + K_i}{s^2+s K_v K_p + K_v K_i}
\end{equation}</script><p>$K_v$ 为鉴相器的稳态增益， $K_v=\frac{V}{2}$。但是该闭环传递函数如何得来的，目前还不是特别清楚？</p>
<p>该方案替换了低通滤波器，通过使$\frac{V}{2} \sin (\theta + \hat{\theta})$、$\frac{\hat{A}}{2} \sin 2 \hat{\theta}$ 两者抵消的方案实现交流量的滤除。尽管提高了锁相环的响应速度，具有较好的动态性能。但是该锁相环方案对谐波比较敏感。不适合含有大量谐波的场合，需要先进行谐波滤除，才能应用该方案。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/EPLL2.png" alt title="图17 增强型单相锁相环另一个控制结构"></p>
<p>图16的控制结构和图17只是$\sin$和$\cos$互换，依然能实现锁相环的功能。</p>
<hr>
<h1 id="基于延迟法的虚拟两相的单相锁相环"><a href="#基于延迟法的虚拟两相的单相锁相环" class="headerlink" title="基于延迟法的虚拟两相的单相锁相环"></a>基于延迟法的虚拟两相的单相锁相环</h1><p>前面针对单相锁相环的处理都是集中在单个输入信号。当然，可以采取前面的三相锁相环的思路，来构造一个虚拟的正交信号，来模仿三相锁相环的原理。输入信号定义为$v<em>{\beta}$，经过$90^{\circ}$的延时来虚拟一个$v</em>{\alpha}$。而通过公式$\eqref{eq:AlphaBetaVoltage}$可以知道，$v<em>{\alpha}$ 的相角和三相的$v_a$相角对应(这句话实际没啥意义，可以忽略！)。有了$v</em>{\alpha}$和 $v_{\beta}$，那么就可以使用三相锁相环的处理方案。</p>
<p>如图18所示，为基于延迟法的虚拟两相的单相锁相环的控制结构。和经典的三相锁相环结构对比对比就可以理解啦！延迟$90^{\circ}$的方法，影响响应速度。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SinglePhasePLLDelay90Degree.png" alt title="图18 基于延迟法虚拟两相的单相锁相环控制结构"></p>
<hr>
<h1 id="基于微分法的虚拟两相的单相锁相环"><a href="#基于微分法的虚拟两相的单相锁相环" class="headerlink" title="基于微分法的虚拟两相的单相锁相环"></a>基于微分法的虚拟两相的单相锁相环</h1><p>知道$v<em>{\beta}$ 获得 $v</em>{\alpha}$ 的方式，除了使用延迟方式，还可以使用微分的方式。但是有个一个前提， <strong>输入信号$v_{\beta}$为理想的正弦信号</strong>。对于非理想电网就会出现问题。尽管速度提高了，但微分环节的引入，抗噪声能力严重下降。</p>
<p>如果想把非理想正弦的信号变换为正弦的理想信号，又需要加入滤波器，这又引入了延迟。哈哈！进入无限死循环。该微分法的原理框图不在列出，本质上和基于延迟法的单相锁相环没有差别。</p>
<hr>
<h1 id="基于Park反变换虚拟两相的单相锁相环"><a href="#基于Park反变换虚拟两相的单相锁相环" class="headerlink" title="基于Park反变换虚拟两相的单相锁相环"></a>基于Park反变换虚拟两相的单相锁相环</h1><p>基于Park反变换的方法有点意思，所以把控制结构图列出来，如图19所示。尽管文献<sup><a href="#fn_7" id="reffn_7">7</a></sup>有其他分析思路，但是我更倾向于更简单有效的理解方式。把这个反Park变换作为估计$v<em>{\beta}$的一种观测器来理解。同样和前面的基于虚拟两相的方法具有一曲同功之妙。已知输入信号$v</em>{\alpha}$，通过坐标变换获得$v_{\beta}$，然后使 $v_d=0$,即可实现锁相环功能。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SinglePhasePLLInversePark.png" alt title="图19 基于Park反变换虚拟两相的单相锁相环"></p>
<p>列写几个变换方程（通过上面结构框图可以得到），意思意思一下。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \begin{bmatrix}
        v_d\\
        v_q
    \end{bmatrix}
    =
    \begin{bmatrix}
        \cos(\hat{\theta}) & \sin(\hat{\theta})\\
        -\sin(\hat{\theta}) & \cos(\hat{\theta})
    \end{bmatrix}
    \begin{bmatrix}
        v_{\alpha}\\
        v_{\beta}
    \end{bmatrix}
\end{equation}</script><script type="math/tex; mode=display">
\begin{equation}
    \begin{bmatrix}
        v_{\alpha}'\\
        v_{\beta}'
    \end{bmatrix}
    =
    \begin{bmatrix}
        \cos(\hat{\theta}) & -\sin(\hat{\theta})\\
        \sin(\hat{\theta}) & \cos(\hat{\theta})
    \end{bmatrix}
    \begin{bmatrix}
        v_d'\\
        v_q'
    \end{bmatrix}
\end{equation}</script><script type="math/tex; mode=display">v_{\beta}=v_{\beta}'</script><script type="math/tex; mode=display">
\begin{equation}
    v_{d}'(s)=\frac{v_d(s)}{\tau_d s + 1}
\end{equation}</script><script type="math/tex; mode=display">
\begin{equation}
    v_{q}'(s)=\frac{v_q(s)}{\tau_d s + 1}
\end{equation}</script><hr>
<h1 id="基于SOGI的单相锁相环"><a href="#基于SOGI的单相锁相环" class="headerlink" title="基于SOGI的单相锁相环"></a>基于SOGI的单相锁相环</h1><p>SOGI全称为 <strong>Second-Order Generalized Integrator</strong>，翻译成中文为<strong>二阶广义积分器</strong>。基于SOGI的单相锁相环的核心就是<strong>SOGI</strong>，如果明白SOGI，剩下的问题就迎刃而解啦！</p>
<p>简单的说一下SOGI的功能：<strong>SOGI的两个输出信号严格的满足$90^{\circ}$的相位偏差(两输出信号严格的正交)，同时其中一个输出能精确的跟踪输入基频信号。</strong></p>
<p>如果能得到两个严格正交的信号，可以分别定义为$v<em>{\alpha}$、$v</em>{\beta}$，那么再利用前面经典的三相锁相环原理，便可实现锁相环功能。</p>
<p>如图20所示，为SOGI-QSG(Second-Order Generalized Integrator Quadrature Signals Generation)的原理框图。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SOGI-QSG.png" alt title="图20 SOGI-QSG原理框图"></p>
<h2 id="为什么SOGI能精确跟踪为正弦的输入信号"><a href="#为什么SOGI能精确跟踪为正弦的输入信号" class="headerlink" title="为什么SOGI能精确跟踪为正弦的输入信号?"></a>为什么SOGI能精确跟踪为正弦的输入信号?</h2><p>根据图20，可以得到SOGI的开环传递函数：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:SOGIOpenLoopTransferFunction}
    \begin{aligned}
    \frac{v_{\alpha}(s)}{K\varepsilon_v(s)}
    &=\frac{s \hat{\omega_o}}{s^2+\hat{\omega_o}^2}\\
    \frac{v_{\beta}(s)}{K\varepsilon_v(s)}
    &=\frac{\hat{\omega_o}^2}{s^2+\hat{\omega_o}^2}
    \end{aligned}
\end{equation}</script><p>正弦信号的 laplace 变换</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:SinusoidalLaplaceTransfer}
    \begin{aligned}
        \mathcal{L}\{\sin(\omega t)\}&=\frac{\omega}{s^2+\omega^2}\\
        \mathcal{L}\{\cos(\omega t)\}&=\frac{s}{s^2+\omega^2}
    \end{aligned}
\end{equation}</script><p>根据<strong>内膜原理</strong><sup><a href="#fn_8" id="reffn_8">8</a></sup>，可以用一句简单的话来说，<strong>整个控制系统要使输入信号与输出信号无静差，完全精准跟踪输入信号，那么只要满足控制系统的开环传递函数中含有输入信号的s域模型的条件，便可实现精准无静差跟踪。</strong></p>
<p>比较好的 <a href="https://engineering.purdue.edu/~zak/ECE_382-Fall_2018/hand_3.pdf">The Internal Model Principle</a> 教程是 Purdue 大学 Zak 教授的这一篇内膜原理笔记。有兴趣，可以读一读。</p>
<p>观察公式 $\eqref{eq:SOGIOpenLoopTransferFunction}$和公式$\eqref{eq:SinusoidalLaplaceTransfer}$你会发现恰巧SOGI的开环传递函数含有正弦信号的s域模型。那么就解决了为什么SOGI可以精确跟踪正弦信号。</p>
<h2 id="为什么SOGI两输出信号严格正交？"><a href="#为什么SOGI两输出信号严格正交？" class="headerlink" title="为什么SOGI两输出信号严格正交？"></a>为什么SOGI两输出信号严格正交？</h2><p>SOGI的闭环传递函数：</p>
<script type="math/tex; mode=display">
\begin{equation}
    \label{eq:SOGIClosedLoopTransferFunction}
    \begin{aligned}
     G_{\alpha} &=\frac{v_{\alpha}(s)}{v(s)}
     =\frac{ks}{s^2+ks+\hat{\omega_o}^2}\\
     G_{\beta} &=\frac{v_{\beta}(s)}{v(s)}
     =\frac{k\hat{\omega_o}}{s^2+ks+\hat{\omega_o}^2}
    \end{aligned}
\end{equation}</script><p>可以直接看两闭环传递函数$\eqref{eq:SOGIClosedLoopTransferFunction}$互差$90^{\circ}$。</p>
<script type="math/tex; mode=display">
\begin{equation}
    \angle G_{\alpha} - \angle G_{\beta}=\frac{\pi}{2}
\end{equation}</script><p>因此SOGI的两输出信号严格正交。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SOGIBode.png" alt title="图21 SOGI闭环传递函数bode图"></p>
<p>从闭环传递函数 Bode 图中也可以验证SOGI输出信号严格正交，<br>$G<em>{\alpha}$、 $G</em>{\beta}$ 相角严格互差$\frac{\pi}{2}$。</p>
<p>从图21可以发现，$G_{\alpha}$可以看作一个带通滤波器，在频率 $\hat{\omega_o}$ 处无衰减，但在其它频率就有衰减作用，越偏离 $\hat{\omega_o}$，衰减越厉害。这也是锁相环所期望的，锁定频率基本不衰减，其他次谐波都衰减，过滤。因此基于SOGI的单相锁相环性能不错，能抵抗谐波干扰。</p>
<p>写了这么多理论，放一个基于 SOGI 的 simulink 的仿真波形吧！如图22所示。</p>
<p><img data-src="/2022/03/30/PLL-Learning-Notes/SOGI_PLLResult.png" alt title="图22 SOGI PLL仿真波形"></p>
<p>对SOGI单相锁相环有兴趣，可以参考文献<sup><a href="#fn_9" id="reffn_9">9</a></sup>，该文献对SOGI单相锁相环写的清晰明了，图文并茂。</p>
<hr>
<h1 id="锁相环的性能指标"><a href="#锁相环的性能指标" class="headerlink" title="锁相环的性能指标"></a>锁相环的性能指标</h1><hr>
<ul>
<li>稳态相角误差 state phase-angle error</li>
<li>相角响应速度 speed of response to angle</li>
<li>频率响应速度 speed of response to frequency</li>
<li>变频的适应能力 variable frequency rejection</li>
<li>谐波适应能力 harmonic rejection</li>
<li>非平衡电网适应能力 line unbalance rejection</li>
</ul>
<hr>
<h1 id="推荐阅读有关PLL文献"><a href="#推荐阅读有关PLL文献" class="headerlink" title="推荐阅读有关PLL文献"></a>推荐阅读有关PLL文献</h1><p><a href="https://ieeexplore.ieee.org/document/1318659">A method for synchronization of power electronic converters in polluted and variable-frequency environments</a></p>
<p><a href="https://ieeexplore.ieee.org/document/1348790">Performance evaluation of PLL algorithms for single-phase grid-connected systems</a></p>
<p><a href="https://ieeexplore.ieee.org/document/4118328">Decoupled Double Synchronous Reference Frame PLL for Power Converters Control</a></p>
<p><a href="https://ieeexplore.ieee.org/document/4497881">Comparison of Three Single-Phase PLL Algorithms for UPS Applications</a></p>
<p><a href="https://ieeexplore.ieee.org/document/955993">PLL structures for utility connected systems</a></p>
<p><a href="https://ieeexplore.ieee.org/document/844502">A phase tracking system for three phase utility interface inverters</a></p>
<p><a href="https://ieeexplore.ieee.org/document/567077">Operation of a phase locked loop system under distorted utility conditions</a></p>
<p><a href="https://ieeexplore.ieee.org/document/1711988">A new single-phase PLL structure based on second order generalized integrator</a></p>
<p><a href="{https://ieeexplore.ieee.org/document/986202">A new phase-locked loop (PLL) system</a></p>
<hr>
<h1 id="备注"><a href="#备注" class="headerlink" title="备注"></a>备注</h1><p>I would greatly appreciate hearing about any error in this article, even minor ones. I welcome your suggestions for improvements, even tiny one. Please contact me by email 😜! Have fun!</p>
<hr>
<h1 id="参考文献"><a href="#参考文献" class="headerlink" title="参考文献"></a>参考文献</h1><blockquote id="fn_1">
<sup>1</sup>. 张崇巍, 张兴. PWM 整流器及其控制 [M]. 北京: 机械工业出版社, 2012.<a href="#reffn_1" title="Jump back to footnote [1] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_2">
<sup>2</sup>. KAURA V, BLASKO V. Operation of a phase locked loop system under distorted utility conditions[J]. IEEE Transactions on Industry applications, 1997, 33(1): 58-63.<a href="#reffn_2" title="Jump back to footnote [2] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_3">
<sup>3</sup>. CHUNG S K. A phase tracking system for three phase utility interface inverters[J/OL]. IEEE Transactions on Power electronics, 2000, 15(3): 431-438. DOI: 10.1109/63.844502.<a href="#reffn_3" title="Jump back to footnote [3] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_4">
<sup>4</sup>. LEE S J, KANG J K, SUL S K. A new phase detecting method for power conversion systems considering distorted conditions in power system[C/OL]//Conference Record of the 1999 IEEE Industry Applications Conference. Thirty-Forth IAS Annual Meeting (Cat. No.99CH36370):volume 4. 1999: 2167-2172 vol.4. DOI: 10.1109/IAS.1999.798754.<a href="#reffn_4" title="Jump back to footnote [4] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_5">
<sup>5</sup>. RODRIGUEZ P, POU J, BERGAS J, et al. Decoupled double synchronous reference frame pll for power converters control[J/OL]. IEEE Transactions on Power Electronics, 2007, 22(2):584-592. DOI: 10.1109/TPEL.2006.890000.<a href="#reffn_5" title="Jump back to footnote [5] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_6">
<sup>6</sup>. KARIMI-GHARTEMANI M, IRAVANI M R. A method for synchronization of power electronic converters in polluted and variable-frequency environments[J]. IEEE Transactions on Power Systems, 2004, 19(3): 1263-1270.<a href="#reffn_6" title="Jump back to footnote [6] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_7">
<sup>7</sup>. SILVA S M, LOPES B M, CAMPANA R P, et al. Performance evaluation of pll algorithms for single-phase grid-connected systems[C]//Conference Record of the 2004 IEEE Industry Applications Conference, 2004. 39th IAS Annual Meeting.: volume 4. IEEE, 2004: 2259-2263.<a href="#reffn_7" title="Jump back to footnote [7] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_8">
<sup>8</sup>. FRANCIS B A, WONHAM W M. The internal model principle for linear multivariable regulators[J]. Applied mathematics and optimization, 1975, 2(2): 170-194.<a href="#reffn_8" title="Jump back to footnote [8] in the text."> &#8617;</a>
</blockquote>
<blockquote id="fn_9">
<sup>9</sup>. CIOBOTARU M, TEODORESCU R, BLAABJERG F. A new single-phase pll structure based on second order generalized integrator[C/OL]//2006 37th IEEE Power Electronics Specialists Conference. 2006: 1-6. DOI: 10.1109/pesc.2006.1711988. <a href="#reffn_9" title="Jump back to footnote [9] in the text."> &#8617;</a>
</blockquote>
<hr>
]]></content>
      <categories>
        <category>Power Electronics</category>
      </categories>
      <tags>
        <tag>PLL</tag>
        <tag>Power Electronics</tag>
      </tags>
  </entry>
</search>
